#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ bin_packing –∏ save_dxf_layout_complete –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""

from layout_optimizer import rotate_polygon, translate_polygon, place_polygon_at_origin
from shapely.geometry import Polygon
import numpy as np

def test_transform_consistency():
    """–¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π"""
    
    print("=== –¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–≤–µ—Ä –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ (–Ω–µ –≤ –Ω–∞—á–∞–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
    original_polygon = Polygon([(10, 20), (110, 20), (110, 70), (10, 70)])
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–≤–µ—Ä: bounds={original_polygon.bounds}")
    
    angle = 90
    target_position = (200, 100)  # –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    
    # === –ú–ï–¢–û–î 1: –ö–∞–∫ –¥–µ–ª–∞–µ—Ç bin_packing ===
    print("\n--- –ú–µ—Ç–æ–¥ 1 (bin_packing) ---")
    
    # –®–∞–≥ 1: –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω
    rotated_for_packing = rotate_polygon(original_polygon, angle)
    print(f"–ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞: bounds={rotated_for_packing.bounds}")
    
    # –®–∞–≥ 2: –†–∞–∑–º–µ—â–∞–µ–º –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ —á–µ—Ä–µ–∑ translate
    # –í bin_packing –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –Ω–æ —Å—É—Ç—å —Ç–∞–∫–∞—è:
    rotated_bounds = rotated_for_packing.bounds
    offset_x = target_position[0] - rotated_bounds[0]
    offset_y = target_position[1] - rotated_bounds[1]
    
    final_packing = translate_polygon(rotated_for_packing, offset_x, offset_y)
    print(f"–ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: bounds={final_packing.bounds}")
    print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å–º–µ—â–µ–Ω–∏—è: offset_x={offset_x}, offset_y={offset_y}")
    
    # === –ú–ï–¢–û–î 2: –ö–∞–∫ –¥–µ–ª–∞–µ—Ç save_dxf_layout_complete (–£–ü–†–û–©–ï–ù–ù–´–ô –ü–û–î–•–û–î) ===
    print("\n--- –ú–µ—Ç–æ–¥ 2 (save_dxf_layout_complete –£–ü–†–û–©–ï–ù–ù–´–ô) ---")
    
    # –®–∞–≥ 1: –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
    orig_bounds = original_polygon.bounds
    moved_to_origin = translate_polygon(original_polygon, -orig_bounds[0], -orig_bounds[1])
    rotated_at_origin = rotate_polygon(moved_to_origin, angle)
    print(f"–ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: bounds={rotated_at_origin.bounds}")
    
    # –®–∞–≥ 2: –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    rotated_bounds = rotated_at_origin.bounds
    target_bounds = final_packing.bounds
    translate_x = target_bounds[0] - rotated_bounds[0]
    translate_y = target_bounds[1] - rotated_bounds[1]
    print(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: dx={translate_x}, dy={translate_y}")
    
    # –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
    final_dxf = translate_polygon(rotated_at_origin, translate_x, translate_y)
    print(f"–ü–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: bounds={final_dxf.bounds}")
    
    # === –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
    print("\n--- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---")
    
    packing_bounds = final_packing.bounds
    dxf_bounds = final_dxf.bounds
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç bin_packing: {packing_bounds}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç save_dxf:    {dxf_bounds}")
    
    tolerance = 0.1  # 0.1–º–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
    
    bounds_match = (
        abs(packing_bounds[0] - dxf_bounds[0]) < tolerance and
        abs(packing_bounds[1] - dxf_bounds[1]) < tolerance and
        abs(packing_bounds[2] - dxf_bounds[2]) < tolerance and
        abs(packing_bounds[3] - dxf_bounds[3]) < tolerance
    )
    
    if bounds_match:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã!")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã!")
        print(f"–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏:")
        print(f"  dx1: {abs(packing_bounds[0] - dxf_bounds[0]):.6f}")
        print(f"  dy1: {abs(packing_bounds[1] - dxf_bounds[1]):.6f}")
        print(f"  dx2: {abs(packing_bounds[2] - dxf_bounds[2]):.6f}")
        print(f"  dy2: {abs(packing_bounds[3] - dxf_bounds[3]):.6f}")
        return False

def test_multiple_angles():
    """–¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞"""
    print("\n=== –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —É–≥–ª–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç–∞ ===")
    
    original_polygon = Polygon([(5, 10), (55, 10), (55, 30), (5, 30)])
    target_position = (100, 50)
    
    angles = [0, 90, 180, 270]
    all_passed = True
    
    for angle in angles:
        print(f"\n--- –£–≥–æ–ª {angle}¬∞ ---")
        
        # –ú–µ—Ç–æ–¥ bin_packing
        rotated = rotate_polygon(original_polygon, angle)
        rotated_bounds = rotated.bounds
        offset_x = target_position[0] - rotated_bounds[0]
        offset_y = target_position[1] - rotated_bounds[1]
        final_packing = translate_polygon(rotated, offset_x, offset_y)
        
        # –ú–µ—Ç–æ–¥ save_dxf (–£–ü–†–û–©–ï–ù–ù–´–ô)
        orig_bounds = original_polygon.bounds
        moved_to_origin = translate_polygon(original_polygon, -orig_bounds[0], -orig_bounds[1])
        rotated_at_origin = rotate_polygon(moved_to_origin, angle)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á—Ç–æ –∏ bin_packing
        rotated_at_origin_bounds = rotated_at_origin.bounds
        target_bounds = final_packing.bounds
        translate_x = target_bounds[0] - rotated_at_origin_bounds[0]
        translate_y = target_bounds[1] - rotated_at_origin_bounds[1]
        final_dxf = translate_polygon(rotated_at_origin, translate_x, translate_y)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        tolerance = 0.1
        bounds_match = all(
            abs(a - b) < tolerance 
            for a, b in zip(final_packing.bounds, final_dxf.bounds)
        )
        
        if bounds_match:
            print(f"  ‚úÖ –£–≥–æ–ª {angle}¬∞: OK")
        else:
            print(f"  ‚ùå –£–≥–æ–ª {angle}¬∞: FAIL")
            all_passed = False
    
    return all_passed

if __name__ == "__main__":
    result1 = test_transform_consistency()
    result2 = test_multiple_angles()
    
    print("\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    if result1 and result2:
        print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–æ–≤—Ä–æ–≤ –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        print("–í—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ.")
    else:
        print("üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–æ–≤—Ä–æ–≤ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        print("–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")