#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""

import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete
from shapely.geometry import Polygon

def debug_spline_coordinates():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    print("=== –û–¢–õ–ê–î–ö–ê –ö–û–û–†–î–ò–ù–ê–¢ SPLINE –≠–õ–ï–ú–ï–ù–¢–û–í ===")
    
    source_dxf = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DXF
    print(f"\\nüìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ SPLINE –≤: {source_dxf}")
    
    doc = ezdxf.readfile(source_dxf)
    msp = doc.modelspace()
    
    real_splines = [e for e in msp if e.dxftype() == 'SPLINE']
    print(f"  –ù–∞–π–¥–µ–Ω–æ SPLINE'–æ–≤: {len(real_splines)}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º bounds –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö SPLINE'–æ–≤
    all_real_xs = []
    all_real_ys = []
    
    for i, spline in enumerate(real_splines):
        try:
            control_points = spline.control_points
            if control_points:
                for cp in control_points:
                    if hasattr(cp, 'x') and hasattr(cp, 'y'):
                        all_real_xs.append(cp.x)
                        all_real_ys.append(cp.y)
                    elif len(cp) >= 2:
                        all_real_xs.append(float(cp[0]))
                        all_real_ys.append(float(cp[1]))
        except Exception as e:
            print(f"    SPLINE {i+1}: –æ—à–∏–±–∫–∞ - {e}")
    
    if all_real_xs and all_real_ys:
        real_bounds = (min(all_real_xs), min(all_real_ys), max(all_real_xs), max(all_real_ys))
        print(f"  üìê –†–ï–ê–õ–¨–ù–´–ï bounds –≤—Å–µ—Ö SPLINE'–æ–≤: {real_bounds}")
    
    # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º parsed_data
    print(f"\\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º parsed_data:")
    
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    combined_polygon = parsed_data['combined_polygon']
    print(f"  üìê Combined polygon bounds: {combined_polygon.bounds}")
    
    # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    print(f"\\nüîç –°–†–ê–í–ù–ï–ù–ò–ï:")
    
    if all_real_xs and all_real_ys:
        real_bounds = (min(all_real_xs), min(all_real_ys), max(all_real_xs), max(all_real_ys))
        combined_bounds = combined_polygon.bounds
        
        print(f"  –†–µ–∞–ª—å–Ω—ã–µ SPLINE bounds:  {real_bounds}")
        print(f"  Combined polygon bounds: {combined_bounds}")
        
        diff_x = real_bounds[0] - combined_bounds[0]
        diff_y = real_bounds[1] - combined_bounds[1]
        
        print(f"  üìè –†–∞–∑–Ω–æ—Å—Ç–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ - combined):")
        print(f"    X_min: {diff_x:.2f}–º–º")
        print(f"    Y_min: {diff_y:.2f}–º–º")
        
        # –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ!
        if abs(diff_x - 992.33) < 10 and abs(diff_y - 273.76) < 10:
            print(f"  ‚úÖ –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏!")
            print(f"  üîç –ü–†–ò–ß–ò–ù–ê: Combined polygon —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö SPLINE,")
            print(f"      –Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –†–ï–ê–õ–¨–ù–´–ú SPLINE –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø–æ–ª–∏–≥–æ–Ω—ã —Å–æ–∑–¥–∞–ª–∏—Å—å –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
        print(f"\\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:")
        print(f"  –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(parsed_data['polygons'])}")
        
        if parsed_data['polygons']:
            # Bounds –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            all_poly_bounds = []
            for i, poly in enumerate(parsed_data['polygons'][:5]):  # –ü–µ—Ä–≤—ã–µ 5
                bounds = poly.bounds
                all_poly_bounds.append(bounds)
                print(f"    –ü–æ–ª–∏–≥–æ–Ω {i+1}: {bounds}")
            
            if all_poly_bounds:
                # –û–±—â–∏–µ bounds –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
                min_x = min(b[0] for b in all_poly_bounds)
                min_y = min(b[1] for b in all_poly_bounds)
                max_x = max(b[2] for b in all_poly_bounds)
                max_y = max(b[3] for b in all_poly_bounds)
                total_bounds = (min_x, min_y, max_x, max_y)
                print(f"  üìê –û–±—â–∏–µ bounds –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {total_bounds}")
                
                if abs(total_bounds[0] - combined_bounds[0]) < 1 and abs(total_bounds[1] - combined_bounds[1]) < 1:
                    print(f"  ‚úÖ Combined polygon –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–ª–∏–≥–æ–Ω—ã")
                else:
                    print(f"  ‚ùå Combined polygon –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞–º!")

def suggest_fix():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    print(f"\\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –†–ï–®–ï–ù–ò–Ø:")
    print(f"  üéØ –ü–†–û–ë–õ–ï–ú–ê: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ combined_polygon bounds,")
    print(f"      –Ω–æ —Ä–µ–∞–ª—å–Ω—ã–µ SPLINE –∏–º–µ—é—Ç –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
    print(f"")
    print(f"  üîß –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ bounds SPLINE'–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
    print(f"      –≤–º–µ—Å—Ç–æ bounds combined_polygon.")
    print(f"")
    print(f"  üìã –ü–ª–∞–Ω:")
    print(f"    1. –í parse_dxf_complete —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ bounds SPLINE'–æ–≤")
    print(f"    2. –í save_dxf_layout_complete –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ bounds –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
    print(f"    3. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

if __name__ == "__main__":
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    debug_spline_coordinates()
    suggest_fix()
    
    print("\\n" + "=" * 60)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")