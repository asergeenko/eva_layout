#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Å–µ—Ö SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""

import tempfile
import os
import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete, apply_placement_transform
from shapely.geometry import Polygon

def verify_all_splines_transformation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Å–µ—Ö SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    print("=== –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –í–°–ï–• SPLINE –≠–õ–ï–ú–ï–ù–¢–û–í ===")
    
    # –ò—Å—Ö–æ–¥–Ω—ã–π DXF —Ñ–∞–π–ª
    source_dxf = "/home/sasha/proj/2025/eva_layout/dxf_samples/–õ–æ–¥–∫–∞ –ê–∑–∏–º—É—Ç –≠–≤–µ—Ä–µ—Å—Ç 385/2.dxf"
    
    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DXF
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    original_polygon = parsed_data['combined_polygon']
    print(f"üìä Combined polygon bounds: {original_polygon.bounds}")
    
    spline_bounds = parsed_data['real_spline_bounds']
    print(f"üìä Real SPLINE bounds: {spline_bounds}")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    x_offset = -200
    y_offset = 150
    rotation_angle = 0
    file_name = "test_verify.dxf"
    color = "—á–µ—Ä–Ω—ã–π"
    
    print(f"\\nüîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: x_offset={x_offset}, y_offset={y_offset}, rotation={rotation_angle}¬∞")
    
    # –°–æ–∑–¥–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expected_polygon = apply_placement_transform(original_polygon, x_offset, y_offset, rotation_angle)
    expected_bounds = expected_polygon.bounds
    print(f"üìä –û–∂–∏–¥–∞–µ–º—ã–µ bounds: {expected_bounds}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ bounds –≤—Å–µ—Ö SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é
    spline_entities = [e for e in parsed_data['original_entities'] if e['type'] == 'SPLINE']
    print(f"üìä SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(spline_entities)}")
    
    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ä—É—á–Ω—É—é
    expected_xs = []
    expected_ys = []
    
    for spline_data in spline_entities:
        entity = spline_data['entity']
        control_points = entity.control_points
        
        if not control_points:
            continue
            
        for cp in control_points:
            if hasattr(cp, 'x') and hasattr(cp, 'y'):
                x, y = cp.x, cp.y
            elif len(cp) >= 2:
                x, y = float(cp[0]), float(cp[1])
            else:
                continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ –∏ –≤ –∫–æ–¥–µ
            x_norm = x - spline_bounds[0]
            y_norm = y - spline_bounds[1]
            x_final = x_norm + x_offset
            y_final = y_norm + y_offset
            
            expected_xs.append(x_final)
            expected_ys.append(y_final)
    
    if expected_xs and expected_ys:
        manual_expected_bounds = (min(expected_xs), min(expected_ys), max(expected_xs), max(expected_ys))
        print(f"üìä –û–∂–∏–¥–∞–µ–º—ã–µ bounds (–≤—Ä—É—á–Ω—É—é): {manual_expected_bounds}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å apply_placement_transform
        diff = [manual_expected_bounds[i] - expected_bounds[i] for i in range(4)]
        max_diff = max(abs(d) for d in diff)
        print(f"üìä –†–∞–∑–Ω–æ—Å—Ç—å —Å apply_placement_transform: {diff} (–º–∞–∫—Å: {max_diff:.2f})")
        
        if max_diff > 10:
            print(f"  ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏!")
        else:
            print(f"  ‚úÖ –ú–µ—Ç–æ–¥—ã –¥–∞—é—Ç –ø–æ—Ö–æ–∂–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç save_dxf_layout_complete
    placed_element = (expected_polygon, x_offset, y_offset, rotation_angle, file_name, color)
    placed_elements = [placed_element]
    
    original_dxf_data_map = {
        file_name: parsed_data
    }
    
    sheet_size = (200, 140)
    
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        save_dxf_layout_complete(placed_elements, sheet_size, output_path, original_dxf_data_map)
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_doc = ezdxf.readfile(output_path)
        result_msp = result_doc.modelspace()
        
        splines = [e for e in result_msp if e.dxftype() == 'SPLINE']
        print(f"\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç save_dxf_layout_complete:")
        print(f"  SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(splines)}")
        
        if splines:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º bounds
            actual_xs = []
            actual_ys = []
            
            for spline in splines:
                try:
                    control_points = spline.control_points
                    if control_points:
                        for cp in control_points:
                            if hasattr(cp, 'x') and hasattr(cp, 'y'):
                                actual_xs.append(cp.x)
                                actual_ys.append(cp.y)
                            elif len(cp) >= 2:
                                actual_xs.append(float(cp[0]))
                                actual_ys.append(float(cp[1]))
                except:
                    continue
            
            if actual_xs and actual_ys:
                actual_bounds = (min(actual_xs), min(actual_ys), max(actual_xs), max(actual_ys))
                print(f"  –†–µ–∞–ª—å–Ω—ã–µ bounds: {actual_bounds}")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ (—Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç)
                diff_manual = [actual_bounds[i] - manual_expected_bounds[i] for i in range(4)]
                max_diff_manual = max(abs(d) for d in diff_manual)
                print(f"  –†–∞–∑–Ω–æ—Å—Ç—å —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ (—Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç): {diff_manual}")
                print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {max_diff_manual:.2f}–º–º")
                
                if max_diff_manual < 10:
                    print(f"  ‚úÖ SPLINE'—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ö–û–†–†–ï–ö–¢–ù–û!")
                    return True
                else:
                    print(f"  ‚ùå SPLINE'—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ù–ï–ö–û–†–†–ï–ö–¢–ù–û!")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –±—ã—Ç—å –≤ sheet boundary
                    if actual_bounds[0] == 0.0 or actual_bounds[1] == 0.0:
                        print(f"  üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–µ–∑–∞–Ω—ã sheet boundary")
                    
                    return False
        else:
            print(f"  ‚ùå –ù–µ—Ç SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")
            return False
    
    finally:
        if os.path.exists(output_path):
            os.unlink(output_path)

if __name__ == "__main__":
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Å–µ—Ö SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    success = verify_all_splines_transformation()
    
    print("\\n" + "=" * 60)
    if success:
        print("‚úÖ –í–°–ï SPLINE –≠–õ–ï–ú–ï–ù–¢–´ –¢–†–ê–ù–°–§–û–†–ú–ò–†–û–í–ê–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ï–ô SPLINE –≠–õ–ï–ú–ï–ù–¢–û–í")