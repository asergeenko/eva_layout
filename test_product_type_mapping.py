#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ DXF
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_product_type_mapping():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π —Å DXF —Ñ–∞–π–ª–∞–º–∏")
    print("=" * 70)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ streamlit_demo.py
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ streamlit_demo.py –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        exec_globals = {}
        with open('streamlit_demo.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        import re
        
        # –ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é get_dxf_files_for_product_type
        func_pattern = r'def (get_dxf_files_for_product_type|find_product_folder|calculate_folder_match_score)\(.*?\):(.*?)(?=def|\Z)'
        functions = re.findall(func_pattern, content, re.DOTALL | re.MULTILINE)
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
        exec_code = '''
import os
import re
import logging

logger = logging.getLogger(__name__)

'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        for func_name, func_body in functions:
            exec_code += f"def {func_name}(*args, **kwargs):\n"
            # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            func_lines = func_body.strip().split('\n')
            for line in func_lines:
                if line.strip():
                    exec_code += "    " + line + "\n"
                else:
                    exec_code += "\n"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
        exec(exec_code, exec_globals)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        get_dxf_files_for_product_type = exec_globals['get_dxf_files_for_product_type']
        find_product_folder = exec_globals['find_product_folder']
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            'article': 'EVA_BORT+TOYOTA+COROLLA 11',
            'product': 'TOYOTA COROLLA 11',
            'product_type': '–±–æ—Ä—Ç',
            'expected_files': ['1.dxf', '2.dxf', '3.dxf', '4.dxf'],  # —Ñ–∞–π–ª—ã 1-9.dxf
            'description': '–ë–æ—Ä—Ç Toyota Corolla 11 - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–∞–π–ª—ã 1-9.dxf'
        },
        {
            'article': 'EVA_DRIVER+TOYOTA+COROLLA 11',
            'product': 'TOYOTA COROLLA 11',
            'product_type': '–≤–æ–¥–∏—Ç–µ–ª—å',
            'expected_files': ['1.dxf'],  # —Ç–æ–ª—å–∫–æ 1.dxf
            'description': '–í–æ–¥–∏—Ç–µ–ª—å Toyota Corolla 11 - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 1.dxf'
        },
        {
            'article': 'EVA_FRONT+TOYOTA+COROLLA 11',
            'product': 'TOYOTA COROLLA 11',
            'product_type': '–ø–µ—Ä–µ–¥–Ω–∏–µ',
            'expected_files': ['1.dxf', '2.dxf'],  # 1.dxf –∏ 2.dxf
            'description': '–ü–µ—Ä–µ–¥–Ω–∏–µ Toyota Corolla 11 - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 1.dxf –∏ 2.dxf'
        },
        {
            'article': 'EVA_TRUNK+TOYOTA+COROLLA 11',
            'product': 'TOYOTA COROLLA 11',
            'product_type': '–±–∞–≥–∞–∂–Ω–∏–∫',
            'expected_files': ['10.dxf', '11.dxf'],  # —Ñ–∞–π–ª—ã 10-16.dxf (–µ—Å–ª–∏ –µ—Å—Ç—å)
            'description': '–ë–∞–≥–∞–∂–Ω–∏–∫ Toyota Corolla 11 - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–∞–π–ª—ã 10-16.dxf'
        },
        {
            'article': 'BOAT_MAT+–õ–û–î–ö–ê+ADMIRAL 335',
            'product': '–õ–æ–¥–∫–∞ ADMIRAL 335',
            'product_type': '–ª–æ–¥–∫–∞',
            'expected_files': ['1.dxf', '2.dxf'],  # –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            'description': '–õ–æ–¥–∫–∞ Admiral 335 - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ'
        },
        {
            'article': 'SCOOTER_DECK+–î–ï–ö–ê+KUGOO M4 PRO',
            'product': '–î–ï–ö–ê KUGOO M4 PRO',
            'product_type': '—Å–∞–º–æ–∫–∞—Ç',
            'expected_files': ['1.dxf'],  # –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            'description': '–°–∞–º–æ–∫–∞—Ç –î–ï–ö–ê KUGOO M4 PRO - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ'
        }
    ]
    
    passed_tests = 0
    total_tests = len(test_cases)
    
    print(f"üìã –ó–∞–ø—É—Å–∫ {total_tests} —Ç–µ—Å—Ç–æ–≤...\n")
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"üß™ –¢–µ—Å—Ç {i}: {test_case['description']}")
        print(f"   –ê—Ä—Ç–∏–∫—É–ª: {test_case['article']}")
        print(f"   –¢–æ–≤–∞—Ä: {test_case['product']}")
        print(f"   –¢–∏–ø: {test_case['product_type']}")
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            found_files = get_dxf_files_for_product_type(
                test_case['article'], 
                test_case['product'], 
                test_case['product_type']
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            found_filenames = [os.path.basename(f) for f in found_files]
            found_filenames.sort()
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(found_files)}")
            print(f"   –§–∞–π–ª—ã: {found_filenames}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if found_files:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö
                expected_found = any(expected in found_filenames for expected in test_case['expected_files'])
                if expected_found:
                    print("   ‚úÖ –ü–†–û–ô–î–ï–ù")
                    passed_tests += 1
                else:
                    print("   ‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–ô–î–ï–ù (–Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–µ–º—ã–µ)")
                    passed_tests += 0.5
            else:
                print("   ‚ùå –ù–ï –ü–†–û–ô–î–ï–ù (—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
        
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        print()
    
    print("=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print("   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    elif passed_tests > total_tests * 0.7:
        print("   üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

def test_folder_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–∞–ø–∫–∏ –µ—Å—Ç—å –≤ dxf_samples
    if not os.path.exists('dxf_samples'):
        print("‚ùå –ü–∞–ø–∫–∞ dxf_samples –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏ –ø–æ —Ç–∏–ø–∞–º
    folder_types = {
        'automotive': 0,
        'boats': 0,
        'scooters': 0,
        'mats': 0,
        'other': 0
    }
    
    for item in os.listdir('dxf_samples'):
        item_path = os.path.join('dxf_samples', item)
        if os.path.isdir(item_path):
            item_upper = item.upper()
            if any(brand in item_upper for brand in ['TOYOTA', 'BMW', 'AUDI', 'VOLKSWAGEN', 'SUBARU', 'SSANG YONG']):
                folder_types['automotive'] += 1
            elif '–õ–û–î–ö–ê' in item_upper or 'ADMIRAL' in item_upper or 'ABAKAN' in item_upper:
                folder_types['boats'] += 1
            elif '–î–ï–ö–ê' in item_upper or 'KUGOO' in item_upper:
                folder_types['scooters'] += 1
            elif '–ö–û–í–†–ò–ö' in item_upper:
                folder_types['mats'] += 1
            else:
                folder_types['other'] += 1
    
    print("üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø–∞–ø–æ–∫:")
    for folder_type, count in folder_types.items():
        type_names = {
            'automotive': 'üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ',
            'boats': 'üõ•Ô∏è  –õ–æ–¥–∫–∏',
            'scooters': 'üõ¥ –°–∞–º–æ–∫–∞—Ç—ã',
            'mats': 'ü™ë –ö–æ–≤—Ä–∏–∫–∏',
            'other': '‚ùì –ü—Ä–æ—á–∏–µ'
        }
        print(f"   {type_names[folder_type]}: {count}")
    
    total_folders = sum(folder_types.values())
    print(f"\nüìä –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {total_folders}")
    
    return total_folders > 0

def main():
    print("üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π")
    print("=" * 80)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
    folder_test = test_folder_search()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
    mapping_test = test_product_type_mapping()
    
    print("\n" + "=" * 80)
    print("üèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if folder_test and mapping_test:
        print("   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        if not folder_test:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–∞–ø–æ–∫ DXF")
        if not mapping_test:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–∫–æ–π —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)