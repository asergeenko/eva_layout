#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º parse_dxf_complete —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–º–µ–Ω—å—à–µ–Ω–∏–µ
"""

import sys
sys.path.insert(0, '.')

import ezdxf
from layout_optimizer import parse_dxf_complete, convert_entity_to_polygon_improved
import os

def test_parse_complete():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–æ –∏ –ø–æ—Å–ª–µ parse_dxf_complete"""
    print("üîç –¢–ï–°–¢ parse_dxf_complete")
    print("=" * 60)
    
    tank_file = "dxf_samples/TANK 300/1.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # –®–ê–ì 1: –ü—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        print(f"\nüìã –®–ê–ì 1: –ü–†–Ø–ú–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –û–ë–™–ï–ö–¢–û–í")
        
        doc = ezdxf.readfile(tank_file)
        modelspace = doc.modelspace()
        
        individual_polygons = []
        for i, entity in enumerate(modelspace):
            polygon = convert_entity_to_polygon_improved(entity)
            if polygon and not polygon.is_empty:
                bounds = polygon.bounds
                width = bounds[2] - bounds[0]
                height = bounds[3] - bounds[1]
                individual_polygons.append(polygon)
                
                if i < 3:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"  –û–±—ä–µ–∫—Ç {i+1}: {width:.3f}√ó{height:.3f}")
                
        print(f"–í—Å–µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(individual_polygons)}")
        
        if individual_polygons:
            # –û–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            all_bounds = []
            for poly in individual_polygons:
                all_bounds.extend([poly.bounds[0], poly.bounds[2]])  # x coords
            
            all_y_bounds = []
            for poly in individual_polygons:
                all_y_bounds.extend([poly.bounds[1], poly.bounds[3]])  # y coords
                
            individual_total_width = max(all_bounds) - min(all_bounds)
            individual_total_height = max(all_y_bounds) - min(all_y_bounds)
            print(f"  –û–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö: {individual_total_width:.3f}√ó{individual_total_height:.3f}")
        
        # –®–ê–ì 2: parse_dxf_complete
        print(f"\nüì¶ –®–ê–ì 2: parse_dxf_complete")
        
        result = parse_dxf_complete(tank_file, verbose=False)  # –æ—Ç–∫–ª—é—á–∞–µ–º verbose –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
        
        if 'polygons' in result and result['polygons']:
            print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ parse_dxf_complete: {len(result['polygons'])}")
            
            for i, poly in enumerate(result['polygons'][:3]):  # –ø–µ—Ä–≤—ã–µ 3
                bounds = poly.bounds
                width = bounds[2] - bounds[0]
                height = bounds[3] - bounds[1]
                print(f"    –ü–æ–ª–∏–≥–æ–Ω {i+1}: {width:.3f}√ó{height:.3f}")
        
        # –®–ê–ì 3: combined_polygon –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'combined_polygon' in result and result['combined_polygon']:
            combined = result['combined_polygon']
            bounds = combined.bounds
            combined_width = bounds[2] - bounds[0]
            combined_height = bounds[3] - bounds[1]
            print(f"\nüîó –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –ü–û–õ–ò–ì–û–ù: {combined_width:.3f}√ó{combined_height:.3f}")
            print(f"   Bounds: ({bounds[0]:.3f}, {bounds[1]:.3f}, {bounds[2]:.3f}, {bounds[3]:.3f})")
            
            # –°–†–ê–í–ù–ò–í–ê–ï–ú –° –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ú–ò
            if individual_polygons:
                scale_factor_w = combined_width / individual_total_width if individual_total_width > 0 else 1
                scale_factor_h = combined_height / individual_total_height if individual_total_height > 0 else 1
                
                print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï:")
                print(f"  –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã: {individual_total_width:.3f}√ó{individual_total_height:.3f}")
                print(f"  –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {combined_width:.3f}√ó{combined_height:.3f}")
                print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: —à–∏—Ä–∏–Ω–∞={scale_factor_w:.6f}, –≤—ã—Å–æ—Ç–∞={scale_factor_h:.6f}")
                
                if scale_factor_w < 0.1 or scale_factor_h < 0.1:
                    print(f"  ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï! –û–±—ä–µ–∫—Ç—ã —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –≤ {1/min(scale_factor_w, scale_factor_h):.1f} —Ä–∞–∑")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_parse_complete()