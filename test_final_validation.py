#!/usr/bin/env python3
"""
Final comprehensive validation of the updated EVA Layout system
"""

import pandas as pd
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_complete_workflow():
    """Test the complete workflow from Excel to DXF files"""
    print("üß™ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã EVA Layout")
    print("=" * 70)
    
    # 1. Load Excel and verify structure
    print("\n1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Excel —Ñ–∞–π–ª–∞")
    try:
        df = pd.read_excel('sample_input.xlsx')
        print(f"   ‚úÖ Excel –∑–∞–≥—Ä—É–∂–µ–Ω: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
        
        # Check product types in column H
        if len(df.columns) > 7:
            product_types = df.iloc[2:, 7].value_counts()  # Skip headers
            print(f"   üìä –¢–∏–ø—ã –∏–∑–¥–µ–ª–∏–π:")
            for product_type, count in product_types.items():
                if pd.notna(product_type) and product_type != '–ò–∑–¥–µ–ª–∏–µ':
                    print(f"      ‚Ä¢ {product_type}: {count} –∑–∞–∫–∞–∑–æ–≤")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        return False
    
    # 2. Test DXF folder structure
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DXF –ø–∞–ø–æ–∫")
    if not os.path.exists('dxf_samples'):
        print("   ‚ùå –ü–∞–ø–∫–∞ dxf_samples –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    folder_count = len([f for f in os.listdir('dxf_samples') if os.path.isdir(os.path.join('dxf_samples', f))])
    file_count = 0
    for root, dirs, files in os.walk('dxf_samples'):
        file_count += len([f for f in files if f.lower().endswith('.dxf')])
    
    print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DXF: {folder_count} –ø–∞–ø–æ–∫, {file_count} —Ñ–∞–π–ª–æ–≤")
    
    # 3. Test specific product type mappings
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π")
    
    test_cases = [
        {'type': '–±–æ—Ä—Ç', 'expected_files': ['1.dxf', '2.dxf', '3.dxf', '4.dxf', '5.dxf'], 'folder': 'SSANG YONG KYRON'},
        {'type': '–≤–æ–¥–∏—Ç–µ–ª—å', 'expected_files': ['1.dxf'], 'folder': 'TANK 300'},
        {'type': '–ø–µ—Ä–µ–¥–Ω–∏–µ', 'expected_files': ['1.dxf', '2.dxf'], 'folder': 'TOYOTA COROLLA 10'},
        {'type': '–ª–æ–¥–∫–∞', 'expected_files': ['1.dxf', '2.dxf'], 'folder': '–õ–æ–¥–∫–∞ ABAKAN 430 JET'},
        {'type': '—Å–∞–º–æ–∫–∞—Ç', 'expected_files': ['1.dxf'], 'folder': '–î–ï–ö–ê KUGOO KIRIN M4 PRO'},
        {'type': '–∫–æ–≤–µ—Ä', 'expected_files': ['1.dxf'], 'folder': '–ö–æ–≤—Ä–∏–∫ –¥–ª—è –æ–±—É–≤–∏ –ø—Ä–∏–¥–≤–µ—Ä–Ω—ã–π'}
    ]
    
    success_count = 0
    for case in test_cases:
        folder_path = os.path.join('dxf_samples', case['folder'])
        
        if os.path.exists(folder_path):
            # Check for DXF files
            try:
                files = [f for f in os.listdir(folder_path) if f.lower().endswith('.dxf')]
                files.sort()
                
                # Apply product type rules
                if case['type'] == '–±–æ—Ä—Ç':
                    # Should have files 1-9
                    filtered_files = [f"{i}.dxf" for i in range(1, 10) if f"{i}.dxf" in files]
                elif case['type'] == '–≤–æ–¥–∏—Ç–µ–ª—å':
                    # Should have only file 1
                    filtered_files = ['1.dxf'] if '1.dxf' in files else []
                elif case['type'] == '–ø–µ—Ä–µ–¥–Ω–∏–µ':
                    # Should have files 1 and 2
                    filtered_files = [f"{i}.dxf" for i in [1, 2] if f"{i}.dxf" in files]
                elif case['type'] == '–±–∞–≥–∞–∂–Ω–∏–∫':
                    # Should have files 10-16
                    filtered_files = [f"{i}.dxf" for i in range(10, 17) if f"{i}.dxf" in files]
                else:
                    # All files for –ª–æ–¥–∫–∞, —Å–∞–º–æ–∫–∞—Ç, –∫–æ–≤–µ—Ä
                    filtered_files = files
                
                if filtered_files:
                    print(f"   ‚úÖ {case['type']}: –Ω–∞–π–¥–µ–Ω–æ {len(filtered_files)} —Ñ–∞–π–ª–æ–≤ –≤ {case['folder']}")
                    success_count += 1
                else:
                    print(f"   ‚ùå {case['type']}: —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {case['folder']}")
            except OSError:
                print(f"   ‚ùå {case['type']}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ {case['folder']}")
        else:
            print(f"   ‚ùå {case['type']}: –ø–∞–ø–∫–∞ {case['folder']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print(f"\n   üìä –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(test_cases)} —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π")
    
    # 4. Test layout optimizer import
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞")
    try:
        from layout_optimizer import parse_dxf_complete, bin_packing_with_inventory
        print("   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        optimizer_ok = True
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        optimizer_ok = False
    
    # 5. Final summary
    print("\n" + "=" * 70)
    print("üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    all_tests_passed = (
        df is not None and 
        folder_count > 0 and 
        file_count > 0 and 
        success_count == len(test_cases) and 
        optimizer_ok
    )
    
    if all_tests_passed:
        print("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   ‚ú® –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("\nüìã –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Excel")
        print("   ‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π")
        print("   ‚Ä¢ ‚úÖ –ü–æ–∏—Å–∫ DXF —Ñ–∞–π–ª–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º")
        print("   ‚Ä¢ ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏")
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print("   streamlit run streamlit_demo.py")
        
        print("\nüí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
        print('   üîπ "–±–æ—Ä—Ç" ‚Üí —Ñ–∞–π–ª—ã 1.dxf - 9.dxf')
        print('   üîπ "–≤–æ–¥–∏—Ç–µ–ª—å" ‚Üí —Ñ–∞–π–ª 1.dxf')
        print('   üîπ "–ø–µ—Ä–µ–¥–Ω–∏–µ" ‚Üí —Ñ–∞–π–ª—ã 1.dxf, 2.dxf')
        print('   üîπ "–±–∞–≥–∞–∂–Ω–∏–∫" ‚Üí —Ñ–∞–π–ª—ã 10.dxf - 16.dxf')
        print('   üîπ "–ª–æ–¥–∫–∞", "—Å–∞–º–æ–∫–∞—Ç", "–∫–æ–≤–µ—Ä" ‚Üí –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ')
        
        return True
    else:
        print("   ‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        if df is None:
            print("   ‚Ä¢ Excel —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        if folder_count == 0 or file_count == 0:
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π DXF")
        if success_count < len(test_cases):
            print(f"   ‚Ä¢ –ù–µ –≤—Å–µ —Ç–∏–ø—ã –∏–∑–¥–µ–ª–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç ({success_count}/{len(test_cases)})")
        if not optimizer_ok:
            print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return False

if __name__ == "__main__":
    success = test_complete_workflow()
    exit(0 if success else 1)