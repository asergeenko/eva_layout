#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–± TANK —Ñ–∞–π–ª–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ
"""

import sys
sys.path.insert(0, '.')

import os
import glob
from layout_optimizer import parse_dxf_complete
import ezdxf

def check_tank_scale():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã TANK —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ú–ê–°–®–¢–ê–ë–ê TANK –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    tank_folder = "dxf_samples/TANK 300"
    if not os.path.exists(tank_folder):
        print(f"‚ùå –ü–∞–ø–∫–∞ {tank_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    dxf_files = glob.glob(os.path.join(tank_folder, "*.dxf"))
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(dxf_files)}")
    
    for file_path in dxf_files:
        file_name = os.path.basename(file_path)
        print(f"\nüìè –§–ê–ô–õ: {file_name}")
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ layout_optimizer
            result = parse_dxf_complete(file_path)
            polygons = result['polygons']
            
            print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ parse_dxf_complete: {len(polygons)}")
            
            if polygons:
                for i, poly in enumerate(polygons[:3]):  # –ø–µ—Ä–≤—ã–µ 3
                    bounds = poly.bounds
                    width = bounds[2] - bounds[0]
                    height = bounds[3] - bounds[1]
                    print(f"    –ü–æ–ª–∏–≥–æ–Ω {i+1}: {width:.2f}√ó{height:.2f} –µ–¥–∏–Ω–∏—Ü, –ø–ª–æ—â–∞–¥—å={poly.area:.1f}")
            
            # –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ DXF
            print(f"  \nüìã –ü–†–Ø–ú–û–ô –ê–ù–ê–õ–ò–ó DXF:")
            doc = ezdxf.readfile(file_path)
            modelspace = doc.modelspace()
            entities = list(modelspace)
            
            print(f"    –í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {len(entities)}")
            
            # –ù–∞—Ö–æ–¥–∏–º —ç–∫—Å—Ç–µ–Ω—Ç—ã –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            all_x, all_y = [], []
            
            for entity in entities:
                try:
                    bbox = entity.bbox()
                    if bbox:
                        all_x.extend([bbox.extmin.x, bbox.extmax.x])
                        all_y.extend([bbox.extmin.y, bbox.extmax.y])
                except:
                    pass
            
            if all_x and all_y:
                total_width = max(all_x) - min(all_x)
                total_height = max(all_y) - min(all_y)
                print(f"    –û–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã —Ñ–∞–π–ª–∞: {total_width:.2f}√ó{total_height:.2f} –µ–¥–∏–Ω–∏—Ü")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
                print(f"    \nü§î –ê–ù–ê–õ–ò–ó –ï–î–ò–ù–ò–¶:")
                if total_width < 100 and total_height < 100:
                    print(f"      –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã = –º–º: {total_width:.1f}√ó{total_height:.1f}–º–º = {total_width/10:.1f}√ó{total_height/10:.1f}—Å–º")
                    print(f"      –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã = —Å–º: {total_width:.1f}√ó{total_height:.1f}—Å–º")
                    
                    # TANK 300 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 30√ó30–º–º –∏–ª–∏ 3√ó3—Å–º
                    if total_width < 50:  # –º–µ–Ω—å—à–µ 5—Å–º
                        print(f"      ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ú–ê–õ–û! TANK 300 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ")
                        
                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                        scale_factor = 30 / total_width if total_width > 0 else 1
                        print(f"      üí° –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï: √ó{scale_factor:.1f}")
                        print(f"         –ü–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {total_width*scale_factor:.1f}√ó{total_height*scale_factor:.1f}–º–º")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º header DXF –Ω–∞ –µ–¥–∏–Ω–∏—Ü—ã
            if hasattr(doc.header, '$INSUNITS'):
                units = doc.header.get('$INSUNITS', 0)
                units_map = {0: 'Unitless', 1: 'Inches', 2: 'Feet', 4: 'Millimeters', 5: 'Centimeters', 6: 'Meters'}
                print(f"    üìê –ï–¥–∏–Ω–∏—Ü—ã –≤ DXF header: {units_map.get(units, f'Unknown ({units})')}")
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\nüéØ –í–´–í–û–î–´:")
    print(f"1. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ~15√ó25–º–º, —Ç–æ –æ–±—ä–µ–∫—Ç—ã –°–õ–ò–®–ö–û–ú –ú–ê–õ–ï–ù–¨–ö–ò–ï")
    print(f"2. TANK 300 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 30√ó30–º–º (3√ó3—Å–º) –∏–ª–∏ –±–æ–ª—å—à–µ")
    print(f"3. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–¢–¨ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ")

if __name__ == "__main__":
    check_tank_scale()