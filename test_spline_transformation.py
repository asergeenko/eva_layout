#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ save_dxf_layout_complete.
"""

import tempfile
import os
import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete
from shapely.geometry import Polygon

def test_spline_transformation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    print("=== –¢–ï–°–¢ –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò SPLINE –≠–õ–ï–ú–ï–ù–¢–û–í ===")
    
    # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DXF —Ñ–∞–π–ª —Å SPLINE'–∞–º–∏
    source_dxf = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    print(f"üìÅ –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {source_dxf}")
    
    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DXF
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤: {len(parsed_data['polygons'])}")
    print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö entities: {len(parsed_data['original_entities'])}")
    print(f"  –°–ª–æ–µ–≤: {len(parsed_data['layers'])}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã entities
    entity_types = {}
    for entity_data in parsed_data['original_entities']:
        entity_type = entity_data['type']
        entity_types[entity_type] = entity_types.get(entity_type, 0) + 1
    
    print(f"  –¢–∏–ø—ã entities: {entity_types}")
    
    if not parsed_data['original_entities']:
        print("‚ùå –ù–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö entities –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏!")
        return False
    
    # –°–æ–∑–¥–∞–µ–º fake placed element –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º combined_polygon –∏–∑ parse_dxf_complete –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º fake
    if parsed_data['combined_polygon']:
        original_polygon = parsed_data['combined_polygon']
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º combined_polygon: {original_polygon.bounds}")
    else:
        # –°–æ–∑–¥–∞–µ–º fake –ø–æ–ª–∏–≥–æ–Ω
        original_polygon = Polygon([(1000, 0), (1500, 0), (1500, 500), (1000, 500)])
        print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω fake –ø–æ–ª–∏–≥–æ–Ω: {original_polygon.bounds}")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —Å–¥–≤–∏–≥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤–ª–µ–≤–æ –∏ –≤–Ω–∏–∑
    x_offset = -1000  # –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ –Ω–∞ 1000 –º–º
    y_offset = 100    # –°–¥–≤–∏–≥ –≤–≤–µ—Ä—Ö –Ω–∞ 100 –º–º  
    rotation_angle = 0  # –ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    file_name = "test_spline.dxf"
    color = "—á–µ—Ä–Ω—ã–π"
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω (–∫–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
    from layout_optimizer import apply_placement_transform
    expected_polygon = apply_placement_transform(original_polygon, x_offset, y_offset, rotation_angle)
    
    print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π bounds: {original_polygon.bounds}")
    print(f"  –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: x_offset={x_offset}, y_offset={y_offset}, rotation={rotation_angle}¬∞")
    print(f"  –û–∂–∏–¥–∞–µ–º—ã–π bounds: {expected_polygon.bounds}")
    
    # –°–æ–∑–¥–∞–µ–º placed_element –¥–ª—è save_dxf_layout_complete
    placed_element = (expected_polygon, x_offset, y_offset, rotation_angle, file_name, color)
    placed_elements = [placed_element]
    
    # –°–æ–∑–¥–∞–µ–º original_dxf_data_map
    original_dxf_data_map = {
        file_name: parsed_data
    }
    
    sheet_size = (200, 140)  # —Å–º
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        print(f"\\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º save_dxf_layout_complete...")
        save_dxf_layout_complete(placed_elements, sheet_size, output_path, original_dxf_data_map)
        
        print(f"‚úÖ DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        print(f"\\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        
        result_doc = ezdxf.readfile(output_path)
        result_msp = result_doc.modelspace()
        
        result_entities = list(result_msp)
        print(f"  –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(result_entities)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö entities
        result_types = {}
        for entity in result_entities:
            entity_type = entity.dxftype()
            result_types[entity_type] = result_types.get(entity_type, 0) + 1
        
        print(f"  –¢–∏–ø—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {result_types}")
        
        # –ò—â–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SPLINE'—ã
        splines = [e for e in result_entities if e.dxftype() == 'SPLINE']
        print(f"  SPLINE'–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(splines)}")
        
        if splines:
            print(f"\\nüîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SPLINE'–æ–≤:")
            
            all_xs = []
            all_ys = []
            
            for i, spline in enumerate(splines[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                layer = getattr(spline.dxf, 'layer', 'UNKNOWN')
                
                try:
                    control_points = spline.control_points
                    if control_points is not None and len(control_points) > 0:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        points = []
                        for cp in control_points:
                            if hasattr(cp, 'x') and hasattr(cp, 'y'):
                                points.append((cp.x, cp.y))
                            elif len(cp) >= 2:
                                points.append((float(cp[0]), float(cp[1])))
                        
                        if points:
                            xs = [p[0] for p in points]
                            ys = [p[1] for p in points]
                            bounds = (min(xs), min(ys), max(xs), max(ys))
                            
                            all_xs.extend(xs)
                            all_ys.extend(ys)
                            
                            print(f"    SPLINE {i+1} ({layer}): bounds={bounds}")
                
                except Exception as e:
                    print(f"    SPLINE {i+1}: –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - {e}")
            
            if all_xs and all_ys:
                overall_bounds = (min(all_xs), min(all_ys), max(all_xs), max(all_ys))
                print(f"  üìê –û–±—â–∏–µ bounds –≤—Å–µ—Ö SPLINE'–æ–≤: {overall_bounds}")
                print(f"  üìê –û–∂–∏–¥–∞–µ–º—ã–µ bounds: {expected_polygon.bounds}")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                expected_bounds = expected_polygon.bounds
                tolerance = 100  # 100–º–º –¥–æ–ø—É—Å–∫
                
                bounds_match = all(
                    abs(overall_bounds[i] - expected_bounds[i]) < tolerance
                    for i in range(4)
                )
                
                if bounds_match:
                    print(f"  ‚úÖ SPLINE'—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ö–û–†–†–ï–ö–¢–ù–û!")
                    return True
                else:
                    diff = [overall_bounds[i] - expected_bounds[i] for i in range(4)]
                    print(f"  ‚ùå SPLINE'—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!")
                    print(f"  üìä –†–∞–∑–Ω–æ—Å—Ç–∏: {diff}")
                    return False
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã SPLINE'–æ–≤")
                return False
        else:
            print(f"  ‚ùå –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–µ—Ç SPLINE'–æ–≤!")
            return False
        
    finally:
        if os.path.exists(output_path):
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            # os.unlink(output_path)  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    success = test_spline_transformation()
    
    print("\\n" + "=" * 60)
    if success:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")