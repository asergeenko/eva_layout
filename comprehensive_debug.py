#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º: –Ω–∞–ª–æ–∂–µ–Ω–∏—è, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
"""

import sys
sys.path.insert(0, '.')

import os
import tempfile
import ezdxf
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon as MplPolygon
from io import BytesIO
from layout_optimizer import (
    parse_dxf_complete, bin_packing, save_dxf_layout_complete, 
    plot_layout
)

def comprehensive_debug():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º"""
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–°–ï–• –ü–†–û–ë–õ–ï–ú")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∞–π–ª–∞–º–∏ TANK 300/1.dxf –∏ 4.dxf
    tank_files = [
        "dxf_samples/TANK 300/1.dxf",
        "dxf_samples/TANK 300/4.dxf"
    ]
    
    for tank_file in tank_files:
        if not os.path.exists(tank_file):
            print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            continue
            
        print(f"\n" + "="*50)
        print(f"üìã –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê: {os.path.basename(tank_file)}")
        print("="*50)
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ DXF
            print(f"\nüîç –®–ê–ì 1: –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–û–ì–û DXF")
            
            doc = ezdxf.readfile(tank_file)
            modelspace = doc.modelspace()
            entities = list(modelspace)
            
            print(f"  –ò—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(entities)}")
            
            # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
            units = doc.header.get('$INSUNITS', 0)
            units_map = {0: 'Unitless', 1: 'Inches', 2: 'Feet', 4: 'Millimeters', 5: 'Centimeters', 6: 'Meters'}
            print(f"  –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ DXF: {units_map.get(units, f'Unknown ({units})')}")
            
            # –û–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ DXF
            all_x, all_y = [], []
            for entity in entities:
                try:
                    bbox = entity.bbox()
                    if bbox:
                        all_x.extend([bbox.extmin.x, bbox.extmax.x])
                        all_y.extend([bbox.extmin.y, bbox.extmax.y])
                except:
                    pass
            
            if all_x and all_y:
                orig_width = max(all_x) - min(all_x)
                orig_height = max(all_y) - min(all_y)
                print(f"  –ò—Å—Ö–æ–¥–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã DXF: {orig_width:.1f}√ó{orig_height:.1f} –µ–¥–∏–Ω–∏—Ü")
                print(f"  –î–∏–∞–ø–∞–∑–æ–Ω X: {min(all_x):.1f} - {max(all_x):.1f}")
                print(f"  –î–∏–∞–ø–∞–∑–æ–Ω Y: {min(all_y):.1f} - {max(all_y):.1f}")
            else:
                orig_width = 0
                orig_height = 0
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ DXF")
            
            # 2. –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ parse_dxf_complete
            print(f"\nüì¶ –®–ê–ì 2: –ü–ê–†–°–ò–ù–ì –ß–ï–†–ï–ó parse_dxf_complete")
            
            result = parse_dxf_complete(tank_file, verbose=False)
            
            print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {len(result.get('polygons', []))}")
            print(f"  –ò—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(result.get('original_entities', []))}")
            print(f"  –ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–π: {result.get('bottom_layer_name')}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            if result.get('polygons'):
                total_area = sum(p.area for p in result['polygons'])
                print(f"  –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {total_area:.0f}")
                
                # –ì–∞–±–∞—Ä–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
                all_bounds = []
                for poly in result['polygons']:
                    all_bounds.append(poly.bounds)
                
                if all_bounds:
                    min_x = min(b[0] for b in all_bounds)
                    max_x = max(b[2] for b in all_bounds)
                    min_y = min(b[1] for b in all_bounds)
                    max_y = max(b[3] for b in all_bounds)
                    
                    parsed_width = max_x - min_x
                    parsed_height = max_y - min_y
                    
                    print(f"  –ì–∞–±–∞—Ä–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {parsed_width:.1f}√ó{parsed_height:.1f}")
                    print(f"  –î–∏–∞–ø–∞–∑–æ–Ω X: {min_x:.1f} - {max_x:.1f}")
                    print(f"  –î–∏–∞–ø–∞–∑–æ–Ω Y: {min_y:.1f} - {max_y:.1f}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
                    if orig_width > 0 and parsed_width > 0:
                        scale_factor = parsed_width / orig_width
                        print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {scale_factor:.4f}")
                        
                        if abs(scale_factor - 1.0) > 0.01:
                            print(f"  ‚ö†Ô∏è –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ü–†–ò –ü–ê–†–°–ò–ù–ì–ï: {scale_factor:.4f}")
                        else:
                            print(f"  ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # 3. –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            print(f"\nüéØ –®–ê–ì 3: –¢–ï–°–¢ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            
            if not result.get('polygons'):
                print("  ‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!")
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ–ª–∏–≥–æ–Ω (–≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            largest_poly = max(result['polygons'], key=lambda p: p.area)
            largest_idx = result['polygons'].index(largest_poly)
            
            print(f"  –í—ã–±—Ä–∞–Ω –ø–æ–ª–∏–≥–æ–Ω {largest_idx} (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π, –ø–ª–æ—â–∞–¥—å: {largest_poly.area:.0f})")
            bounds = largest_poly.bounds
            print(f"  –†–∞–∑–º–µ—Ä: {bounds[2]-bounds[0]:.1f}√ó{bounds[3]-bounds[1]:.1f}–º–º")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ - 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
            polygons_with_names = [
                (largest_poly, "test1.dxf", "—á–µ—Ä–Ω—ã–π", 1),
                (largest_poly, "test2.dxf", "—á–µ—Ä–Ω—ã–π", 2)
            ]
            
            sheet_size = (140, 200)  # 140√ó200 —Å–º
            placed, unplaced = bin_packing(polygons_with_names, sheet_size, verbose=True)
            
            print(f"  –†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(placed)}")
            print(f"  –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {len(unplaced)}")
            
            if len(placed) >= 2:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                pos1 = placed[0]  # (polygon, x_offset, y_offset, rotation, filename, color)
                pos2 = placed[1]
                
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–æ–≤ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                p1_bounds = pos1[0].bounds
                p2_bounds = pos2[0].bounds
                
                p1_center_x = (p1_bounds[0] + p1_bounds[2]) / 2
                p1_center_y = (p1_bounds[1] + p1_bounds[3]) / 2
                p2_center_x = (p2_bounds[0] + p2_bounds[2]) / 2
                p2_center_y = (p2_bounds[1] + p2_bounds[3]) / 2
                
                viz_distance = ((p2_center_x - p1_center_x)**2 + (p2_center_y - p1_center_y)**2)**0.5
                
                print(f"  –ü–æ–∑–∏—Ü–∏—è 1: —Ü–µ–Ω—Ç—Ä ({p1_center_x:.1f}, {p1_center_y:.1f})")
                print(f"  –ü–æ–∑–∏—Ü–∏—è 2: —Ü–µ–Ω—Ç—Ä ({p2_center_x:.1f}, {p2_center_y:.1f})")
                print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {viz_distance:.1f}–º–º")
                
            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ DXF –∏ –∞–Ω–∞–ª–∏–∑
            print(f"\nüíæ –®–ê–ì 4: –°–û–•–†–ê–ù–ï–ù–ò–ï –í DXF –ò –ê–ù–ê–õ–ò–ó")
            
            if placed:
                original_dxf_data_map = {}
                for p in placed:
                    original_dxf_data_map[p[4]] = result
                
                with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
                    output_path = tmp_file.name
                
                save_dxf_layout_complete(placed, sheet_size, output_path, original_dxf_data_map, verbose=False)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π DXF
                saved_doc = ezdxf.readfile(output_path)
                saved_msp = saved_doc.modelspace()
                saved_entities = list(saved_msp)
                
                print(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(saved_entities)}")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ª–æ—è–º (—Ñ–∞–π–ª–∞–º)
                layers_info = {}
                for entity in saved_entities:
                    if entity.dxftype() == 'SPLINE':
                        layer = getattr(entity.dxf, 'layer', '0')
                        base_layer = layer.split('_')[-1] if '_' in layer else layer  # –∏–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π
                        
                        if layer not in layers_info:
                            layers_info[layer] = {'entities': [], 'base_layer': base_layer}
                        layers_info[layer]['entities'].append(entity)
                
                print(f"  –°–ª–æ–µ–≤ —Å–æ SPLINE: {len(layers_info)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –≤ DXF
                file1_layers = [l for l in layers_info.keys() if l.startswith('test1')]
                file2_layers = [l for l in layers_info.keys() if l.startswith('test2')]
                
                if file1_layers and file2_layers:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–æ–π –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    layer1 = file1_layers[0]
                    layer2 = file2_layers[0]
                    
                    def get_layer_center(layer):
                        entities = layers_info[layer]['entities']
                        if entities:
                            entity = entities[0]
                            if hasattr(entity, 'control_points') and entity.control_points:
                                cp = entity.control_points[0]
                                if hasattr(cp, 'x'):
                                    return cp.x, cp.y
                                else:
                                    return cp[0], cp[1]
                        return None, None
                    
                    dxf_c1_x, dxf_c1_y = get_layer_center(layer1)
                    dxf_c2_x, dxf_c2_y = get_layer_center(layer2)
                    
                    if dxf_c1_x is not None and dxf_c2_x is not None:
                        dxf_distance = ((dxf_c2_x - dxf_c1_x)**2 + (dxf_c2_y - dxf_c1_y)**2)**0.5
                        
                        print(f"  DXF –ø–æ–∑–∏—Ü–∏—è 1: ({dxf_c1_x:.1f}, {dxf_c1_y:.1f})")
                        print(f"  DXF –ø–æ–∑–∏—Ü–∏—è 2: ({dxf_c2_x:.1f}, {dxf_c2_y:.1f})")
                        print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ DXF: {dxf_distance:.1f}–º–º")
                        
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                        if 'viz_distance' in locals() and viz_distance > 0 and dxf_distance > 0:
                            ratio = dxf_distance / viz_distance
                            print(f"  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (DXF/–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è): {ratio:.4f}")
                            
                            if abs(ratio - 1.0) > 0.1:
                                print(f"  ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –í –†–ê–°–°–¢–û–Ø–ù–ò–Ø–•: {ratio:.4f}")
                            else:
                                print(f"  ‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è
                        if dxf_distance < 100:  # –º–µ–Ω—å—à–µ 10—Å–º
                            print(f"  üö® –ù–ê–õ–û–ñ–ï–ù–ò–Ø –í DXF! –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {dxf_distance:.1f}–º–º < 100–º–º")
                        elif dxf_distance < 200:  # –º–µ–Ω—å—à–µ 20—Å–º
                            print(f"  ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤ DXF: {dxf_distance:.1f}–º–º")
                        else:
                            print(f"  ‚úÖ –ù–µ—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏–π –≤ DXF")
                
                # –û—á–∏—Å—Ç–∫–∞
                try:
                    os.unlink(output_path)
                except:
                    pass
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {tank_file}: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    comprehensive_debug()