#!/usr/bin/env python3

from pathlib import Path
from dxf_utils import parse_dxf_complete
from carpet import Carpet, PlacedCarpet
from layout_optimizer import rotate_polygon, translate_polygon, check_collision
from shapely.geometry import Polygon

def test_specific_position():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–≤—Ä—ã
    carpets = []
    for i in range(1, 3):
        dxf_path = f'dxf_samples/HYUNDAI SOLARIS 1/{i}.dxf'
        polygon_data = parse_dxf_complete(dxf_path, verbose=False)
        if polygon_data and polygon_data.get("combined_polygon"):
            carpet = Carpet(polygon_data["combined_polygon"], f"{i}.dxf", "—á—ë—Ä–Ω—ã–π", f"group_{i}", 1)
            carpets.append(carpet)

    # –ü–µ—Ä–≤—ã–π –∫–æ–≤—ë—Ä: –ø–æ–≤—ë—Ä–Ω—É—Ç –Ω–∞ 90¬∞ –∏ —Ä–∞–∑–º–µ—â—ë–Ω –≤ (0, 0)
    first_rotated = rotate_polygon(carpets[0].polygon, 90)
    first_bounds = first_rotated.bounds
    first_translated = translate_polygon(first_rotated, 0 - first_bounds[0], 0 - first_bounds[1])

    print(f"–ü–µ—Ä–≤—ã–π –∫–æ–≤—ë—Ä:")
    print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: {carpets[0].polygon.bounds}")
    print(f"  –ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ 90¬∞: {first_rotated.bounds}")
    print(f"  –ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ (0,0): {first_translated.bounds}")

    # –í—Ç–æ—Ä–æ–π –∫–æ–≤—ë—Ä –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
    second_polygon = carpets[1].polygon
    second_bounds = second_polygon.bounds

    print(f"\n–í—Ç–æ—Ä–æ–π –∫–æ–≤—ë—Ä:")
    print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: {second_bounds}")
    print(f"  –†–∞–∑–º–µ—Ä—ã: {second_bounds[2] - second_bounds[0]:.1f} x {second_bounds[3] - second_bounds[1]:.1f} –º–º")

    # –õ–∏—Å—Ç
    sheet_width_mm, sheet_height_mm = 1400, 2000

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –≥–¥–µ –≤—Ç–æ—Ä–æ–π –∫–æ–≤—ë—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–º–µ—â–∞—Ç—å—Å—è
    test_positions = [
        (0, 700),
        (0, 800),
        (0, 900),
        (0, 1000),
        (850, 0),  # –°–ø—Ä–∞–≤–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–æ–≤—Ä–∞
        (850, 100),
        (850, 200),
    ]

    print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")

    for test_x, test_y in test_positions:
        print(f"\n--- –ü–æ–∑–∏—Ü–∏—è ({test_x}, {test_y}) ---")

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        x_offset = test_x - second_bounds[0]
        y_offset = test_y - second_bounds[1]

        # –°–æ–∑–¥–∞—ë–º —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω
        test_polygon = translate_polygon(second_polygon, x_offset, y_offset)
        test_bounds = test_polygon.bounds

        print(f"–°–º–µ—â–µ–Ω–∏–µ: ({x_offset:.1f}, {y_offset:.1f})")
        print(f"–ò—Ç–æ–≥–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: {test_bounds}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
        if (test_bounds[0] < 0 or test_bounds[1] < 0 or
            test_bounds[2] > sheet_width_mm or test_bounds[3] > sheet_height_mm):
            print(f"‚ùå –í—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞")
            print(f"   –õ–∏—Å—Ç: (0, 0, {sheet_width_mm}, {sheet_height_mm})")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏—é —Å –ø–µ—Ä–≤—ã–º –∫–æ–≤—Ä–æ–º
        collision = check_collision(test_polygon, first_translated, min_gap=2.0)
        print(f"–ö–æ–ª–ª–∏–∑–∏—è —Å –ø–µ—Ä–≤—ã–º –∫–æ–≤—Ä–æ–º: {collision}")

        if not collision:
            print(f"‚úÖ –ü–û–ó–ò–¶–ò–Ø –í–ê–õ–ò–î–ù–ê!")

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            first_bounds = first_translated.bounds
            print(f"–ü–µ—Ä–≤—ã–π –∫–æ–≤—ë—Ä: ({first_bounds[0]:.1f}, {first_bounds[1]:.1f}, {first_bounds[2]:.1f}, {first_bounds[3]:.1f})")
            print(f"–í—Ç–æ—Ä–æ–π –∫–æ–≤—ë—Ä: ({test_bounds[0]:.1f}, {test_bounds[1]:.1f}, {test_bounds[2]:.1f}, {test_bounds[3]:.1f})")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≥—Ä–∞–Ω–∏—Ü
            boxes_overlap = not (
                first_bounds[2] <= test_bounds[0] or  # –ø–µ—Ä–≤—ã–π –ª–µ–≤–µ–µ –≤—Ç–æ—Ä–æ–≥–æ
                test_bounds[2] <= first_bounds[0] or  # –≤—Ç–æ—Ä–æ–π –ª–µ–≤–µ–µ –ø–µ—Ä–≤–æ–≥–æ
                first_bounds[3] <= test_bounds[1] or  # –ø–µ—Ä–≤—ã–π –Ω–∏–∂–µ –≤—Ç–æ—Ä–æ–≥–æ
                test_bounds[3] <= first_bounds[1]     # –≤—Ç–æ—Ä–æ–π –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–≥–æ
            )
            print(f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ bounding box'–æ–≤: {boxes_overlap}")

            if not boxes_overlap:
                print(f"üéØ –ù–ê–ô–î–ï–ù–ê –†–ê–ë–û–ß–ê–Ø –ü–û–ó–ò–¶–ò–Ø: ({test_x}, {test_y})")
                return

        else:
            print(f"‚ùå –ö–æ–ª–ª–∏–∑–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏
            distance = first_translated.distance(test_polygon)
            intersection = first_translated.intersects(test_polygon)
            print(f"   –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.3f} –º–º")
            print(f"   –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {intersection}")

            if intersection:
                try:
                    overlap = first_translated.intersection(test_polygon)
                    if hasattr(overlap, 'area'):
                        print(f"   –ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {overlap.area:.1f} –º–º¬≤")
                except:
                    print(f"   –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –ø–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è")

    print(f"\n‚ùå –ù–∏ –æ–¥–Ω–∞ –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –ø–æ–¥–æ—à–ª–∞")

if __name__ == "__main__":
    test_specific_position()