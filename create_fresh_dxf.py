#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π DXF —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏.
"""

import os
from layout_optimizer import (
    parse_dxf_complete, 
    bin_packing, 
    save_dxf_layout_complete
)

def create_fresh_dxf():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π DXF —Ñ–∞–π–ª —Å –Ω—É–ª—è."""
    print("=== –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û DXF –§–ê–ô–õ–ê ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    source_files = [
        "/home/sasha/proj/2025/eva_layout/dxf_samples/–õ–æ–¥–∫–∞ –ê–∑–∏–º—É—Ç –≠–≤–µ—Ä–µ—Å—Ç 385/2.dxf",
        "/home/sasha/proj/2025/eva_layout/dxf_samples/–õ–æ–¥–∫–∞ –ê–ì–£–õ 270/2.dxf", 
        "/home/sasha/proj/2025/eva_layout/dxf_samples/TOYOTA COROLLA VERSO/2.dxf"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    existing_files = []
    for file_path in source_files:
        if os.path.exists(file_path):
            existing_files.append(file_path)
            print(f"‚úÖ {os.path.basename(file_path)}")
        else:
            print(f"‚ùå {os.path.basename(file_path)} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not existing_files:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤!")
        return False
    
    print(f"\\nüìä –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–∫—Ä–æ–π –∏–∑ {len(existing_files)} —Ñ–∞–π–ª–æ–≤...")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
    polygons = []
    original_dxf_data_map = {}
    
    for file_path in existing_files:
        print(f"\\nüìñ –ü–∞—Ä—Å–∏–º: {os.path.basename(file_path)}")
        try:
            with open(file_path, 'rb') as f:
                parsed_data = parse_dxf_complete(f, verbose=False)
            
            if parsed_data['combined_polygon']:
                file_name = os.path.basename(file_path)
                color = "—á–µ—Ä–Ω—ã–π"
                
                polygon_tuple = (parsed_data['combined_polygon'], file_name, color)
                polygons.append(polygon_tuple)
                original_dxf_data_map[file_name] = parsed_data
                
                bounds = parsed_data['combined_polygon'].bounds
                print(f"  ‚úÖ Bounds: ({bounds[0]:.1f}, {bounds[1]:.1f}, {bounds[2]:.1f}, {bounds[3]:.1f})")
                print(f"  üìä Entities: {len(parsed_data['original_entities'])}")
                
                if parsed_data.get('real_spline_bounds'):
                    print(f"  üìä Real SPLINE bounds: {parsed_data['real_spline_bounds']}")
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–∏–≥–æ–Ω")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    if not polygons:
        print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è!")
        return False
    
    print(f"\\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º bin packing –¥–ª—è {len(polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤...")
    
    # –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞
    sheet_size = (200.0, 140.0)  # —Å–º
    
    try:
        placed_elements, rejected_elements = bin_packing(
            polygons, 
            sheet_size, 
            max_attempts=1000, 
            verbose=True
        )
        
        print(f"\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç bin packing:")
        print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(rejected_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if not placed_elements:
            print("‚ùå –ù–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤!")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        for i, element in enumerate(placed_elements):
            if len(element) >= 5:
                polygon, x_offset, y_offset, rotation_angle, file_name = element[:5]
                final_bounds = polygon.bounds
                print(f"  {i+1}. {file_name}:")
                print(f"     Offset: ({x_offset:.1f}, {y_offset:.1f}), Rotation: {rotation_angle:.1f}¬∞")
                print(f"     Final bounds: ({final_bounds[0]:.1f}, {final_bounds[1]:.1f}, {final_bounds[2]:.1f}, {final_bounds[3]:.1f})")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        import time
        timestamp = int(time.time())
        new_file_path = f"/home/sasha/proj/2025/eva_layout/layout_fixed_{timestamp}.dxf"
        
        print(f"\\nüíæ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {new_file_path}")
        save_dxf_layout_complete(placed_elements, sheet_size, new_file_path, original_dxf_data_map)
        
        print(f"‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω!")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–≤–µ—Ä—Ö —Å—Ç–∞—Ä–æ–≥–æ
        import shutil
        old_file_path = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
        shutil.copy2(new_file_path, old_file_path)
        print(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {old_file_path}")
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_path = "/home/sasha/proj/2025/eva_layout/200_140_1_black_backup.dxf"
        shutil.copy2(new_file_path, backup_path)
        print(f"üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ bin packing: {e}")
        return False

if __name__ == "__main__":
    print("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ DXF —Ñ–∞–π–ª–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏")
    print("=" * 60)
    
    success = create_fresh_dxf()
    
    print("\\n" + "=" * 60)
    if success:
        print("‚úÖ –ù–û–í–´–ô DXF –§–ê–ô–õ –°–û–ó–î–ê–ù!")
        print("üéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –≤ AutoDesk Viewer –∑–∞–Ω–æ–≤–æ")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –§–ê–ô–õ–ê")