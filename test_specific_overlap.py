from pathlib import Path
from dxf_utils import parse_dxf_complete
from layout_optimizer import Carpet, bin_packing_with_inventory

def test_specific_overlap():
    """–¢–µ—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2"""

    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = [{
        "name": f"–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
        "width": 140,
        "height": 200,
        "color": "—á—ë—Ä–Ω—ã–π",
        "count": 5,
        "used": 0
    }]

    # 3 –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –∫–æ–≤—Ä–æ–≤ –∏–∑ VOLVO XC70 2 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
    priority1_polygons = []
    volvo_path = Path('dxf_samples/VOLVO XC70 2')
    files = list(volvo_path.rglob("*.dxf", case_sensitive=False))

    for dxf_file in files:
        try:
            polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
            if polygon_data and polygon_data.get("combined_polygon"):
                base_polygon = polygon_data["combined_polygon"]
                # 3 –∫–æ–ø–∏–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ–≤—Ä–∞
                for i in range(1, 4):
                    priority1_polygons.append(Carpet(
                        base_polygon,
                        f"{dxf_file.name}_–∫–æ–ø–∏—è_{i}",
                        "—á—ë—Ä–Ω—ã–π",
                        f"volvo_group",
                        1
                    ))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–≤—Ä–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1: {len(priority1_polygons)}")

    # 1 –∫–æ–ø–∏—è –∫–æ–≤—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
    priority2_polygons = []
    kugoo_file = Path('dxf_samples/–î–ï–ö–ê KUGOO M4 PRO JILONG/1.dxf')
    polygon_data = parse_dxf_complete(kugoo_file.as_posix(), verbose=False)
    if polygon_data and polygon_data.get("combined_polygon"):
        base_polygon = polygon_data["combined_polygon"]
        priority2_polygons.append(Carpet(
            base_polygon,
            f"{kugoo_file.name}_priority2",
            "—á—ë—Ä–Ω—ã–π",
            f"kugoo_group",
            2
        ))

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–≤—Ä–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2: {len(priority2_polygons)}")

    all_polygons = priority1_polygons + priority2_polygons
    print(f"üìä –í—Å–µ–≥–æ –∫–æ–≤—Ä–æ–≤: {len(all_polygons)}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons,
        available_sheets,
        verbose=True,
    )

    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"üìä –†–∞–∑–º–µ—â–µ–Ω–æ: {len(all_polygons) - len(unplaced)}/{len(all_polygons)}")
    print(f"üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"‚ùå –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {len(unplaced)}")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –ª–∏—Å—Ç–∞–º
    for i, layout in enumerate(placed_layouts, 1):
        print(f"\nüìÑ –õ–∏—Å—Ç {i}: {len(layout.placed_polygons)} –∫–æ–≤—Ä–æ–≤")
        for j, carpet in enumerate(layout.placed_polygons):
            print(f"   {j+1}. {carpet.filename} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {carpet.priority})")

if __name__ == "__main__":
    test_specific_overlap()