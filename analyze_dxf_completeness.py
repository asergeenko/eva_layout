#!/usr/bin/env python3
"""Analyze DXF files to check completeness of elements preservation."""

import ezdxf
import os
from shapely.geometry import Polygon
from shapely.ops import unary_union
import tempfile

def analyze_dxf_file(file_path, description=""):
    """Analyze a DXF file and return detailed information about its contents."""
    print(f"\nüìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)} {description}")
    print("=" * 70)
    
    try:
        doc = ezdxf.readfile(file_path)
        msp = doc.modelspace()
        
        analysis = {
            'total_entities': 0,
            'entity_types': {},
            'polygons': [],
            'text_entities': [],
            'other_entities': [],
            'layers': set(),
            'colors': set()
        }
        
        for entity in msp:
            analysis['total_entities'] += 1
            entity_type = entity.dxftype()
            analysis['entity_types'][entity_type] = analysis['entity_types'].get(entity_type, 0) + 1
            
            # Track layers and colors
            if hasattr(entity.dxf, 'layer'):
                analysis['layers'].add(entity.dxf.layer)
            if hasattr(entity.dxf, 'color'):
                analysis['colors'].add(entity.dxf.color)
            
            # Categorize entities
            if entity_type in ['LWPOLYLINE', 'POLYLINE', 'SPLINE', 'ELLIPSE', 'CIRCLE', 'ARC']:
                # These can be converted to polygons
                try:
                    polygon = convert_entity_to_polygon(entity)
                    if polygon and polygon.is_valid:
                        analysis['polygons'].append({
                            'type': entity_type,
                            'area': polygon.area,
                            'bounds': polygon.bounds,
                            'polygon': polygon
                        })
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {entity_type}: {e}")
                    
            elif entity_type in ['TEXT', 'MTEXT']:
                analysis['text_entities'].append({
                    'type': entity_type,
                    'text': getattr(entity.dxf, 'text', 'N/A'),
                    'position': getattr(entity.dxf, 'insert', 'N/A')
                })
                
            else:
                analysis['other_entities'].append({
                    'type': entity_type,
                    'attributes': str(entity.dxf)[:100]  # First 100 chars
                })
        
        # Print analysis
        print(f"üìä –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {analysis['total_entities']}")
        print(f"   ‚Ä¢ –°–ª–æ–µ–≤: {len(analysis['layers'])}")
        print(f"   ‚Ä¢ –¶–≤–µ—Ç–æ–≤: {len(analysis['colors'])}")
        
        print(f"\nüîß –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for entity_type, count in sorted(analysis['entity_types'].items()):
            print(f"   ‚Ä¢ {entity_type}: {count}")
        
        print(f"\nüî∑ –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –≤ –ø–æ–ª–∏–≥–æ–Ω—ã): {len(analysis['polygons'])}")
        if analysis['polygons']:
            total_area = sum(p['area'] for p in analysis['polygons'])
            print(f"   ‚Ä¢ –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {total_area:.2f} –º–º¬≤")
            for i, poly_info in enumerate(analysis['polygons'][:5], 1):  # Show first 5
                print(f"   ‚Ä¢ {i}. {poly_info['type']}: –ø–ª–æ—â–∞–¥—å {poly_info['area']:.2f} –º–º¬≤")
        
        print(f"\nüìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {len(analysis['text_entities'])}")
        for i, text_info in enumerate(analysis['text_entities'][:3], 1):  # Show first 3
            print(f"   ‚Ä¢ {i}. {text_info['type']}: '{text_info['text']}'")
        
        print(f"\n‚ùì –î—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {len(analysis['other_entities'])}")
        for i, other_info in enumerate(analysis['other_entities'][:3], 1):  # Show first 3
            print(f"   ‚Ä¢ {i}. {other_info['type']}")
        
        if analysis['layers']:
            print(f"\nüóÇÔ∏è –°–ª–æ–∏: {', '.join(sorted(analysis['layers']))}")
        
        return analysis
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return None

def convert_entity_to_polygon(entity):
    """Convert a DXF entity to a Shapely polygon."""
    entity_type = entity.dxftype()
    
    if entity_type == "LWPOLYLINE":
        points = [(p[0], p[1]) for p in entity.get_points()]
        if len(points) >= 3:
            return Polygon(points)
            
    elif entity_type == "POLYLINE":
        points = [(vertex.dxf.location[0], vertex.dxf.location[1]) for vertex in entity.vertices]
        if len(points) >= 3:
            return Polygon(points)
            
    elif entity_type == "CIRCLE":
        center = entity.dxf.center
        radius = entity.dxf.radius
        import numpy as np
        points = []
        for angle in np.linspace(0, 2*np.pi, 36):
            x = center[0] + radius * np.cos(angle)
            y = center[1] + radius * np.sin(angle)
            points.append((x, y))
        return Polygon(points)
        
    # Add more entity types as needed
    return None

def test_dxf_completeness():
    """Test DXF file completeness preservation."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DXF —Ñ–∞–π–ª–æ–≤")
    print("=" * 80)
    
    # Find some sample DXF files
    sample_files = []
    dxf_samples_path = "dxf_samples"
    
    if os.path.exists(dxf_samples_path):
        for root, dirs, files in os.walk(dxf_samples_path):
            for file in files:
                if file.lower().endswith('.dxf'):
                    sample_files.append(os.path.join(root, file))
                    if len(sample_files) >= 3:  # Limit to 3 files for testing
                        break
            if len(sample_files) >= 3:
                break
    
    if not sample_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—Ä–∞–∑—Ü—ã DXF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ dxf_samples")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(sample_files)} –æ–±—Ä–∞–∑—Ü–æ–≤ DXF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # Analyze original files
    original_analyses = []
    for i, file_path in enumerate(sample_files, 1):
        print(f"\n{'='*10} –û–ë–†–ê–ó–ï–¶ {i} {'='*10}")
        analysis = analyze_dxf_file(file_path, "(–∏—Å—Ö–æ–¥–Ω—ã–π)")
        if analysis:
            original_analyses.append((file_path, analysis))
    
    # Test output file creation
    print(f"\n\n{'='*20} –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –í–´–•–û–î–ù–û–ì–û –§–ê–ô–õ–ê {'='*20}")
    
    if original_analyses:
        # Take the first file for testing
        test_file, test_analysis = original_analyses[0]
        
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º: {os.path.basename(test_file)}")
        
        # Simulate current parsing and output process
        try:
            from layout_optimizer import parse_dxf, save_dxf_layout
            
            # Parse DXF (current method)
            with open(test_file, 'rb') as f:
                parsed_polygon = parse_dxf(f, verbose=False)
            
            if parsed_polygon:
                print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
                print(f"   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω –æ–¥–∏–Ω –ø–æ–ª–∏–≥–æ–Ω, –ø–ª–æ—â–∞–¥—å: {parsed_polygon.area:.2f} –º–º¬≤")
                print(f"   ‚Ä¢ –ì—Ä–∞–Ω–∏—Ü—ã: {parsed_polygon.bounds}")
                print(f"   ‚Ä¢ –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä: {len(parsed_polygon.exterior.coords)} —Ç–æ—á–µ–∫")
                print(f"   ‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è: {len(parsed_polygon.interiors)}")
                
                # Create test output
                test_output = "test_output.dxf"
                placed_polygons = [(parsed_polygon, 0, 0, 0, "test_file.dxf", "—Å–µ—Ä—ã–π")]  # x, y, angle, name, color
                sheet_size = (100, 100)  # 100x100 cm
                
                save_dxf_layout(placed_polygons, sheet_size, test_output)
                
                if os.path.exists(test_output):
                    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {test_output}")
                    
                    # Analyze output file
                    output_analysis = analyze_dxf_file(test_output, "(–≤—ã—Ö–æ–¥–Ω–æ–π)")
                    
                    # Compare
                    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ò–°–•–û–î–ù–û–ì–û –ò –í–´–•–û–î–ù–û–ì–û –§–ê–ô–õ–û–í:")
                    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:")
                    print(f"     ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {test_analysis['total_entities']}")
                    print(f"     ‚Ä¢ –¢–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(test_analysis['entity_types'])}")
                    print(f"     ‚Ä¢ –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö: {len(test_analysis['polygons'])}")
                    print(f"     ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {len(test_analysis['text_entities'])}")
                    print(f"     ‚Ä¢ –î—Ä—É–≥–∏—Ö: {len(test_analysis['other_entities'])}")
                    
                    if output_analysis:
                        print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:")
                        print(f"     ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {output_analysis['total_entities']}")
                        print(f"     ‚Ä¢ –¢–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(output_analysis['entity_types'])}")
                        print(f"     ‚Ä¢ –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö: {len(output_analysis['polygons'])}")
                        print(f"     ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {len(output_analysis['text_entities'])}")
                        print(f"     ‚Ä¢ –î—Ä—É–≥–∏—Ö: {len(output_analysis['other_entities'])}")
                    
                    print(f"\n‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–û–¢–ï–†–ò:")
                    lost_elements = []
                    
                    if test_analysis['text_entities']:
                        lost_elements.append(f"üìù {len(test_analysis['text_entities'])} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    if test_analysis['other_entities']:
                        lost_elements.append(f"‚ùì {len(test_analysis['other_entities'])} –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    if len(test_analysis['polygons']) > 1:
                        lost_elements.append(f"üî∑ {len(test_analysis['polygons'])-1} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω")
                    
                    if any(p['polygon'].interiors for p in test_analysis['polygons']):
                        lost_elements.append("üï≥Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
                    
                    if lost_elements:
                        print("     ‚ùå –¢–µ—Ä—è—é—Ç—Å—è:")
                        for loss in lost_elements:
                            print(f"        ‚Ä¢ {loss}")
                    else:
                        print("     ‚úÖ –í–∏–¥–∏–º—ã—Ö –ø–æ—Ç–µ—Ä—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                    
                    # Clean up
                    os.remove(test_output)
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    test_dxf_completeness()