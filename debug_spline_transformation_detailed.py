#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""

import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete, apply_placement_transform
from shapely.geometry import Polygon

def debug_spline_transformation_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    print("=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê SPLINE –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò ===")
    
    # –ò—Å—Ö–æ–¥–Ω—ã–π DXF —Ñ–∞–π–ª
    source_dxf = "/home/sasha/proj/2025/eva_layout/dxf_samples/–õ–æ–¥–∫–∞ –ê–∑–∏–º—É—Ç –≠–≤–µ—Ä–µ—Å—Ç 385/2.dxf"
    
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {source_dxf}")
    
    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DXF
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    original_polygon = parsed_data['combined_polygon']
    print(f"üìä Combined polygon bounds: {original_polygon.bounds}")
    
    if parsed_data.get('real_spline_bounds'):
        spline_bounds = parsed_data['real_spline_bounds']
        print(f"üìä Real SPLINE bounds: {spline_bounds}")
    else:
        print("üìä –ù–µ—Ç real_spline_bounds!")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    x_offset = -200
    y_offset = 150
    rotation_angle = 0
    
    print(f"\\nüîÑ –ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE:")
    print(f"  –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: x_offset={x_offset}, y_offset={y_offset}, rotation={rotation_angle}¬∞")
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π SPLINE –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    spline_entities = [e for e in parsed_data['original_entities'] if e['type'] == 'SPLINE']
    if not spline_entities:
        print("  ‚ùå –ù–µ—Ç SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤!")
        return
    
    first_spline = spline_entities[0]
    entity = first_spline['entity']
    control_points = entity.control_points
    
    if not control_points or len(control_points) == 0:
        print("  ‚ùå –ù–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫!")
        return
    
    # –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    cp = control_points[0]
    if hasattr(cp, 'x') and hasattr(cp, 'y'):
        x, y = cp.x, cp.y
    elif len(cp) >= 2:
        x, y = float(cp[0]), float(cp[1])
    else:
        print("  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏!")
        return
    
    print(f"\\nüìç –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ SPLINE:")
    print(f"  –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x:.2f}, {y:.2f})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ bounds –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    if parsed_data.get('real_spline_bounds'):
        norm_bounds = parsed_data['real_spline_bounds']
        print(f"  üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ bounds –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {norm_bounds}")
    else:
        norm_bounds = original_polygon.bounds
        print(f"  üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ bounds –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (fallback): {norm_bounds}")
    
    # Step 1: Normalize to origin
    x_norm = x - norm_bounds[0]
    y_norm = y - norm_bounds[1]
    print(f"  –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: ({x_norm:.2f}, {y_norm:.2f})")
    
    # Step 2: Skip rotation (rotation_angle = 0)
    
    # Step 3: Apply final position
    x_final = x_norm + x_offset
    y_final = y_norm + y_offset
    print(f"  –ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: ({x_final:.2f}, {y_final:.2f})")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ apply_placement_transform
    expected_polygon = apply_placement_transform(original_polygon, x_offset, y_offset, rotation_angle)
    print(f"\\nüìä –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç apply_placement_transform:")
    print(f"  Expected polygon bounds: {expected_polygon.bounds}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–∑–∏—Ü–∏—é —Ç–æ—á–∫–∏
    orig_bounds = original_polygon.bounds
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ combined_polygon bounds
    x_norm_expected = x - orig_bounds[0]
    y_norm_expected = y - orig_bounds[1]
    x_final_expected = x_norm_expected + x_offset
    y_final_expected = y_norm_expected + y_offset
    
    print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç–æ—á–∫–∏: ({x_final_expected:.2f}, {y_final_expected:.2f})")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print(f"\\nüîç –°–†–ê–í–ù–ï–ù–ò–ï:")
    print(f"  SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: ({x_final:.2f}, {y_final:.2f})")
    print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è:   ({x_final_expected:.2f}, {y_final_expected:.2f})")
    
    diff_x = x_final - x_final_expected
    diff_y = y_final - y_final_expected
    print(f"  –†–∞–∑–Ω–æ—Å—Ç—å: ({diff_x:.2f}, {diff_y:.2f})")
    
    if abs(diff_x) < 0.1 and abs(diff_y) < 0.1:
        print(f"  ‚úÖ –ö–û–û–†–î–ò–ù–ê–¢–´ –°–û–í–ü–ê–î–ê–Æ–¢!")
    else:
        print(f"  ‚ùå –ö–û–û–†–î–ò–ù–ê–¢–´ –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã
        if norm_bounds != orig_bounds:
            print(f"  üí° –ü—Ä–∏—á–∏–Ω–∞: –†–∞–∑–Ω—ã–µ bounds –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏!")
            print(f"     SPLINE bounds: {norm_bounds}")
            print(f"     Combined bounds: {orig_bounds}")
        else:
            print(f"  üí° Bounds –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º!")

if __name__ == "__main__":
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    debug_spline_transformation_detailed()
    
    print("\\n" + "=" * 60)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")