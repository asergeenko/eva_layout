#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
"""

import sys
sys.path.insert(0, '.')

import os
import tempfile
from layout_optimizer import (
    parse_dxf_complete, bin_packing_with_inventory, 
    save_dxf_layout_complete, plot_layout
)

def final_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–ê")
    print("=" * 50)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º TANK —Ñ–∞–π–ª—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª–æ—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_files = [
        "dxf_samples/TANK 300/1.dxf",
        "dxf_samples/TANK 300/4.dxf"
    ]
    
    found_files = [f for f in test_files if os.path.exists(f)]
    print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã: {len(found_files)}")
    for f in found_files:
        print(f"  ‚Ä¢ {os.path.basename(f)}")
    
    if len(found_files) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
    all_polygons = []
    original_dxf_data_map = {}
    
    print(f"\nüì¶ –ü–ê–†–°–ò–ù–ì –ò –ü–û–î–ì–û–¢–û–í–ö–ê")
    for file_path in found_files:
        file_name = os.path.basename(file_path)
        
        result = parse_dxf_complete(file_path, verbose=False)
        if result['polygons']:
            poly = result['polygons'][0]
            all_polygons.append((poly, file_name, "—á–µ—Ä–Ω—ã–π", 1))
            original_dxf_data_map[file_name] = result
            
            bounds = poly.bounds
            print(f"  ‚úÖ {file_name}: {bounds[2]-bounds[0]:.1f}√ó{bounds[3]-bounds[1]:.1f}–º–º")
    
    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
    available_sheets = [{
        'name': 'test_sheet',
        'width': 140,
        'height': 200, 
        'count': 1,
        'used': 0,
        'color': '—á–µ—Ä–Ω—ã–π'
    }]
    
    print(f"\nüéØ –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ù–ê –õ–ò–°–¢–ï 140√ó200—Å–º")
    
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons, available_sheets, verbose=False
    )
    
    if not placed_layouts:
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
        
    layout = placed_layouts[0]
    placed_polygons = layout['placed_polygons']
    
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed_polygons)} –æ–±—ä–µ–∫—Ç–æ–≤")
    print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)} –æ–±—ä–µ–∫—Ç–æ–≤")
    print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {layout['usage_percent']:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print(f"\nüìè –†–ê–°–°–¢–û–Ø–ù–ò–Ø –í –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
    if len(placed_polygons) >= 2:
        p1 = placed_polygons[0][0]  # –ø–æ–ª–∏–≥–æ–Ω 1
        p2 = placed_polygons[1][0]  # –ø–æ–ª–∏–≥–æ–Ω 2
        
        bounds1 = p1.bounds
        bounds2 = p2.bounds
        
        center1_x = (bounds1[0] + bounds1[2]) / 2
        center1_y = (bounds1[1] + bounds1[3]) / 2
        center2_x = (bounds2[0] + bounds2[2]) / 2  
        center2_y = (bounds2[1] + bounds2[3]) / 2
        
        distance = ((center2_x - center1_x)**2 + (center2_y - center1_y)**2)**0.5
        print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏: {distance:.1f}–º–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ
        min_gap = 100  # –º–∏–Ω–∏–º—É–º 10—Å–º
        if distance < min_gap:
            print(f"  ‚ùå –í–û–ó–ú–û–ñ–ù–û–ï –ù–ê–õ–û–ñ–ï–ù–ò–ï! –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {distance:.1f}–º–º < {min_gap}–º–º")
        else:
            print(f"  ‚úÖ –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DXF
    print(f"\nüíæ –°–û–ó–î–ê–ù–ò–ï DXF")
    
    layout_dxf_map = {}
    for placed_item in placed_polygons:
        filename = placed_item[4]
        if filename in original_dxf_data_map:
            layout_dxf_map[filename] = original_dxf_data_map[filename]
    
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    save_dxf_layout_complete(
        placed_polygons, 
        (140, 200), 
        output_path, 
        layout_dxf_map, 
        verbose=False
    )
    
    print(f"  DXF —Å–æ–∑–¥–∞–Ω: {output_path}")
    
    print(f"\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print(f"  –§–∞–π–ª DXF: {output_path}")
    print(f"  –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ AutoCAD –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–º –ü–û")
    
    # –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    # try:
    #     os.unlink(output_path)
    # except:
    #     pass

if __name__ == "__main__":
    final_test()