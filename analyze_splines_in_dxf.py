#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DXF —Ñ–∞–π–ª–µ.
"""

import ezdxf
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon as MPLPolygon
import numpy as np

def analyze_splines_in_dxf():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DXF —Ñ–∞–π–ª–µ."""
    print("=== –ê–ù–ê–õ–ò–ó SPLINE –≠–õ–ï–ú–ï–ù–¢–û–í ===")
    
    dxf_path = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    try:
        doc = ezdxf.readfile(dxf_path)
        msp = doc.modelspace()
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã
        splines = [e for e in msp if e.dxftype() == 'SPLINE']
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(splines)} SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray', 'cyan', 'magenta']
        
        spline_info = []
        
        for i, spline in enumerate(splines):
            layer = getattr(spline.dxf, 'layer', 'UNKNOWN')
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ SPLINE
                control_points = spline.control_points
                
                if control_points is None or len(control_points) == 0:
                    print(f"  SPLINE {i+1}: –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫")
                    continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å numpy arrays)
                points = []
                for cp in control_points:
                    if hasattr(cp, 'x') and hasattr(cp, 'y'):
                        points.append((cp.x, cp.y))
                    elif len(cp) >= 2:  # numpy array or tuple
                        points.append((float(cp[0]), float(cp[1])))
                    else:
                        print(f"    –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ—á–∫–∏: {cp}")
                        continue
                
                if len(points) < 2:
                    print(f"  SPLINE {i+1}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ ({len(points)})")
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º bounds
                xs = [p[0] for p in points]
                ys = [p[1] for p in points]
                bounds = (min(xs), min(ys), max(xs), max(ys))
                width = bounds[2] - bounds[0]
                height = bounds[3] - bounds[1]
                
                print(f"  SPLINE {i+1}: layer='{layer}'")
                print(f"    –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫: {len(points)}")
                print(f"    Bounds: {bounds}")
                print(f"    –†–∞–∑–º–µ—Ä—ã: {width:.1f} x {height:.1f}")
                
                spline_info.append((points, layer, bounds, i+1))
                
                # –†–∏—Å—É–µ–º SPLINE –∫–∞–∫ –ª–æ–º–∞–Ω—É—é –ª–∏–Ω–∏—é
                color = colors[i % len(colors)]
                
                # –°–æ–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
                if len(points) >= 3:
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ —Ç–æ—á–µ–∫
                    polygon = MPLPolygon(points, alpha=0.7, facecolor=color, edgecolor='black', linewidth=1)
                    ax.add_patch(polygon)
                else:
                    # –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –º–∞–ª–æ, —Ä–∏—Å—É–µ–º –∫–∞–∫ –ª–∏–Ω–∏—é
                    xs, ys = zip(*points)
                    ax.plot(xs, ys, color=color, linewidth=2, marker='o')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                center_x = sum(xs) / len(xs)
                center_y = sum(ys) / len(ys)
                ax.annotate(f"S{i+1}\\n{layer[:15]}", (center_x, center_y), 
                           ha='center', va='center', fontsize=8, weight='bold')
                
            except Exception as e:
                print(f"  SPLINE {i+1}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º sheet boundary –µ—Å–ª–∏ –µ—Å—Ç—å
        lwpolylines = [e for e in msp if e.dxftype() == 'LWPOLYLINE']
        for polyline in lwpolylines:
            layer = getattr(polyline.dxf, 'layer', 'UNKNOWN')
            if 'BOUNDARY' in layer.upper():
                points = list(polyline.get_points())
                if points:
                    coords = [(p[0], p[1]) for p in points]
                    boundary_patch = MPLPolygon(coords, fill=False, edgecolor='black', linewidth=2, linestyle='--')
                    ax.add_patch(boundary_patch)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        ax.set_aspect('equal')
        ax.grid(True, alpha=0.3)
        ax.set_title("SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DXF —Ñ–∞–π–ª–µ")
        ax.set_xlabel("X (–º–º)")
        ax.set_ylabel("Y (–º–º)")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Å—à—Ç–∞–±
        if spline_info:
            all_xs = []
            all_ys = []
            for points, _, _, _ in spline_info:
                all_xs.extend([p[0] for p in points])
                all_ys.extend([p[1] for p in points])
            
            if all_xs and all_ys:
                margin = 100
                ax.set_xlim(min(all_xs) - margin, max(all_xs) + margin)
                ax.set_ylim(min(all_ys) - margin, max(all_ys) + margin)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_path = "/home/sasha/proj/2025/eva_layout/dxf_splines_content.png"
        plt.savefig(output_path, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"\\n‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è SPLINE'–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        print(f"\\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π SPLINE'–æ–≤:")
        
        problems = []
        for i, (points, layer, bounds, spline_num) in enumerate(spline_info):
            x_min, y_min, x_max, y_max = bounds
            
            print(f"  SPLINE {spline_num} ({layer}):")
            print(f"    –ü–æ–∑–∏—Ü–∏—è: ({x_min:.1f}, {y_min:.1f}) -> ({x_max:.1f}, {y_max:.1f})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if x_min < -100 or y_min < -100:
                problems.append(f"SPLINE {spline_num} –∏–º–µ–µ—Ç –æ—á–µ–Ω—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            
            if x_max > 2000 or y_max > 2500:
                problems.append(f"SPLINE {spline_num} –∏–º–µ–µ—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            for j, (other_points, other_layer, other_bounds, other_num) in enumerate(spline_info[i+1:], i+1):
                if not (bounds[2] <= other_bounds[0] or bounds[0] >= other_bounds[2] or 
                       bounds[3] <= other_bounds[1] or bounds[1] >= other_bounds[3]):
                    problems.append(f"SPLINE {spline_num} –∏ {other_num} –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è")
        
        print(f"\\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}")
        for problem in problems:
            print(f"  üî¥ {problem}")
        
        return len(spline_info), len(problems)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 0, 1

if __name__ == "__main__":
    print("üîç –ê–Ω–∞–ª–∏–∑ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DXF –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("=" * 60)
    
    spline_count, problem_count = analyze_splines_in_dxf()
    
    print("\\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì: {spline_count} SPLINE'–æ–≤, {problem_count} –ø—Ä–æ–±–ª–µ–º")
    
    if problem_count == 0:
        print("‚úÖ SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º SPLINE'–æ–≤!")
    
    print("\\n–°—Ä–∞–≤–Ω–∏—Ç–µ:")
    print("  - visualization.png (–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")  
    print("  - dxf_splines_content.png (—Ä–µ–∞–ª—å–Ω—ã–µ SPLINE'—ã –≤ DXF)")
    print("  - autodesk.png (–∫–∞–∫ –≤–∏–¥–∏—Ç Autodesk Viewer)")