#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤.
–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tmp_test.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import bin_packing_with_inventory
from carpet import Carpet
from dxf_utils import parse_dxf
from plot import plot_layout
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def test_optimized_algorithm():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tmp_test."""

    # –ü—É—Ç—å –∫ DXF —Ñ–∞–π–ª–∞–º
    dxf_path = Path(__file__).parent / "tmp_test"
    dxf_files = list(dxf_path.glob("*.dxf"))

    if not dxf_files:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã DXF —Ñ–∞–π–ª—ã –≤ tmp_test")
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(dxf_files)} DXF —Ñ–∞–π–ª–æ–≤")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–≤—Ä—ã
    carpets = []
    for dxf_file in dxf_files[:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —Ç–µ—Å—Ç–∞
        try:
            polygon = parse_dxf(str(dxf_file), verbose=False)
            if polygon:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–≤–µ—Ä —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 1 (—á—Ç–æ–±—ã –ø–æ–ø–∞–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º)
                carpet = Carpet(
                    polygon=polygon,  # –ë–µ—Ä–µ–º –ø–æ–ª–∏–≥–æ–Ω
                    filename=dxf_file.name,
                    color="—á—ë—Ä–Ω—ã–π",  # –í—Å–µ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                    order_id=f"order_{dxf_file.stem}",
                    priority=1,
                )
                carpets.append(carpet)
                logger.info(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–≤–µ—Ä {dxf_file.name}, –ø–ª–æ—â–∞–¥—å: {carpet.polygon.area:.0f}"
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {dxf_file}: {e}")

    if not carpets:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–≤—Ä–∞")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–ª–æ—â–∞–¥–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã
    carpets.sort(key=lambda c: c.polygon.area, reverse=True)
    logger.info("–ö–æ–≤—Ä—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–ª–æ—â–∞–¥–∏ (–∫—Ä—É–ø–Ω—ã–µ –ø–µ—Ä–≤—ã–µ)")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã
    available_sheets = [
        {
            "name": "–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç 140x200",
            "width": 140,
            "height": 200,
            "color": "—á—ë—Ä–Ω—ã–π",
            "count": 10,
            "used": 0,
        }
    ]

    logger.info("=== –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê ===")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        placed_layouts, unplaced_carpets = bin_packing_with_inventory(
            carpets=carpets, available_sheets=available_sheets, verbose=True
        )

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
        logger.info(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤: {len(unplaced_carpets)}")

        total_usage = 0
        for i, layout in enumerate(placed_layouts):
            logger.info(
                f"–õ–∏—Å—Ç {i+1}: {len(layout.placed_polygons)} –∫–æ–≤—Ä–æ–≤, "
                f"–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ {layout.usage_percent:.1f}%"
            )
            total_usage += layout.usage_percent

        if placed_layouts:
            avg_usage = total_usage / len(placed_layouts)
            logger.info(f"–°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤: {avg_usage:.1f}%")

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_dir = Path(__file__).parent / "tmp_test" / "optimized_results"
        output_dir.mkdir(exist_ok=True)

        if placed_layouts:
            for i, layout in enumerate(placed_layouts):
                plot_filename = output_dir / f"optimized_sheet_{i+1}.png"
                plot_result = plot_layout(layout.placed_polygons, layout.sheet_size)
                with open(plot_filename, "wb") as f:
                    f.write(plot_result.getvalue())
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_dir}")

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            logger.info("\n=== –°–†–ê–í–ù–ï–ù–ò–ï ===")
            logger.info("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: 6 –ª–∏—Å—Ç–æ–≤ (–ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º)")
            logger.info(f"–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {len(placed_layouts)} –ª–∏—Å—Ç–æ–≤")

            if len(placed_layouts) < 6:
                logger.info("üéâ –£–õ–£–ß–®–ï–ù–ò–ï! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ–Ω—å—à–µ –ª–∏—Å—Ç–æ–≤!")
            elif len(placed_layouts) == 6:
                logger.info(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –º–æ–≥–ª–∞ —É–ª—É—á—à–∏—Ç—å—Å—è"
                )
            else:
                logger.warning("–í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –ª–∏—Å—Ç–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    test_optimized_algorithm()
