#!/usr/bin/env python3

from pathlib import Path
from dxf_utils import parse_dxf_complete
from carpet import Carpet, PlacedCarpet
from layout_optimizer import rotate_polygon, translate_polygon, check_collision
from shapely.geometry import Polygon

def debug_find_positions():
    """–û—Ç–ª–∞–¥–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ find_bottom_left_position —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–≤—Ä—ã
    carpets = []
    for i in range(1, 3):
        dxf_path = f'dxf_samples/HYUNDAI SOLARIS 1/{i}.dxf'
        polygon_data = parse_dxf_complete(dxf_path, verbose=False)
        if polygon_data and polygon_data.get("combined_polygon"):
            carpet = Carpet(polygon_data["combined_polygon"], f"{i}.dxf", "—á—ë—Ä–Ω—ã–π", f"group_{i}", 1)
            carpets.append(carpet)

    # –í–æ—Å—Å–æ–∑–¥–∞—ë–º —Å–∏—Ç—É–∞—Ü–∏—é: –ø–µ—Ä–≤—ã–π –∫–æ–≤—ë—Ä —Ä–∞–∑–º–µ—â—ë–Ω
    first_rotated = rotate_polygon(carpets[0].polygon, 90)
    first_bounds = first_rotated.bounds
    first_translated = translate_polygon(first_rotated, 0 - first_bounds[0], 0 - first_bounds[1])

    placed_first = PlacedCarpet(
        first_translated, 0 - first_bounds[0], 0 - first_bounds[1], 90,
        "1.dxf", "—á—ë—Ä–Ω—ã–π", "group_1", 1, 1
    )

    print(f"–ü–µ—Ä–≤—ã–π –∫–æ–≤—ë—Ä —Ä–∞–∑–º–µ—â—ë–Ω —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏: {placed_first.polygon.bounds}")

    # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –∫–æ–≤—ë—Ä
    second_polygon = carpets[1].polygon
    sheet_width_mm, sheet_height_mm = 1400, 2000

    print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–≤—Ä–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª):")
    print(f"–†–∞–∑–º–µ—Ä—ã: {second_polygon.bounds}")

    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–≥–∏–∫—É find_bottom_left_position —Å –æ—Ç–ª–∞–¥–∫–æ–π
    def debug_find_bottom_left_position(polygon, placed_polygons, sheet_width, sheet_height):
        """–í–µ—Ä—Å–∏—è find_bottom_left_position —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏"""

        if not placed_polygons:
            print("–ù–µ—Ç —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (0, 0)")
            return 0, 0

        bounds = polygon.bounds
        poly_width = bounds[2] - bounds[0]
        poly_height = bounds[3] - bounds[1]

        print(f"–ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞ —Ä–∞–∑–º–µ—Ä–æ–º {poly_width:.1f} x {poly_height:.1f} –º–º")

        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å –±–æ–ª—å—à–∏–º–∏ —à–∞–≥–∞–º–∏
        step = max(10.0, min(poly_width, poly_height) / 3)
        print(f"–®–∞–≥ —Å–µ—Ç–∫–∏: {step:.1f} –º–º")

        # X –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ)
        x_positions = []
        for x in range(0, int(sheet_width - poly_width), max(5, int(step))):
            x_positions.append(x)
        x_positions.sort()
        print(f"X –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {x_positions[:15]}")

        best_y = None
        best_positions = []

        for test_x in x_positions[:15]:
            print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º X = {test_x} ---")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ Y –ø–æ–∑–∏—Ü–∏–π
            test_y_positions = [0]  # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º –Ω–∏–∑

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            for placed_poly in placed_polygons[:5]:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 2 –¥–æ 5
                other_bounds = placed_poly.polygon.bounds
                test_y_positions.append(other_bounds[3] + 2.0)  # –í—ã—à–µ —Å –∑–∞–∑–æ—Ä–æ–º 2–º–º
                test_y_positions.append(other_bounds[1])  # –¢–∞ –∂–µ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤—ã–±–æ—Ä–∫—É Y
            step_size = max(25, int(poly_height / 8))
            print(f"–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —à–∞–≥ Y: {step_size} –º–º")
            for y_sample in range(0, int(sheet_height - poly_height + 1), step_size):
                test_y_positions.append(float(y_sample))

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            test_y_positions = sorted(set(test_y_positions))
            print(f"Y –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {[f'{y:.1f}' for y in test_y_positions[:10]]}{'...' if len(test_y_positions) > 10 else ''}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
            for test_y in test_y_positions:
                if test_y < 0 or test_y + poly_height > sheet_height:
                    continue

                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
                x_offset = test_x - bounds[0]
                y_offset = test_y - bounds[1]
                test_polygon = translate_polygon(polygon, x_offset, y_offset)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
                test_bounds = test_polygon.bounds
                if (test_bounds[0] < 0 or test_bounds[1] < 0 or
                    test_bounds[2] > sheet_width or test_bounds[3] > sheet_height):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
                collision = False
                for placed_poly in placed_polygons:
                    if check_collision(test_polygon, placed_poly.polygon, min_gap=2.0):
                        collision = True
                        break

                if not collision:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ({test_x}, {test_y})")
                    if best_y is None or test_y < best_y:
                        best_y = test_y
                        best_positions = [(test_x, test_y)]
                    elif test_y == best_y:
                        best_positions.append((test_x, test_y))
                    break  # –ù–∞—à–ª–∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ X, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        if best_positions:
            best_positions.sort()
            result = best_positions[0]
            print(f"\nüéØ –õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {result}")
            return result

        print(f"\n‚ùå –ù–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None, None

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
    print(f"\n{'='*60}")
    print("–¢–ï–°–¢ –ë–ï–ó –ü–û–í–û–†–û–¢–ê (0¬∞)")
    print(f"{'='*60}")
    result = debug_find_bottom_left_position(second_polygon, [placed_first], sheet_width_mm, sheet_height_mm)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 90¬∞
    print(f"\n{'='*60}")
    print("–¢–ï–°–¢ –° –ü–û–í–û–†–û–¢–û–ú 90¬∞")
    print(f"{'='*60}")
    second_rotated = rotate_polygon(second_polygon, 90)
    result_90 = debug_find_bottom_left_position(second_rotated, [placed_first], sheet_width_mm, sheet_height_mm)

if __name__ == "__main__":
    debug_find_positions()