#!/usr/bin/env python3
"""Test rotation with realistic bin packing simulation."""

import os
import numpy as np
from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete, rotate_polygon, place_polygon_at_origin, translate_polygon

def test_rotation_realistic():
    """Test with realistic bin packing simulation."""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π bin packing")
    print("=" * 60)
    
    # Find a sample DXF file
    sample_file = None
    dxf_samples_path = "dxf_samples"
    
    if os.path.exists(dxf_samples_path):
        for root, dirs, files in os.walk(dxf_samples_path):
            for file in files:
                if file.lower().endswith('.dxf'):
                    sample_file = os.path.join(root, file)
                    break
            if sample_file:
                break
    
    if not sample_file:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–∑–µ—Ü DXF —Ñ–∞–π–ª–∞")
        return False
    
    print(f"üìÑ –§–∞–π–ª: {os.path.basename(sample_file)}")
    
    # Parse original file
    with open(sample_file, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    if not parsed_data or not parsed_data['combined_polygon']:
        return False
    
    original_polygon = parsed_data['combined_polygon']
    
    print(f"\nüìê –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω:")
    print(f"   ‚Ä¢ –¶–µ–Ω—Ç—Ä–æ–∏–¥: ({original_polygon.centroid.x:.2f}, {original_polygon.centroid.y:.2f})")
    print(f"   ‚Ä¢ –ì—Ä–∞–Ω–∏—Ü—ã: {original_polygon.bounds}")
    
    # Simulate what bin packing algorithm actually does
    angle = 90
    grid_x = 500  # Grid position where we want to place the polygon
    grid_y = 800  
    
    print(f"\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è bin packing —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({grid_x}, {grid_y}) —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º {angle}¬∞:")
    
    # Step 1: Rotate the original polygon (this is what bin packing does first)
    rotated_original = rotate_polygon(original_polygon, angle)
    rotated_bounds = rotated_original.bounds
    print(f"   1. –ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞ {angle}¬∞:")
    print(f"      ‚Ä¢ –¶–µ–Ω—Ç—Ä–æ–∏–¥: ({rotated_original.centroid.x:.2f}, {rotated_original.centroid.y:.2f})")
    print(f"      ‚Ä¢ –ì—Ä–∞–Ω–∏—Ü—ã: {rotated_bounds}")
    
    # Step 2: Translate to grid position (like bin packing does)
    # This is where the bin packing algorithm calculates the translation offset
    translation_x = grid_x - rotated_bounds[0]
    translation_y = grid_y - rotated_bounds[1]
    
    final_polygon = translate_polygon(rotated_original, translation_x, translation_y)
    
    print(f"   2. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é —Å–µ—Ç–∫–∏ ({grid_x}, {grid_y}):")
    print(f"      ‚Ä¢ –°–º–µ—â–µ–Ω–∏–µ: ({translation_x:.2f}, {translation_y:.2f})")
    print(f"      ‚Ä¢ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥: ({final_polygon.centroid.x:.2f}, {final_polygon.centroid.y:.2f})")
    print(f"      ‚Ä¢ –§–∏–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: {final_polygon.bounds}")
    
    # Now create the placed_elements as bin packing would
    # Format: (transformed_polygon, x_offset, y_offset, rotation_angle, filename, color)
    # The x_offset and y_offset are what was used to move from bounds to grid position
    placed_elements = [(final_polygon, translation_x, translation_y, angle, os.path.basename(sample_file), "—Å–µ—Ä—ã–π")]
    
    print(f"\nüì¶ –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
    print(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω: —Ü–µ–Ω—Ç—Ä–æ–∏–¥ ({final_polygon.centroid.x:.2f}, {final_polygon.centroid.y:.2f})")
    print(f"   ‚Ä¢ –°–º–µ—â–µ–Ω–∏—è: ({translation_x:.2f}, {translation_y:.2f})")
    print(f"   ‚Ä¢ –£–≥–æ–ª: {angle}¬∞")
    
    # Create test output
    test_output = "test_realistic_rotation.dxf"
    original_dxf_data_map = {os.path.basename(sample_file): parsed_data}
    sheet_size = (200, 200)  # 200x200 cm sheet
    
    try:
        save_dxf_layout_complete(placed_elements, sheet_size, test_output, original_dxf_data_map)
        
        if os.path.exists(test_output):
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω DXF —Ñ–∞–π–ª: {test_output}")
            
            # Analyze output
            with open(test_output, 'rb') as f:
                output_parsed = parse_dxf_complete(f, verbose=False)
            
            if output_parsed and output_parsed['combined_polygon']:
                output_centroid = output_parsed['combined_polygon'].centroid
                
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥: ({final_polygon.centroid.x:.2f}, {final_polygon.centroid.y:.2f})")
                print(f"   ‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥: ({output_centroid.x:.2f}, {output_centroid.y:.2f})")
                
                # Check difference
                x_diff = abs(output_centroid.x - final_polygon.centroid.x)
                y_diff = abs(output_centroid.y - final_polygon.centroid.y)
                
                print(f"   ‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ({x_diff:.2f}, {y_diff:.2f})")
                
                if x_diff <= 10 and y_diff <= 10:  # 10mm tolerance
                    print(f"   ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
                    return True
                else:
                    print(f"   ‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_rotation_realistic()
    print(f"\n{'üéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!' if success else '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!'}")