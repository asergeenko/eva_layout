#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É bin packing –∏ SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
"""

import tempfile
import os
from layout_optimizer import (
    parse_dxf_complete, 
    bin_packing, 
    save_dxf_layout_complete,
    apply_placement_transform
)

def debug_bin_packing_vs_spline():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É bin packing –∏ SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    print("=== –û–¢–õ–ê–î–ö–ê BIN PACKING VS SPLINE ===")
    
    # –ë–µ—Ä–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    test_file = "/home/sasha/proj/2025/eva_layout/dxf_samples/–õ–æ–¥–∫–∞ –ê–ì–£–õ 270/2.dxf"
    
    print(f"üìÅ –û—Ç–ª–∞–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª: {os.path.basename(test_file)}")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
    with open(test_file, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    original_polygon = parsed_data['combined_polygon']
    real_spline_bounds = parsed_data.get('real_spline_bounds')
    
    print(f"üìä Combined polygon bounds: {original_polygon.bounds}")
    print(f"üìä Real SPLINE bounds: {real_spline_bounds}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    file_name = os.path.basename(test_file)
    color = "—á–µ—Ä–Ω—ã–π"
    sheet_size = (200.0, 140.0)  # —Å–º -> 2000x1400 –º–º
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º bin packing
    polygons = [(original_polygon, file_name, color)]
    placed_elements, rejected_elements = bin_packing(polygons, sheet_size, max_attempts=1000, verbose=True)
    
    if not placed_elements:
        print("‚ùå Bin packing –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª —ç–ª–µ–º–µ–Ω—Ç—ã!")
        return
    
    placed_element = placed_elements[0]
    polygon, x_offset, y_offset, rotation_angle, file_name_result = placed_element[:5]
    
    print(f"\\nüîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç bin packing:")
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–∏–µ: x_offset={x_offset:.2f}, y_offset={y_offset:.2f}, rotation={rotation_angle:.1f}¬∞")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω bounds: {polygon.bounds}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å apply_placement_transform
    expected_polygon = apply_placement_transform(original_polygon, x_offset, y_offset, rotation_angle)
    print(f"\\nüìä apply_placement_transform result:")
    print(f"  Expected bounds: {expected_polygon.bounds}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º bin packing
    placed_bounds = polygon.bounds
    expected_bounds = expected_polygon.bounds
    
    bounds_match = all(abs(placed_bounds[i] - expected_bounds[i]) < 1.0 for i in range(4))
    
    if bounds_match:
        print(f"  ‚úÖ Bin packing –∏ apply_placement_transform –°–û–í–ü–ê–î–ê–Æ–¢")
    else:
        diff = [placed_bounds[i] - expected_bounds[i] for i in range(4)]
        print(f"  ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: {diff}")
    
    # –¢–µ–ø–µ—Ä—å –∏–º–∏—Ç–∏—Ä—É–µ–º SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
    print(f"\\nüîß –ò–º–∏—Ç–∞—Ü–∏—è SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π SPLINE
    spline_entities = [e for e in parsed_data['original_entities'] if e['type'] == 'SPLINE']
    if not spline_entities:
        print("  ‚ùå –ù–µ—Ç SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤!")
        return
    
    first_spline = spline_entities[0]
    entity = first_spline['entity']
    control_points = entity.control_points
    
    if not control_points:
        print("  ‚ùå –ù–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫!")
        return
    
    # –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    cp = control_points[0]
    if hasattr(cp, 'x') and hasattr(cp, 'y'):
        x_orig, y_orig = cp.x, cp.y
    elif len(cp) >= 2:
        x_orig, y_orig = float(cp[0]), float(cp[1])
    else:
        print("  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ—á–∫–∏!")
        return
    
    print(f"  –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ SPLINE: ({x_orig:.2f}, {y_orig:.2f})")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ –≤ –∫–æ–¥–µ
    if real_spline_bounds:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º real_spline_bounds
        norm_bounds = real_spline_bounds
        print(f"  –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ real_spline_bounds: {norm_bounds}")
    else:
        # Fallback –∫ combined polygon bounds
        norm_bounds = original_polygon.bounds
        print(f"  –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ combined bounds: {norm_bounds}")
    
    # Step 1: Normalize to origin
    x_norm = x_orig - norm_bounds[0]
    y_norm = y_orig - norm_bounds[1]
    print(f"  –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: ({x_norm:.2f}, {y_norm:.2f})")
    
    # Step 2: Skip rotation (rotation_angle = 0)
    
    # Step 3: Apply final position  
    x_final = x_norm + x_offset
    y_final = y_norm + y_offset
    print(f"  –ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: ({x_final:.2f}, {y_final:.2f})")
    
    # –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ apply_placement_transform
    combined_bounds = original_polygon.bounds
    x_norm_expected = x_orig - combined_bounds[0]
    y_norm_expected = y_orig - combined_bounds[1]
    x_final_expected = x_norm_expected + x_offset
    y_final_expected = y_norm_expected + y_offset
    print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è (apply_placement_transform): ({x_final_expected:.2f}, {y_final_expected:.2f})")
    
    # –†–∞–∑–Ω–æ—Å—Ç—å
    diff_x = x_final - x_final_expected
    diff_y = y_final - y_final_expected
    print(f"  –†–∞–∑–Ω–æ—Å—Ç—å SPLINE vs Expected: ({diff_x:.2f}, {diff_y:.2f})")
    
    if abs(diff_x) < 0.1 and abs(diff_y) < 0.1:
        print(f"  ‚úÖ SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    else:
        print(f"  ‚ùå SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ù–ï–ö–û–†–†–ï–ö–¢–ù–ê!")
        
        if norm_bounds != combined_bounds:
            print(f"  üí° –ü—Ä–∏—á–∏–Ω–∞: –†–∞–∑–Ω—ã–µ bounds –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏!")
            print(f"     SPLINE –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {norm_bounds}")
            print(f"     Expected –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {combined_bounds}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç save_dxf_layout_complete
    print(f"\\nüíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º save_dxf_layout_complete:")
    
    original_dxf_data_map = {file_name: parsed_data}
    
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        save_dxf_layout_complete(placed_elements, sheet_size, output_path, original_dxf_data_map)
        
        import ezdxf
        result_doc = ezdxf.readfile(output_path)
        result_msp = result_doc.modelspace()
        
        splines = [e for e in result_msp if e.dxftype() == 'SPLINE']
        print(f"  SPLINE'–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(splines)}")
        
        if splines:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –ø–µ—Ä–≤–æ–≥–æ SPLINE
            first_result_spline = splines[0]
            result_cp = first_result_spline.control_points[0]
            
            if hasattr(result_cp, 'x') and hasattr(result_cp, 'y'):
                x_result, y_result = result_cp.x, result_cp.y
            elif len(result_cp) >= 2:
                x_result, y_result = float(result_cp[0]), float(result_cp[1])
            else:
                print("  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π —Ç–æ—á–∫–∏!")
                return
            
            print(f"  –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ DXF: ({x_result:.2f}, {y_result:.2f})")
            print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è: ({x_final_expected:.2f}, {y_final_expected:.2f})")
            
            diff_real_x = x_result - x_final_expected
            diff_real_y = y_result - y_final_expected
            print(f"  –†–∞–∑–Ω–æ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è vs –æ–∂–∏–¥–∞–µ–º–∞—è: ({diff_real_x:.2f}, {diff_real_y:.2f})")
            
            if abs(diff_real_x) < 1.0 and abs(diff_real_y) < 1.0:
                print(f"  ‚úÖ DXF —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ö–û–†–†–ï–ö–¢–ï–ù!")
            else:
                print(f"  ‚ùå DXF —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ù–ï–ö–û–†–†–ï–ö–¢–ï–ù!")
                print(f"  üîç –ü—Ä–æ–±–ª–µ–º–∞ –≤ save_dxf_layout_complete")
        
    finally:
        if os.path.exists(output_path):
            os.unlink(output_path)

if __name__ == "__main__":
    print("üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É bin packing –∏ SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
    print("=" * 70)
    
    debug_bin_packing_vs_spline()
    
    print("\\n" + "=" * 70)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")