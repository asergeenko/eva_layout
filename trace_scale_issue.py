#!/usr/bin/env python3
"""
–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≥–¥–µ —Ç–µ—Ä—è–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–± –æ–±—ä–µ–∫—Ç–æ–≤
"""

import sys
import os
import glob
sys.path.insert(0, '.')

import ezdxf
from layout_optimizer import parse_dxf_complete, convert_entity_to_polygon_improved
from shapely.geometry import Polygon
from shapely.affinity import scale, translate

def trace_scale_issue():
    """–ü—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–µ—Å—å –ø—É—Ç—å –æ–±—ä–µ–∫—Ç–∞ –æ—Ç DXF –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    print("üîç –¢–†–ê–°–°–ò–†–û–í–ö–ê –ú–ê–°–®–¢–ê–ë–ê –û–ë–™–ï–ö–¢–û–í")
    print("=" * 60)
    
    tank_file = "dxf_samples/TANK 300/1.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {tank_file}")
    
    # –®–ê–ì 1: –ß–∏—Ç–∞–µ–º DXF –Ω–∞–ø—Ä—è–º—É—é
    print(f"\nüìã –®–ê–ì 1: –ü–†–Ø–ú–û–ï –ß–¢–ï–ù–ò–ï DXF")
    try:
        doc = ezdxf.readfile(tank_file)
        modelspace = doc.modelspace()
        entities = list(modelspace)
        
        print(f"–í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {len(entities)}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≥–∞–±–∞—Ä–∏—Ç—ã –ø–µ—Ä–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
        first_entity = None
        for entity in entities:
            try:
                bbox = entity.bbox()
                if bbox:
                    width = bbox.extmax.x - bbox.extmin.x
                    height = bbox.extmax.y - bbox.extmin.y
                    print(f"–ü–µ—Ä–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å ({entity.dxftype()}): {width:.2f}√ó{height:.2f} –µ–¥–∏–Ω–∏—Ü")
                    first_entity = entity
                    break
            except:
                continue
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DXF: {e}")
        return
    
    # –®–ê–ì 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ convert_entity_to_polygon_improved
    print(f"\nüîÑ –®–ê–ì 2: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í –ü–û–õ–ò–ì–û–ù")
    if first_entity:
        try:
            polygon = convert_entity_to_polygon_improved(first_entity)
            if polygon:
                bounds = polygon.bounds
                width = bounds[2] - bounds[0]
                height = bounds[3] - bounds[1]
                print(f"–ü–æ—Å–ª–µ convert_entity_to_polygon_improved: {width:.2f}√ó{height:.2f} –µ–¥–∏–Ω–∏—Ü")
                print(f"–ü–ª–æ—â–∞–¥—å: {polygon.area:.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏
                print(f"Bounds: {bounds}")
            else:
                print("‚ùå convert_entity_to_polygon_improved –≤–µ—Ä–Ω—É–ª None")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
    
    # –®–ê–ì 3: –ü–æ–ª–Ω—ã–π parse_dxf_complete
    print(f"\nüì¶ –®–ê–ì 3: –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì parse_dxf_complete")
    try:
        result = parse_dxf_complete(tank_file)
        polygons = result['polygons']
        
        if polygons:
            poly = polygons[0]
            bounds = poly.bounds
            width = bounds[2] - bounds[0]
            height = bounds[3] - bounds[1]
            print(f"–ü–æ—Å–ª–µ parse_dxf_complete: {width:.2f}√ó{height:.2f} –µ–¥–∏–Ω–∏—Ü")
            print(f"–ü–ª–æ—â–∞–¥—å: {poly.area:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã parse_dxf_complete
            if 'bounds' in result:
                file_bounds = result['bounds']
                file_width = file_bounds[2] - file_bounds[0]
                file_height = file_bounds[3] - file_bounds[1]
                print(f"–û–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã —Ñ–∞–π–ª–∞: {file_width:.2f}√ó{file_height:.2f}")
                
        else:
            print("‚ùå parse_dxf_complete –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–∏–≥–æ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ parse_dxf_complete: {e}")
        import traceback
        traceback.print_exc()
    
    # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
    print(f"\nüîç –®–ê–ì 4: –ü–û–ò–°–ö –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø –í –ö–û–î–ï")
    
    # –ò—â–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    import layout_optimizer
    import inspect
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä
    functions_to_check = [
        'convert_entity_to_polygon_improved',
        'parse_dxf_complete', 
        'place_polygon_at_origin',
        'scale_polygons_to_fit'
    ]
    
    for func_name in functions_to_check:
        if hasattr(layout_optimizer, func_name):
            func = getattr(layout_optimizer, func_name)
            source = inspect.getsource(func)
            
            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            scale_keywords = ['scale', 'Scale', 'SCALE', '*', 'multiply', 'transform', '/10', '*10']
            found_scaling = []
            
            for keyword in scale_keywords:
                if keyword in source:
                    lines = source.split('\n')
                    for i, line in enumerate(lines):
                        if keyword in line:
                            found_scaling.append(f"  –°—Ç—Ä–æ–∫–∞ {i+1}: {line.strip()}")
            
            if found_scaling:
                print(f"\n‚ö†Ô∏è –í —Ñ—É–Ω–∫—Ü–∏–∏ {func_name} –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:")
                for scale_line in found_scaling[:3]:  # –ø–µ—Ä–≤—ã–µ 3
                    print(scale_line)
            else:
                print(f"‚úÖ –í —Ñ—É–Ω–∫—Ü–∏–∏ {func_name} –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    trace_scale_issue()