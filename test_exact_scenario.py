#!/usr/bin/env python3

from pathlib import Path
from layout_optimizer import parse_dxf_complete, Carpet, bin_packing_with_inventory

def test_exact_scenario():
    """Exact test as described: 140x200 sheet, 1 priority1 + 10 priority2 of same DXF."""
    
    # Create sheet exactly as described
    available_sheets = [{
        "name": "–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
        "width": 140,
        "height": 200,
        "color": "—á—ë—Ä–Ω—ã–π", 
        "count": 20,
        "used": 0
    }]

    # Load exact file as specified
    dxf_path = "dxf_samples/–î–ï–ö–ê KUGOO M4 PRO JILONG/1.dxf"
    
    try:
        polygon_data = parse_dxf_complete(dxf_path, verbose=False)
        if not polygon_data or not polygon_data.get("combined_polygon"):
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {dxf_path}")
            return False
            
        base_polygon = polygon_data["combined_polygon"]
        
        # Get polygon dimensions for analysis
        bounds = base_polygon.bounds
        width_mm = bounds[2] - bounds[0]
        height_mm = bounds[3] - bounds[1]
        area_mm2 = base_polygon.area
        
        print(f"üìê –†–∞–∑–º–µ—Ä—ã –ø–æ–ª–∏–≥–æ–Ω–∞: {width_mm:.1f} x {height_mm:.1f} –º–º, –ø–ª–æ—â–∞–¥—å: {area_mm2:.0f} –º–º¬≤")
        
        all_polygons = []
        
        # Add 1 copy with priority 1
        all_polygons.append(Carpet(base_polygon, "1.dxf_priority1", "—á—ë—Ä–Ω—ã–π", "group_1", 1))
        
        # Add 10 copies with priority 2  
        for i in range(1, 11):
            all_polygons.append(Carpet(base_polygon, f"1.dxf_priority2_–∫–æ–ø–∏—è_{i}", "—á—ë—Ä–Ω—ã–π", "group_1", 2))
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_path}: {e}")
        return False

    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_polygons)} –∫–æ–≤—Ä–æ–≤:")
    print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: 1 –∫–æ–ø–∏—è")
    print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: 10 –∫–æ–ø–∏–π")
    
    # Calculate theoretical capacity
    sheet_area_mm2 = (140 * 10) * (200 * 10)  # Convert cm to mm
    theoretical_capacity = int(sheet_area_mm2 / area_mm2)
    print(f"üìä –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ª–∏—Å—Ç–∞: {theoretical_capacity} –∫–æ–≤—Ä–æ–≤")
    
    # Run placement
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons,
        available_sheets,
        verbose=True,
    )

    # Analyze results
    actual_placed_count = len(all_polygons) - len(unplaced)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
    print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {actual_placed_count}/{len(all_polygons)}")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"   –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")
    
    # Count by priority
    priority1_placed = 0
    priority2_placed = 0
    priority1_unplaced = 0
    priority2_unplaced = 0
    
    # Count placed
    for layout in placed_layouts:
        for placed_tuple in layout['placed_polygons']:
            for carpet in all_polygons:
                if (carpet.polygon, carpet.filename, carpet.color, carpet.order_id) == placed_tuple:
                    if carpet.priority == 1:
                        priority1_placed += 1
                    elif carpet.priority == 2:
                        priority2_placed += 1
                    break
    
    # Count unplaced  
    for unplaced_tuple in unplaced:
        for carpet in all_polygons:
            if (carpet.polygon, carpet.filename, carpet.color, carpet.order_id) == unplaced_tuple:
                if carpet.priority == 1:
                    priority1_unplaced += 1
                elif carpet.priority == 2:
                    priority2_unplaced += 1
                break
    
    print(f"\nüìä –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
    print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: {priority1_placed} —Ä–∞–∑–º–µ—â–µ–Ω–æ, {priority1_unplaced} –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö")  
    print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: {priority2_placed} —Ä–∞–∑–º–µ—â–µ–Ω–æ, {priority2_unplaced} –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö")
    
    if len(placed_layouts) > 0:
        print(f"\nüìÑ –î–ï–¢–ê–õ–ò –ü–û –õ–ò–°–¢–ê–ú:")
        for i, layout in enumerate(placed_layouts, 1):
            carpet_count = len(layout['placed_polygons'])
            usage = layout.get('usage_percent', 0)
            print(f"   –õ–∏—Å—Ç {i}: {carpet_count} –∫–æ–≤—Ä–∏–∫–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
    
    # Expected result: all should fit if theoretical capacity allows
    expected_to_fit = min(len(all_polygons), theoretical_capacity)
    success = actual_placed_count >= expected_to_fit and priority2_placed > 0
    
    print(f"\n‚úÖ –¢–µ—Å—Ç {'–ü–†–û–®–ï–õ' if success else '–ù–ï –ü–†–û–®–ï–õ'}")
    
    if not success:
        print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê:")
        if priority2_placed == 0:
            print("   –ù–∏ –æ–¥–∏–Ω –∫–æ–≤–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω!")
        if actual_placed_count < expected_to_fit:
            print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ {actual_placed_count} –∏–∑ {expected_to_fit} –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–æ–≤—Ä–æ–≤")
    
    return success

if __name__ == "__main__":
    test_exact_scenario()