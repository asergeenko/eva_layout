#!/usr/bin/env python3
"""
–ò—Å—Å–ª–µ–¥—É–µ–º –∫–∞–∫ parse_dxf_complete —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª–∏–≥–æ–Ω—ã –ø–æ —Å–ª–æ—è–º
"""

import sys
sys.path.insert(0, '.')

import ezdxf
from layout_optimizer import convert_entity_to_polygon_improved
import os
from collections import defaultdict

def debug_layers():
    """–ò—Å—Å–ª–µ–¥—É–µ–º —Å–ª–æ–∏ –∏ –∏—Ö –ø–æ–ª–∏–≥–æ–Ω—ã"""
    print("üîç –û–¢–õ–ê–î–ö–ê –°–õ–û–ï–í –í TANK FILE")
    print("=" * 60)
    
    tank_file = "dxf_samples/TANK 300/1.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        doc = ezdxf.readfile(tank_file)
        modelspace = doc.modelspace()
        
        layer_polygons = defaultdict(list)
        layer_entities = defaultdict(list)
        layer_appearance_order = {}
        
        print(f"\nüìã –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ö–¢–û–í –ü–û –°–õ–û–Ø–ú:")
        
        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ª–æ—è–º
        for i, entity in enumerate(modelspace):
            entity_type = entity.dxftype()
            layer = getattr(entity.dxf, 'layer', '0')
            
            layer_entities[layer].append({
                'entity': entity,
                'type': entity_type,
                'index': i
            })
            
            if layer not in layer_appearance_order:
                layer_appearance_order[layer] = i
                
            polygon = convert_entity_to_polygon_improved(entity)
            if polygon and not polygon.is_empty:
                layer_polygons[layer].append(polygon)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–µ–≤: {len(layer_entities)}")
        for layer_name in sorted(layer_entities.keys()):
            entities = layer_entities[layer_name]
            polygons = layer_polygons[layer_name]
            appearance = layer_appearance_order.get(layer_name, 'N/A')
            
            print(f"\n  –°–õ–û–ô '{layer_name}' (–ø–æ—è–≤–∏–ª—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {appearance}):")
            print(f"    –û–±—ä–µ–∫—Ç–æ–≤: {len(entities)}")
            print(f"    –í–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(polygons)}")
            
            # –†–∞–∑–º–µ—Ä—ã –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ —ç—Ç–æ–º —Å–ª–æ–µ
            if polygons:
                total_area = sum(p.area for p in polygons)
                all_x = []
                all_y = []
                for poly in polygons:
                    bounds = poly.bounds
                    all_x.extend([bounds[0], bounds[2]])
                    all_y.extend([bounds[1], bounds[3]])
                
                layer_width = max(all_x) - min(all_x)
                layer_height = max(all_y) - min(all_y)
                print(f"    –ì–∞–±–∞—Ä–∏—Ç—ã —Å–ª–æ—è: {layer_width:.3f}√ó{layer_height:.3f}")
                print(f"    –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {total_area:.1f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–µ—Ä–≤—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
                for j, poly in enumerate(polygons[:3]):
                    bounds = poly.bounds
                    width = bounds[2] - bounds[0]
                    height = bounds[3] - bounds[1]
                    print(f"      –ü–æ–ª–∏–≥–æ–Ω {j+1}: {width:.3f}√ó{height:.3f}")
            
            # –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ª–æ–µ
            entity_types = {}
            for entity_data in entities:
                et = entity_data['type']
                entity_types[et] = entity_types.get(et, 0) + 1
            
            print(f"    –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤: {entity_types}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º outer_layer —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ parse_dxf_complete
        print(f"\nüéØ –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê OUTER LAYER:")
        
        bottom_layer = None
        min_appearance = float('inf')
        for layer_name, polygons in layer_polygons.items():
            if polygons and layer_appearance_order.get(layer_name, float('inf')) < min_appearance:
                min_appearance = layer_appearance_order[layer_name]
                bottom_layer = layer_name
        
        outer_layer = bottom_layer
        
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π outer_layer: '{outer_layer}' (–ø–æ–∑–∏—Ü–∏—è: {min_appearance})")
        
        if outer_layer and layer_polygons[outer_layer]:
            selected_polygons = layer_polygons[outer_layer]
            print(f"–ü–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ª–æ–µ: {len(selected_polygons)}")
            
            # –†–∞–∑–º–µ—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—è
            if selected_polygons:
                all_x = []
                all_y = []
                for poly in selected_polygons:
                    bounds = poly.bounds
                    all_x.extend([bounds[0], bounds[2]])
                    all_y.extend([bounds[1], bounds[3]])
                
                selected_width = max(all_x) - min(all_x)
                selected_height = max(all_y) - min(all_y)
                print(f"–ì–∞–±–∞—Ä–∏—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—è: {selected_width:.3f}√ó{selected_height:.3f}")
        
        print(f"\nüí° –í–´–í–û–î:")
        print(f"parse_dxf_complete –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ª–æ–π '{outer_layer}', –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏!")
        print(f"–ü–æ—ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—ã –∫–∞–∂—É—Ç—Å—è –º–∞–ª–µ–Ω—å–∫–∏–º–∏ - –±–µ—Ä–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –≤—Å–µ–≥–æ DXF —Ñ–∞–π–ª–∞!")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_layers()