#!/usr/bin/env python3

"""
–¢–µ—Å—Ç IMAGE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Streamlit
"""

import sys
import os
import pandas as pd
sys.path.append('.')

from layout_optimizer import (
    parse_dxf_complete, 
    bin_packing_with_inventory,
    save_dxf_layout_complete,
    get_color_for_file
)

def load_real_excel_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –∫–∞–∫ –≤ Streamlit"""
    
    excel_file = "13.08 –≤–µ—á–µ—Ä.xlsx"
    if not os.path.exists(excel_file):
        print(f"‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
        return None, None
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏–∑ –ª–∏—Å—Ç–∞ "ZAKAZ" –∫–∞–∫ –≤ Streamlit
        df = pd.read_excel(excel_file, sheet_name="ZAKAZ")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω Excel: {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∫ –≤ Streamlit)
        df_filtered = df[df['–ó–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç–µ'] == '–¥–∞'].copy()
        print(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(df_filtered)} –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ")
        
        return df_filtered, excel_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
        return None, None

def test_real_image_transformation():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Excel"""
    
    print("=== –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô IMAGE –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel –¥–∞–Ω–Ω—ã–µ
    df, excel_file = load_real_excel_data()
    if df is None:
        return
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    df_sample = df.head(3)  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞
    
    print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {len(df_sample)} –∑–∞–∫–∞–∑–∞–º–∏:")
    for idx, row in df_sample.iterrows():
        print(f"  - {row['–ó–∞–∫–∞–∑—á–∏–∫/–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']}: {row['DXF —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è']}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º DXF –¥–∞–Ω–Ω—ã–µ
    original_dxf_data_map = {}
    polygons_for_placement = []
    
    for idx, row in df_sample.iterrows():
        dxf_filename = row['DXF —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è']
        customer_name = row['–ó–∞–∫–∞–∑—á–∏–∫/–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']
        color = row['–¶–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞']
        quantity = int(row['–ö–æ–ª-–≤–æ'])
        
        # –ü—É—Ç—å –∫ DXF —Ñ–∞–π–ª—É
        dxf_path = f"dxf_samples/{customer_name}/{dxf_filename}"
        
        if os.path.exists(dxf_path):
            try:
                print(f"\n–ó–∞–≥—Ä—É–∂–∞–µ–º {dxf_path}...")
                dxf_data = parse_dxf_complete(dxf_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π
                image_count = sum(1 for ed in dxf_data['original_entities'] if ed['type'] == 'IMAGE')
                print(f"  IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π: {image_count}")
                
                original_dxf_data_map[dxf_path] = dxf_data
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                polygon = dxf_data['combined_polygon']
                if polygon:
                    for q in range(quantity):
                        order_id = f"{customer_name}_{dxf_filename}_{q+1}"
                        polygons_for_placement.append((polygon, dxf_filename, color, order_id))
                        
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_path}: {e}")
        else:
            print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {dxf_path}")
    
    if not polygons_for_placement:
        print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return
    
    print(f"\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(polygons_for_placement)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    sheet_size = (1400, 2000)  # 140x200 —Å–º
    available_sheets = [
        {'width': sheet_size[0], 'height': sheet_size[1], 'count': 10, 'used': 0, 'color': '—á–µ—Ä–Ω—ã–π'}
    ]
    
    print(f"\n–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ...")
    try:
        layouts, unplaced = bin_packing_with_inventory(
            polygons_for_placement,
            available_sheets,
            verbose=False  # –û—Ç–∫–ª—é—á–∞–µ–º verbose –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
        )
        
        if layouts:
            layout = layouts[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
            print(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ {len(layout['placed_polygons'])} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–µ")
            
            # –í—ã–∑—ã–≤–∞–µ–º save_dxf_layout_complete
            output_file = "test_real_image_fix.dxf"
            
            print(f"\n–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ DXF —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π IMAGE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π...")
            save_dxf_layout_complete(
                layout['placed_polygons'], 
                layout['sheet_size'], 
                output_file, 
                original_dxf_data_map
            )
            
            print(f"‚úÖ DXF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            import ezdxf
            doc = ezdxf.readfile(output_file)
            msp = doc.modelspace()
            
            image_entities = [e for e in msp if e.dxftype() == 'IMAGE']
            print(f"\n–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            print(f"  IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(image_entities)}")
            
            in_bounds_count = 0
            for i, img in enumerate(image_entities):
                if hasattr(img.dxf, 'insert'):
                    pos = img.dxf.insert
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏ –ª–∏—Å—Ç–∞
                    if 0 <= pos[0] <= sheet_size[0] and 0 <= pos[1] <= sheet_size[1]:
                        in_bounds_count += 1
                        status = "‚úÖ"
                    else:
                        status = "‚ùå"
                    
                    print(f"  IMAGE {i+1}: {status} –ø–æ–∑–∏—Ü–∏—è ({pos[0]:.1f}, {pos[1]:.1f})")
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –í—Å–µ–≥–æ IMAGE: {len(image_entities)}")
            print(f"  –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞: {in_bounds_count}")
            print(f"  –í–Ω–µ –ø—Ä–µ–¥–µ–ª–æ–≤: {len(image_entities) - in_bounds_count}")
            
            if in_bounds_count == len(image_entities):
                print(f"üéâ –í—Å–µ IMAGE —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö!")
            else:
                print(f"‚ö†Ô∏è  {len(image_entities) - in_bounds_count} IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π –≤–Ω–µ –ª–∏—Å—Ç–∞")
                
        else:
            print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_real_image_transformation()