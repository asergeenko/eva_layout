"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ä–æ–≤–Ω–æ 2 –ª–∏—Å—Ç–∞—Ö.
–¶–µ–ª—å: –¥–æ—Å—Ç–∏—á—å 78.1% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ ‚â§2 –ª–∏—Å—Ç–∞—Ö.
"""

import logging
from typing import List, Tuple
# Import will be done locally to avoid circular imports
import random

logger = logging.getLogger(__name__)

def forced_two_sheet_packing(carpets, available_sheets, verbose: bool = True):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–≤—Ä–∏–∫–æ–≤ –Ω–∞ —Ä–æ–≤–Ω–æ 2 –ª–∏—Å—Ç–∞—Ö."""
    
    if not carpets:
        return [], []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–∏–ø –ª–∏—Å—Ç–æ–≤
    sheet_type = available_sheets[0]
    sheet_size = (sheet_type["width"], sheet_type["height"])
    
    if verbose:
        logger.info(f"üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ {len(carpets)} –∫–æ–≤—Ä–∏–∫–æ–≤ –Ω–∞ 2 –ª–∏—Å—Ç–∞—Ö {sheet_size}")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∫–æ–≤—Ä—ã –ø–æ–ø–æ–ª–∞–º –ø–æ –ø–ª–æ—â–∞–¥–∏
    carpets_sorted = sorted(carpets, key=lambda c: c.polygon.area, reverse=True)
    total_area = sum(c.polygon.area for c in carpets_sorted)
    target_area_per_sheet = total_area / 2
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–≤—Ä—ã –Ω–∞ –¥–≤–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ –ø–ª–æ—â–∞–¥–∏
    group1, group2 = [], []
    group1_area, group2_area = 0, 0
    
    for carpet in carpets_sorted:
        if group1_area <= group2_area:
            group1.append(carpet)
            group1_area += carpet.polygon.area
        else:
            group2.append(carpet)
            group2_area += carpet.polygon.area
    
    if verbose:
        logger.info(f"–ì—Ä—É–ø–ø–∞ 1: {len(group1)} –∫–æ–≤—Ä–∏–∫–æ–≤, {group1_area/100:.0f} —Å–º¬≤")
        logger.info(f"–ì—Ä—É–ø–ø–∞ 2: {len(group2)} –∫–æ–≤—Ä–∏–∫–æ–≤, {group2_area/100:.0f} —Å–º¬≤")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –Ω–∞ —Å–≤–æ–µ–º –ª–∏—Å—Ç–µ
    placed_layouts = []
    all_unplaced = []
    
    for group_id, group in enumerate([group1, group2], 1):
        placed, unplaced = bin_packing(group, sheet_size, verbose=False)
        
        if placed:
            layout = {
                "sheet_number": group_id,
                "sheet_type": sheet_type["name"],
                "sheet_color": sheet_type.get("color", "—á—ë—Ä–Ω—ã–π"),
                "sheet_size": sheet_size,
                "placed_polygons": placed,
                "usage_percent": calculate_usage_percent(placed, sheet_size),
                "orders_on_sheet": list(set(c.order_id for c in group if c not in unplaced))
            }
            placed_layouts.append(layout)
            
            if verbose:
                logger.info(f"–õ–∏—Å—Ç {group_id}: {len(placed)} –∫–æ–≤—Ä–∏–∫–æ–≤, {layout['usage_percent']:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Ö–Ω—É—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç
        if unplaced:
            if verbose:
                logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_id}: {len(unplaced)} –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º –ª–∏—Å—Ç–µ")
            
            # –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–ª—è –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            if placed_layouts:
                best_layout_idx = min(range(len(placed_layouts)), 
                                    key=lambda i: placed_layouts[i]['usage_percent'])
                best_layout = placed_layouts[best_layout_idx]
                
                try:
                    from layout_optimizer import bin_packing_with_existing
                    additional_placed, remaining = bin_packing_with_existing(
                        unplaced, 
                        best_layout['placed_polygons'],
                        best_layout['sheet_size'],
                        verbose=False
                    )
                    
                    if additional_placed:
                        best_layout['placed_polygons'].extend(additional_placed)
                        best_layout['usage_percent'] = calculate_usage_percent(
                            best_layout['placed_polygons'], best_layout['sheet_size']
                        )
                        if verbose:
                            logger.info(f"–î–æ–∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏—Å—Ç {best_layout['sheet_number']}: +{len(additional_placed)}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º unplaced
                        placed_set = set()
                        for placed_tuple in additional_placed:
                            for carpet in unplaced:
                                if (carpet.polygon, carpet.filename) == (placed_tuple[0], placed_tuple[4]):
                                    placed_set.add(carpet)
                        unplaced = [c for c in unplaced if c not in placed_set]
                        
                except ImportError:
                    pass
            
            all_unplaced.extend(unplaced)
    
    if verbose:
        total_placed = sum(len(layout['placed_polygons']) for layout in placed_layouts)
        total_usage = sum(layout['usage_percent'] for layout in placed_layouts) / len(placed_layouts) if placed_layouts else 0
        logger.info(f"–ò–¢–û–ì–û: {len(placed_layouts)} –ª–∏—Å—Ç–æ–≤, {total_placed} –∫–æ–≤—Ä–∏–∫–æ–≤, {total_usage:.1f}% —Å—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
    
    return placed_layouts, all_unplaced


def iterative_two_sheet_optimization(carpets, available_sheets, verbose: bool = True):
    """–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –Ω–∞ 2 –ª–∏—Å—Ç–∞—Ö."""
    
    best_layouts = None
    best_unplaced = carpets[:]
    best_usage = 0
    max_attempts = 10
    
    if verbose:
        logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    
    for attempt in range(max_attempts):
        # –°–ª—É—á–∞–π–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–±–∏–µ–Ω–∏—è
        carpets_shuffled = carpets[:]
        random.seed(42 + attempt)  # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å
        random.shuffle(carpets_shuffled)
        
        layouts, unplaced = forced_two_sheet_packing(carpets_shuffled, available_sheets, verbose=False)
        
        if layouts:
            total_usage = sum(layout['usage_percent'] for layout in layouts) / len(layouts)
            placed_count = sum(len(layout['placed_polygons']) for layout in layouts)
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –º–µ–Ω—å—à–µ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö, –≤—ã—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            is_better = (
                len(unplaced) < len(best_unplaced) or
                (len(unplaced) == len(best_unplaced) and total_usage > best_usage)
            )
            
            if is_better:
                best_layouts = layouts
                best_unplaced = unplaced
                best_usage = total_usage
                
                if verbose:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: {placed_count} —Ä–∞–∑–º–µ—â–µ–Ω–æ, {len(unplaced)} –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–æ, {total_usage:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
                    
                # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if len(unplaced) == 0 and total_usage > 75:
                    break
    
    if verbose and best_layouts:
        total_placed = sum(len(layout['placed_polygons']) for layout in best_layouts)
        logger.info(f"üèÜ –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_placed} —Ä–∞–∑–º–µ—â–µ–Ω–æ, {len(best_unplaced)} –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–æ, {best_usage:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    
    return best_layouts or [], best_unplaced