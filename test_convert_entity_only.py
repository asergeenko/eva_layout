#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ convert_entity_to_polygon_improved - –±–µ–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import sys
sys.path.insert(0, '.')

import ezdxf
from layout_optimizer import convert_entity_to_polygon_improved
import os

def test_convert_entity_only():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ convert_entity_to_polygon_improved"""
    print("üîç –¢–ï–°–¢ –¢–û–õ–¨–ö–û convert_entity_to_polygon_improved")
    print("=" * 60)
    
    tank_file = "dxf_samples/TANK 300/1.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        doc = ezdxf.readfile(tank_file)
        modelspace = doc.modelspace()
        
        print(f"üìã –ò–°–•–û–î–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´ VS convert_entity_to_polygon_improved")
        
        for i, entity in enumerate(modelspace):
            if i >= 3:  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                break
                
            entity_type = entity.dxftype()
            print(f"\n  === –û–ë–™–ï–ö–¢ {i+1}: {entity_type} ===")
            
            # –ò–°–•–û–î–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´
            if entity_type == 'SPLINE':
                if hasattr(entity, 'control_points') and entity.control_points:
                    cp = entity.control_points[0]
                    if hasattr(cp, 'x'):
                        print(f"    –ò—Å—Ö–æ–¥–Ω–∞—è –ø–µ—Ä–≤–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: ({cp.x:.3f}, {cp.y:.3f})")
                    else:
                        print(f"    –ò—Å—Ö–æ–¥–Ω–∞—è –ø–µ—Ä–≤–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: ({cp[0]:.3f}, {cp[1]:.3f})")
            
            # –ß–ï–†–ï–ó convert_entity_to_polygon_improved
            polygon = convert_entity_to_polygon_improved(entity)
            if polygon and not polygon.is_empty:
                bounds = polygon.bounds
                width = bounds[2] - bounds[0]
                height = bounds[3] - bounds[1]
                print(f"    –ü–æ—Å–ª–µ convert_entity_to_polygon_improved: {width:.3f}√ó{height:.3f}")
                print(f"    Bounds: ({bounds[0]:.3f}, {bounds[1]:.3f}, {bounds[2]:.3f}, {bounds[3]:.3f})")
                
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
                coords = list(polygon.exterior.coords)
                if coords:
                    print(f"    –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–∞: ({coords[0][0]:.3f}, {coords[0][1]:.3f})")
                    
                    # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï
                    if entity_type == 'SPLINE' and hasattr(entity, 'control_points'):
                        orig_cp = entity.control_points[0]
                        if hasattr(orig_cp, 'x'):
                            orig_x, orig_y = orig_cp.x, orig_cp.y
                        else:
                            orig_x, orig_y = orig_cp[0], orig_cp[1]
                        
                        poly_x, poly_y = coords[0][0], coords[0][1]
                        
                        if abs(orig_x - poly_x) > 0.001 or abs(orig_y - poly_y) > 0.001:
                            print(f"    ‚ö†Ô∏è –ö–û–û–†–î–ò–ù–ê–¢–´ –ò–ó–ú–ï–ù–ò–õ–ò–°–¨!")
                            print(f"      –ò—Å—Ö–æ–¥–Ω—ã–µ: ({orig_x:.3f}, {orig_y:.3f})")  
                            print(f"      –í –ø–æ–ª–∏–≥–æ–Ω–µ: ({poly_x:.3f}, {poly_y:.3f})")
                            
                            scale_x = poly_x / orig_x if orig_x != 0 else 1
                            scale_y = poly_y / orig_y if orig_y != 0 else 1
                            print(f"      –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: X={scale_x:.6f}, Y={scale_y:.6f}")
                        else:
                            print(f"    ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
            else:
                print(f"    ‚ùå convert_entity_to_polygon_improved –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç–æ–π –ø–æ–ª–∏–≥–æ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_convert_entity_only()