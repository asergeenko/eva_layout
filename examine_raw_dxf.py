#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ DXF —Ñ–∞–π–ª–µ - –º–æ–∂–µ—Ç –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –±–æ–ª—å—à–∏–µ?
"""

import sys
sys.path.insert(0, '.')

import ezdxf
import os

def examine_raw_dxf():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ä—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ DXF"""
    print("üîç –ê–ù–ê–õ–ò–ó –°–´–†–´–• –ö–û–û–†–î–ò–ù–ê–¢ –í DXF")
    print("=" * 50)
    
    tank_file = "dxf_samples/TANK 300/1.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        doc = ezdxf.readfile(tank_file)
        modelspace = doc.modelspace()
        
        print(f"üìê HEADER –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        if '$INSUNITS' in doc.header:
            units = doc.header['$INSUNITS']
            units_map = {0: 'Unitless', 1: 'Inches', 2: 'Feet', 4: 'Millimeters', 5: 'Centimeters', 6: 'Meters'}
            print(f"  –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {units_map.get(units, f'Unknown ({units})')}")
        
        print(f"\nüìç –°–´–†–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´:")
        
        for i, entity in enumerate(modelspace):
            if i > 5:  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä–µ–∫—Ç–æ–≤
                break
                
            print(f"\n  –û–±—ä–µ–∫—Ç {i+1}: {entity.dxftype()}")
            
            if entity.dxftype() == 'LINE':
                start = entity.dxf.start
                end = entity.dxf.end
                print(f"    –õ–∏–Ω–∏—è: ({start.x:.3f}, {start.y:.3f}) ‚Üí ({end.x:.3f}, {end.y:.3f})")
                length = ((end.x - start.x)**2 + (end.y - start.y)**2)**0.5
                print(f"    –î–ª–∏–Ω–∞: {length:.3f} –µ–¥–∏–Ω–∏—Ü")
                
            elif entity.dxftype() == 'CIRCLE':
                center = entity.dxf.center
                radius = entity.dxf.radius
                print(f"    –¶–µ–Ω—Ç—Ä: ({center.x:.3f}, {center.y:.3f})")
                print(f"    –†–∞–¥–∏—É—Å: {radius:.3f} –µ–¥–∏–Ω–∏—Ü")
                print(f"    –î–∏–∞–º–µ—Ç—Ä: {radius*2:.3f} –µ–¥–∏–Ω–∏—Ü")
                
            elif entity.dxftype() == 'ARC':
                center = entity.dxf.center
                radius = entity.dxf.radius
                start_angle = entity.dxf.start_angle
                end_angle = entity.dxf.end_angle
                print(f"    –¶–µ–Ω—Ç—Ä: ({center.x:.3f}, {center.y:.3f})")
                print(f"    –†–∞–¥–∏—É—Å: {radius:.3f} –µ–¥–∏–Ω–∏—Ü")
                print(f"    –£–≥–ª—ã: {start_angle:.1f}¬∞ - {end_angle:.1f}¬∞")
                
            elif entity.dxftype() == 'LWPOLYLINE':
                points = list(entity.get_points())
                if points:
                    print(f"    –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞: ({points[0][0]:.3f}, {points[0][1]:.3f})")
                    print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞: ({points[-1][0]:.3f}, {points[-1][1]:.3f})")
                    print(f"    –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {len(points)}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –≥–∞–±–∞—Ä–∏—Ç—ã –ø–æ–ª–∏–ª–∏–Ω–∏–∏
                    x_coords = [p[0] for p in points]
                    y_coords = [p[1] for p in points]
                    width = max(x_coords) - min(x_coords)
                    height = max(y_coords) - min(y_coords)
                    print(f"    –ì–∞–±–∞—Ä–∏—Ç—ã –ø–æ–ª–∏–ª–∏–Ω–∏–∏: {width:.3f}√ó{height:.3f} –µ–¥–∏–Ω–∏—Ü")
                    
            elif entity.dxftype() == 'SPLINE':
                if hasattr(entity, 'control_points'):
                    control_points = entity.control_points
                    if control_points:
                        print(f"    –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏: {len(control_points)}")
                        # control_points –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º numpy
                        if len(control_points) > 0:
                            first_point = control_points[0]
                            last_point = control_points[-1]
                            if hasattr(first_point, 'x'):
                                print(f"    –ü–µ—Ä–≤–∞—è: ({first_point.x:.3f}, {first_point.y:.3f})")
                                print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è: ({last_point.x:.3f}, {last_point.y:.3f})")
                                x_coords = [p.x for p in control_points]
                                y_coords = [p.y for p in control_points]
                            else:
                                print(f"    –ü–µ—Ä–≤–∞—è: ({first_point[0]:.3f}, {first_point[1]:.3f})")
                                print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è: ({last_point[0]:.3f}, {last_point[1]:.3f})")
                                x_coords = [p[0] for p in control_points]
                                y_coords = [p[1] for p in control_points]
                            
                            width = max(x_coords) - min(x_coords)
                            height = max(y_coords) - min(y_coords)
                            print(f"    –ì–∞–±–∞—Ä–∏—Ç—ã —Å–ø–ª–∞–π–Ω–∞: {width:.3f}√ó{height:.3f} –µ–¥–∏–Ω–∏—Ü")
        
        # –û–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã —Ñ–∞–π–ª–∞
        print(f"\nüóÇÔ∏è –û–ë–©–ò–ï –ì–ê–ë–ê–†–ò–¢–´ –§–ê–ô–õ–ê:")
        all_x, all_y = [], []
        
        for entity in modelspace:
            try:
                bbox = entity.bbox()
                if bbox:
                    all_x.extend([bbox.extmin.x, bbox.extmax.x])
                    all_y.extend([bbox.extmin.y, bbox.extmax.y])
            except:
                pass
        
        if all_x and all_y:
            total_width = max(all_x) - min(all_x)
            total_height = max(all_y) - min(all_y)
            print(f"  –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞: {total_width:.3f} –µ–¥–∏–Ω–∏—Ü")
            print(f"  –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞: {total_height:.3f} –µ–¥–∏–Ω–∏—Ü")
            print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è X: {min(all_x):.3f}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è X: {max(all_x):.3f}")
            print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è Y: {min(all_y):.3f}")  
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è Y: {max(all_y):.3f}")
            
            # –ê–Ω–∞–ª–∏–∑ –µ–¥–∏–Ω–∏—Ü
            print(f"\nü§î –ê–ù–ê–õ–ò–ó –ï–î–ò–ù–ò–¶:")
            print(f"  –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã = –º–º: {total_width:.1f}√ó{total_height:.1f}–º–º")
            print(f"  –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã = —Å–º: {total_width:.1f}√ó{total_height:.1f}—Å–º = {total_width*10:.1f}√ó{total_height*10:.1f}–º–º")
            print(f"  –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã = –¥—é–π–º—ã: {total_width:.1f}√ó{total_height:.1f}\" = {total_width*25.4:.1f}√ó{total_height*25.4:.1f}–º–º")
            
            if total_width * 25.4 > 250:  # –µ—Å–ª–∏ –≤ –¥—é–π–º–∞—Ö –±–æ–ª—å—à–µ 25—Å–º
                print(f"  üí° –í–û–ó–ú–û–ñ–ù–û –ï–î–ò–ù–ò–¶–´ –í –î–Æ–ô–ú–ê–•! {total_width:.2f}\" = {total_width*25.4:.1f}–º–º")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    examine_raw_dxf()