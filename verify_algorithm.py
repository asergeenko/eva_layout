#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
"""

import sys
sys.path.insert(0, '.')

import os
import tempfile
import ezdxf
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon as MplPolygon
from io import BytesIO
from layout_optimizer import (
    parse_dxf_complete, bin_packing_with_inventory, 
    save_dxf_layout_complete, plot_layout
)

def verify_algorithm():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê")
    print("=" * 60)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º TANK —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_files = [
        "dxf_samples/TANK 300/1.dxf",
        "dxf_samples/TANK 300/4.dxf"
    ]
    
    found_files = [f for f in test_files if os.path.exists(f)]
    if len(found_files) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TANK —Ñ–∞–π–ª–æ–≤!")
        return
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∞–π–ª–∞–º–∏: {[os.path.basename(f) for f in found_files]}")
    
    # 1. –ü–ê–†–°–ò–ù–ì –ò –ê–ù–ê–õ–ò–ó
    print(f"\nüîç –®–ê–ì 1: –ü–ê–†–°–ò–ù–ì –ò –ê–ù–ê–õ–ò–ó")
    
    all_polygons = []
    original_dxf_data_map = {}
    
    for file_path in found_files:
        file_name = os.path.basename(file_path)
        
        result = parse_dxf_complete(file_path, verbose=False)
        print(f"\n  üìÑ {file_name}:")
        print(f"    –ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–π: {result['bottom_layer_name']}")
        print(f"    –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result['original_entities'])}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–ª–æ—è–º
        layers = {}
        for entity_data in result['original_entities']:
            layer = entity_data['layer']
            if layer not in layers:
                layers[layer] = 0
            layers[layer] += 1
        
        print(f"    –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–ª–æ—è–º:")
        for layer, count in layers.items():
            marker = "üëë" if layer == result['bottom_layer_name'] else "  "
            print(f"      {marker} {layer}: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if result['polygons']:
            poly = result['polygons'][0]
            all_polygons.append((poly, file_name, "—á–µ—Ä–Ω—ã–π", 1))
            original_dxf_data_map[file_name] = result
            
            bounds = poly.bounds
            print(f"    –ü–æ–ª–∏–≥–æ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {bounds[2]-bounds[0]:.1f}√ó{bounds[3]-bounds[1]:.1f}–º–º")
            print(f"    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–π —Å–ª–æ–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    
    # 2. –†–ê–ó–ú–ï–©–ï–ù–ò–ï
    print(f"\nüéØ –®–ê–ì 2: –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ù–ê –õ–ò–°–¢–ï")
    
    available_sheets = [{
        'name': 'test_sheet',
        'width': 140,
        'height': 200,
        'count': 1,
        'used': 0,
        'color': '—á–µ—Ä–Ω—ã–π'
    }]
    
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons, available_sheets, verbose=False
    )
    
    if not placed_layouts:
        print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    
    layout = placed_layouts[0]
    placed_polygons = layout['placed_polygons']
    
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(placed_polygons)}")
    print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {layout['usage_percent']:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    for i, placed_item in enumerate(placed_polygons):
        polygon, x_offset, y_offset, rotation, filename, color = placed_item[:6] if len(placed_item) >= 6 else (*placed_item[:5], '—á–µ—Ä–Ω—ã–π')
        
        bounds = polygon.bounds
        center_x = (bounds[0] + bounds[2]) / 2
        center_y = (bounds[1] + bounds[3]) / 2
        
        print(f"    {i+1}. {filename}: —Ü–µ–Ω—Ç—Ä ({center_x:.1f}, {center_y:.1f}), –ø–æ–≤–æ—Ä–æ—Ç {rotation}¬∞")
    
    # 3. –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
    print(f"\nüé® –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
    
    visualization_buffer = plot_layout(placed_polygons, (140, 200))
    visualization_path = "test_visualization.png"
    
    with open(visualization_path, 'wb') as f:
        f.write(visualization_buffer.getvalue())
    
    print(f"  ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {visualization_path}")
    print(f"  üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ —Å–ª–æ–∏ –æ–±—ä–µ–∫—Ç–æ–≤")
    
    # 4. –°–û–ó–î–ê–ù–ò–ï DXF
    print(f"\nüíæ –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï DXF –°–û –í–°–ï–ú–ò –°–õ–û–Ø–ú–ò")
    
    layout_dxf_map = {}
    for placed_item in placed_polygons:
        filename = placed_item[4]
        if filename in original_dxf_data_map:
            layout_dxf_map[filename] = original_dxf_data_map[filename]
    
    dxf_path = "test_result.dxf"
    
    save_dxf_layout_complete(
        placed_polygons,
        (140, 200),
        dxf_path,
        layout_dxf_map,
        verbose=False
    )
    
    print(f"  ‚úÖ DXF —Å–æ–∑–¥–∞–Ω: {dxf_path}")
    
    # 5. –ê–ù–ê–õ–ò–ó –°–û–ó–î–ê–ù–ù–û–ì–û DXF
    print(f"\nüîç –®–ê–ì 5: –ê–ù–ê–õ–ò–ó –°–û–ó–î–ê–ù–ù–û–ì–û DXF")
    
    saved_doc = ezdxf.readfile(dxf_path)
    saved_msp = saved_doc.modelspace()
    saved_entities = list(saved_msp)
    
    print(f"  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DXF: {len(saved_entities)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º –∏ —Å–ª–æ—è–º
    files_layers = {}
    for entity in saved_entities:
        if entity.dxftype() == 'SPLINE':
            layer = getattr(entity.dxf, 'layer', '0')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Å–ª–æ–π
            if '_' in layer:
                parts = layer.split('_')
                if len(parts) >= 2:
                    file_part = parts[0] + '.dxf'
                    layer_part = '_'.join(parts[1:])
                    
                    if file_part not in files_layers:
                        files_layers[file_part] = {}
                    if layer_part not in files_layers[file_part]:
                        files_layers[file_part][layer_part] = 0
                    files_layers[file_part][layer_part] += 1
    
    print(f"  –§–∞–π–ª—ã –∏ –∏—Ö —Å–ª–æ–∏ –≤ DXF:")
    for file_name, layers in files_layers.items():
        print(f"    üìÑ {file_name}:")
        for layer_name, count in layers.items():
            print(f"      {layer_name}: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    print(f"  ‚úÖ –í DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –í–°–ï —Å–ª–æ–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤")
    
    # 6. –ü–†–û–í–ï–†–ö–ê –ö–û–û–†–î–ò–ù–ê–¢
    print(f"\nüìê –®–ê–ì 6: –ü–†–û–í–ï–†–ö–ê –ö–û–û–†–î–ò–ù–ê–¢ –ò –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ô")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ DXF
    file_positions = {}
    for file_name in files_layers.keys():
        all_x, all_y = [], []
        
        for entity in saved_entities:
            if entity.dxftype() == 'SPLINE':
                layer = getattr(entity.dxf, 'layer', '0')
                if layer.startswith(file_name.replace('.dxf', '_')):
                    
                    if hasattr(entity, 'control_points') and entity.control_points:
                        for cp in entity.control_points:
                            if hasattr(cp, 'x'):
                                all_x.append(cp.x)
                                all_y.append(cp.y)
                            else:
                                all_x.append(cp[0])
                                all_y.append(cp[1])
        
        if all_x and all_y:
            center_x = (min(all_x) + max(all_x)) / 2
            center_y = (min(all_y) + max(all_y)) / 2
            width = max(all_x) - min(all_x)
            height = max(all_y) - min(all_y)
            
            file_positions[file_name] = (center_x, center_y, width, height)
            print(f"    {file_name}: —Ü–µ–Ω—Ç—Ä ({center_x:.1f}, {center_y:.1f}), —Ä–∞–∑–º–µ—Ä {width:.1f}√ó{height:.1f}–º–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    if len(file_positions) >= 2:
        positions = list(file_positions.values())
        distance = ((positions[1][0] - positions[0][0])**2 + (positions[1][1] - positions[0][1])**2)**0.5
        
        print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ DXF: {distance:.1f}–º–º")
        
        if distance > 300:  # –±–æ–ª—å—à–µ 30—Å–º
            print(f"  ‚úÖ –û–±—ä–µ–∫—Ç—ã –≤ DXF –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è")
        else:
            print(f"  ‚ùå –í–æ–∑–º–æ–∂–Ω—ã –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤ DXF")
    
    print(f"\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"  üìÑ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {visualization_path}")
    print(f"  üìÑ –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π DXF: {dxf_path}")
    print(f"  ‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ:")
    print(f"     ‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ —Å–ª–æ–∏")
    print(f"     ‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ: –ø–æ –≤–Ω–µ—à–Ω–∏–º —Å–ª–æ—è–º")
    print(f"     ‚Ä¢ DXF: –≤—Å–µ —Å–ª–æ–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏")

if __name__ == "__main__":
    verify_algorithm()