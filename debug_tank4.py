#!/usr/bin/env python3
"""
–ò—Å—Å–ª–µ–¥—É–µ–º —Ñ–∞–π–ª TANK 300/4.dxf –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ–≤–µ—Ä–Ω–æ
"""

import sys
sys.path.insert(0, '.')

import os
from layout_optimizer import parse_dxf_complete

def debug_tank4():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º TANK 1.dxf –∏ 4.dxf"""
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï TANK 1.dxf –∏ 4.dxf")
    print("=" * 60)
    
    files_to_check = [
        "dxf_samples/TANK 300/1.dxf",
        "dxf_samples/TANK 300/4.dxf"
    ]
    
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            continue
            
        print(f"\nüìã –ê–ù–ê–õ–ò–ó: {os.path.basename(file_path)}")
        
        try:
            result = parse_dxf_complete(file_path, verbose=False)
            
            print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤: {len(result.get('polygons', []))}")
            print(f"  –ò—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(result.get('original_entities', []))}")
            print(f"  –°–ª–æ–µ–≤: {len(set(e['layer'] for e in result.get('original_entities', [])))}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—è—Ö
            layer_info = {}
            for entity_data in result.get('original_entities', []):
                layer = entity_data['layer']
                if layer not in layer_info:
                    layer_info[layer] = {'count': 0, 'types': set()}
                layer_info[layer]['count'] += 1
                layer_info[layer]['types'].add(entity_data['type'])
            
            for layer, info in layer_info.items():
                print(f"    –°–ª–æ–π '{layer}': {info['count']} –æ–±—ä–µ–∫—Ç–æ–≤, —Ç–∏–ø—ã: {list(info['types'])}")
            
            # –†–∞–∑–º–µ—Ä—ã –ø–æ–ª–∏–≥–æ–Ω–æ–≤
            if 'polygons' in result and result['polygons']:
                for i, poly in enumerate(result['polygons']):
                    bounds = poly.bounds
                    width = bounds[2] - bounds[0]
                    height = bounds[3] - bounds[1]
                    print(f"    –ü–æ–ª–∏–≥–æ–Ω {i+1}: {width:.1f}√ó{height:.1f}, –ø–ª–æ—â–∞–¥—å: {poly.area:.0f}")
            
            # Bounds –æ–±—â–∏–µ
            if 'bounds' in result and result['bounds']:
                bounds = result['bounds']
                total_width = bounds[2] - bounds[0]
                total_height = bounds[3] - bounds[1]
                print(f"    –û–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã: {total_width:.1f}√ó{total_height:.1f}")
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    debug_tank4()