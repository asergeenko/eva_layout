#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –∫–æ–≤—Ä–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –∫–æ–≤—Ä–æ–≤ –ø—Ä–∏–∂–∞—Ç—ã –∫ –∫—Ä–∞—è–º.
"""
import sys
import os
from pathlib import Path

from dxf_utils import parse_dxf_complete
from excel_loader import load_excel_file, parse_orders_from_excel, find_dxf_files_for_article

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import (
    bin_packing_with_inventory,
    Carpet,
)

# –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ 140x200
available_sheets = [{
    "name": "–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
    "width": 140,
    "height": 200,
    "color": "—á—ë—Ä–Ω—ã–π",
    "count": 20,
    "used": 0
}]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Excel
excel_data = load_excel_file(open("tests/sample_input_test.xlsx", "rb").read())
orders = parse_orders_from_excel(excel_data)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ
polygons = []
for order in orders:
    order_id = order["order_id"]
    article = order["article"]
    product_name = order["product"]
    color = order["color"]

    if color != "—á—ë—Ä–Ω—ã–π":
        continue

    dxf_files = find_dxf_files_for_article(article, product_name)

    if dxf_files:
        for dxf_file in dxf_files:
            try:
                polygon_data = parse_dxf_complete(dxf_file, verbose=False)
                if polygon_data and polygon_data.get("combined_polygon"):
                    polygon = polygon_data["combined_polygon"]
                    filename = os.path.basename(dxf_file)
                    unique_filename = f"{product_name}_{os.path.splitext(filename)[0]}.dxf"
                    polygons.append(Carpet(polygon, unique_filename, color, order_id, 1))
            except:
                continue

print(f"üìä –í—Å–µ–≥–æ —á–µ—Ä–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤: {len(polygons)}")

# –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
placed_layouts, unplaced = bin_packing_with_inventory(
    polygons,
    available_sheets,
    verbose=False,
)

print(f"üìÑ –†–∞–∑–º–µ—â–µ–Ω–æ –Ω–∞ {len(placed_layouts)} –ª–∏—Å—Ç–∞—Ö\n")

# –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –∫–æ–≤—Ä–æ–≤
EDGE_THRESHOLD = 10  # –º–º –æ—Ç –∫—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç—Å—è "–ø—Ä–∏–∂–∞—Ç—ã–º"
sheet_width = 140
sheet_height = 200

total_carpets = 0
left_edge_count = 0
right_edge_count = 0
top_edge_count = 0
bottom_edge_count = 0
center_count = 0

for i, layout in enumerate(placed_layouts[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5 –ª–∏—Å—Ç–æ–≤
    print(f"–õ–∏—Å—Ç {i} ({len(layout.placed_polygons)} –∫–æ–≤—Ä–æ–≤, {layout.usage_percent:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ):")

    for carpet in layout.placed_polygons:
        bounds = carpet.polygon.bounds
        min_x = bounds[0]
        max_x = bounds[2]
        min_y = bounds[1]
        max_y = bounds[3]

        total_carpets += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        at_left = min_x < EDGE_THRESHOLD
        at_right = max_x > sheet_width - EDGE_THRESHOLD
        at_bottom = min_y < EDGE_THRESHOLD
        at_top = max_y > sheet_height - EDGE_THRESHOLD

        if at_left:
            left_edge_count += 1
        if at_right:
            right_edge_count += 1
        if at_bottom:
            bottom_edge_count += 1
        if at_top:
            top_edge_count += 1

        # –ö–æ–≤–µ—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ (–Ω–µ –ø—Ä–∏–∂–∞—Ç –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫—Ä–∞—é)
        if not (at_left or at_right or at_bottom or at_top):
            center_count += 1
            print(f"  ‚ö†Ô∏è  {carpet.filename.split('_')[0]}: x={min_x:.0f}-{max_x:.0f}, y={min_y:.0f}-{max_y:.0f} (–í –¶–ï–ù–¢–†–ï!)")
        elif at_left:
            print(f"  ‚úì {carpet.filename.split('_')[0]}: x={min_x:.0f}-{max_x:.0f}, y={min_y:.0f}-{max_y:.0f} (–ø—Ä–∏–∂–∞—Ç –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é)")
    print()

print("=" * 60)
print(f"–ò–¢–û–ì–û (–ø–µ—Ä–≤—ã–µ 5 –ª–∏—Å—Ç–æ–≤, {total_carpets} –∫–æ–≤—Ä–æ–≤):")
print(f"  –ü—Ä–∏–∂–∞—Ç—ã –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é:  {left_edge_count} ({left_edge_count/total_carpets*100:.1f}%)")
print(f"  –ü—Ä–∏–∂–∞—Ç—ã –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é: {right_edge_count} ({right_edge_count/total_carpets*100:.1f}%)")
print(f"  –ü—Ä–∏–∂–∞—Ç—ã –∫ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é: {bottom_edge_count} ({bottom_edge_count/total_carpets*100:.1f}%)")
print(f"  –ü—Ä–∏–∂–∞—Ç—ã –∫ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é: {top_edge_count} ({top_edge_count/total_carpets*100:.1f}%)")
print(f"  –í –¶–ï–ù–¢–†–ï (–Ω–µ –ø—Ä–∏–∂–∞—Ç—ã):  {center_count} ({center_count/total_carpets*100:.1f}%)")
print()

if center_count == 0:
    print("‚úÖ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∫–æ–≤—Ä—ã –ø—Ä–∏–∂–∞—Ç—ã —Ö–æ—Ç—è –±—ã –∫ –æ–¥–Ω–æ–º—É –∫—Ä–∞—é")
elif center_count < total_carpets * 0.1:
    print("‚úÖ –•–û–†–û–®–û! –ú–µ–Ω–µ–µ 10% –∫–æ–≤—Ä–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ")
else:
    print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! {center_count/total_carpets*100:.1f}% –∫–æ–≤—Ä–æ–≤ –Ω–µ –ø—Ä–∏–∂–∞—Ç—ã –∫ –∫—Ä–∞—è–º")
