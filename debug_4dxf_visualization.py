#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞ 4.dxf –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import sys
sys.path.insert(0, '.')

import os
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon as MplPolygon
from io import BytesIO
from layout_optimizer import parse_dxf_complete

def debug_4dxf_visualization():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è 4.dxf"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø 4.DXF")
    print("=" * 50)
    
    tank_file = "dxf_samples/TANK 300/4.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
    result = parse_dxf_complete(tank_file, verbose=False)
    
    print(f"–ü–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {len(result['polygons'])}")
    print(f"–ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–π: {result['bottom_layer_name']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ–ª–∏–≥–æ–Ω
    for i, poly in enumerate(result['polygons']):
        bounds = poly.bounds
        width = bounds[2] - bounds[0]
        height = bounds[3] - bounds[1]
        area = poly.area
        
        print(f"\n–ü–æ–ª–∏–≥–æ–Ω {i}:")
        print(f"  –†–∞–∑–º–µ—Ä: {width:.1f}√ó{height:.1f}–º–º")
        print(f"  –ü–ª–æ—â–∞–¥—å: {area:.0f}")
        print(f"  Bounds: ({bounds[0]:.1f}, {bounds[1]:.1f}, {bounds[2]:.1f}, {bounds[3]:.1f})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –ø–æ–ª–∏–≥–æ–Ω–∞
        coords = list(poly.exterior.coords)
        print(f"  –¢–æ—á–µ–∫ –≤ –∫–æ–Ω—Ç—É—Ä–µ: {len(coords)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ—Å—Ç—å
        if len(coords) <= 4:  # —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ + –∑–∞–º—ã–∫–∞—é—â–∞—è —Ç–æ—á–∫–∞
            print(f"  ‚ö†Ô∏è –¢–†–ï–£–ì–û–õ–¨–ù–ê–Ø –§–û–†–ú–ê! –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:")
            for j, coord in enumerate(coords[:3]):  # –ø–µ—Ä–≤—ã–µ 3 —Ç–æ—á–∫–∏
                print(f"    {j}: ({coord[0]:.1f}, {coord[1]:.1f})")
        else:
            print(f"  ‚úÖ –°–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å {len(coords)-1} —Ç–æ—á–∫–∞–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8))
    
    # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    ax1.set_title("–í—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã 4.dxf (–æ—Ç–¥–µ–ª—å–Ω–æ)")
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray']
    
    all_x, all_y = [], []
    for i, poly in enumerate(result['polygons']):
        x, y = poly.exterior.xy
        all_x.extend(x)
        all_y.extend(y)
        
        color = colors[i % len(colors)]
        ax1.fill(x, y, alpha=0.7, color=color, edgecolor='black', linewidth=1, 
                label=f"–ü–æ–ª–∏–≥–æ–Ω {i} (–ø–ª–æ—â–∞–¥—å: {poly.area:.0f})")
    
    ax1.set_xlim(min(all_x) - 50, max(all_x) + 50)
    ax1.set_ylim(min(all_y) - 50, max(all_y) + 50)
    ax1.set_aspect('equal')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
    ax2.set_title("4.dxf –∫–∞–∫ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ–ª–∏–≥–æ–Ω (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º)
    if result['polygons']:
        largest_poly = max(result['polygons'], key=lambda p: p.area)
        x, y = largest_poly.exterior.xy
        ax2.fill(x, y, alpha=0.7, color='blue', edgecolor='black', linewidth=2, 
                label=f"–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ–ª–∏–≥–æ–Ω (–ø–ª–æ—â–∞–¥—å: {largest_poly.area:.0f})")
        
        ax2.set_xlim(min(x) - 50, max(x) + 50)
        ax2.set_ylim(min(y) - 50, max(y) + 50)
        ax2.set_aspect('equal')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig("4dxf_analysis.png", dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"\nüíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 4dxf_analysis.png")

if __name__ == "__main__":
    debug_4dxf_visualization()