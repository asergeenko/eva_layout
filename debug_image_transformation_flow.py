#!/usr/bin/env python3

import sys
import os

# –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π
def trace_image_creation_in_code():
    """–ò—â–µ–º –≥–¥–µ –≤ –∫–æ–¥–µ —Å–æ–∑–¥–∞—é—Ç—Å—è/–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è IMAGE —Å—É—â–Ω–æ—Å—Ç–∏"""
    
    print("=== –ü–û–ò–°–ö –û–ë–†–ê–ë–û–¢–ö–ò IMAGE –°–£–©–ù–û–°–¢–ï–ô –í –ö–û–î–ï ===")
    
    try:
        with open("layout_optimizer.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        lines = content.split('\n')
        image_related_lines = []
        
        for i, line in enumerate(lines):
            if any(keyword in line.upper() for keyword in ['IMAGE', 'ENTITY_DATA', 'ENTITY.DXFTYPE', 'ADD_ENTITY']):
                image_related_lines.append((i+1, line.strip()))
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(image_related_lines)} —Å—Ç—Ä–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å IMAGE –∏–ª–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏:")
        
        for line_num, line in image_related_lines[:20]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 20
            print(f"  Line {line_num}: {line}")
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É IMAGE
        if "entity_data['type'] == 'IMAGE'" in content:
            print("\n‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π")
        else:
            print("\n‚ö†Ô∏è  –ù–ï –Ω–∞–π–¥–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π")
        
        # –ò—â–µ–º –≥–¥–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å—É—â–Ω–æ—Å—Ç–∏ –≤ modelspace
        add_entity_lines = []
        for i, line in enumerate(lines):
            if "add_entity" in line or "msp.add" in line:
                add_entity_lines.append((i+1, line.strip()))
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(add_entity_lines)} –º–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π:")
        for line_num, line in add_entity_lines:
            print(f"  Line {line_num}: {line}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ IMAGE
        debug_lines = []
        for i, line in enumerate(lines):
            if "üîç DEBUG" in line and "IMAGE" in line:
                debug_lines.append((i+1, line.strip()))
        
        if debug_lines:
            print(f"\n–ù–∞–π–¥–µ–Ω—ã –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è IMAGE:")
            for line_num, line in debug_lines:
                print(f"  Line {line_num}: {line}")
        else:
            print("\n‚ö†Ô∏è  –ù–ï –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è IMAGE")
            print("   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ IMAGE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")

def check_original_dxf_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ IMAGE —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\n=== –ü–†–û–í–ï–†–ö–ê –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• ===")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ DXF —Ñ–∞–π–ª—ã —Å IMAGE —Å—É—â–Ω–æ—Å—Ç—è–º–∏
    import glob
    import ezdxf
    
    dxf_files = glob.glob("dxf_samples/**/*.dxf", recursive=True)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(dxf_files)} DXF —Ñ–∞–π–ª–æ–≤ –≤ dxf_samples/")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π
    files_with_images = []
    
    for dxf_file in dxf_files[:10]:  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
        try:
            doc = ezdxf.readfile(dxf_file)
            msp = doc.modelspace()
            
            image_count = sum(1 for entity in msp if entity.dxftype() == 'IMAGE')
            text_count = sum(1 for entity in msp if entity.dxftype() == 'TEXT')
            
            if image_count > 0 or text_count > 0:
                files_with_images.append((dxf_file, image_count, text_count))
                print(f"  {os.path.basename(dxf_file)}: {image_count} IMAGE, {text_count} TEXT")
                
        except Exception as e:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
    
    if files_with_images:
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(files_with_images)} —Ñ–∞–π–ª–æ–≤ —Å IMAGE/TEXT —Å—É—â–Ω–æ—Å—Ç—è–º–∏")
    else:
        print("\n‚ö†Ô∏è  –ù–ï –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å IMAGE/TEXT —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Ñ–∞–π–ª–∞—Ö")

if __name__ == "__main__":
    trace_image_creation_in_code()
    check_original_dxf_data()