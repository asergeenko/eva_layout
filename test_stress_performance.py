#!/usr/bin/env python3

"""
Stress test to simulate real-world performance bottlenecks
"""

import time
import logging
from shapely.geometry import Polygon
from layout_optimizer import bin_packing_with_inventory, Carpet

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ WARNING –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING, format='%(asctime)s - %(levelname)s - %(message)s')

def create_stress_test_data():
    """Create challenging test data that simulates real-world complexity"""
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–æ–≤ (–±–æ–ª—å—à–∏–µ)
    available_sheets = []
    
    black_sheet = {
        "name": "–õ–∏—Å—Ç 140x200 —á—ë—Ä–Ω—ã–π", 
        "width": 140, 
        "height": 200,
        "color": "—á—ë—Ä–Ω—ã–π", 
        "count": 5,  # 5 –ª–∏—Å—Ç–æ–≤
        "used": 0,
    }
    gray_sheet = {
        "name": "–õ–∏—Å—Ç 140x200 —Å–µ—Ä—ã–π",
        "width": 140,
        "height": 200, 
        "color": "—Å–µ—Ä—ã–π",
        "count": 5,  # 5 –ª–∏—Å—Ç–æ–≤
        "used": 0,
    }
    available_sheets.extend([black_sheet, gray_sheet])
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –∫–æ–≤—Ä–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    carpets = []
    
    # –ü–µ—Ä–≤–∞—è –≤–æ–ª–Ω–∞ - –∫—Ä—É–ø–Ω—ã–µ –∫–æ–≤—Ä—ã (—Å–æ–∑–¥–∞—é—Ç –º–Ω–æ–≥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π)
    for i in range(40):  # 40 –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤
        order_id = f"LARGE_{i:02d}"
        color = "—á—ë—Ä–Ω—ã–π" if i % 2 == 0 else "—Å–µ—Ä—ã–π"
        filename = f"large_{i}.dxf"
        
        # –ö—Ä—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã 60-100–º–º 
        size_x = 60 + (i % 15) * 3  # 60-102–º–º
        size_y = 70 + (i % 12) * 2  # 70-92–º–º
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—ã (L-–æ–±—Ä–∞–∑–Ω—ã–µ, U-–æ–±—Ä–∞–∑–Ω—ã–µ)
        if i % 3 == 0:
            # L-–æ–±—Ä–∞–∑–Ω–∞—è —Ñ–æ—Ä–º–∞
            polygon = Polygon([
                (0, 0), (size_x, 0), (size_x, size_y//2), 
                (size_x//2, size_y//2), (size_x//2, size_y), (0, size_y)
            ])
        elif i % 3 == 1:
            # U-–æ–±—Ä–∞–∑–Ω–∞—è —Ñ–æ—Ä–º–∞
            w3 = size_x // 3
            polygon = Polygon([
                (0, 0), (size_x, 0), (size_x, size_y), (2*w3, size_y),
                (2*w3, size_y//2), (w3, size_y//2), (w3, size_y), (0, size_y)
            ])
        else:
            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            polygon = Polygon([(0, 0), (size_x, 0), (size_x, size_y), (0, size_y)])
        
        carpet = Carpet(
            polygon=polygon,
            filename=filename,
            color=color,
            order_id=order_id,
            priority=1
        )
        carpets.append(carpet)
    
    # –í—Ç–æ—Ä–∞—è –≤–æ–ª–Ω–∞ - –º–µ–ª–∫–∏–µ –∫–æ–≤—Ä—ã (—Å–ª–æ–∂–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏)
    for i in range(60):  # 60 –º–µ–ª–∫–∏—Ö –∫–æ–≤—Ä–æ–≤
        order_id = f"SMALL_{i:02d}"
        color = "—á—ë—Ä–Ω—ã–π" if i % 2 == 0 else "—Å–µ—Ä—ã–π"
        filename = f"small_{i}.dxf"
        
        # –ú–µ–ª–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã 20-40–º–º
        size = 20 + (i % 8) * 3  # 20-41–º–º
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã
        if i % 4 == 0:
            # –ö–≤–∞–¥—Ä–∞—Ç
            polygon = Polygon([(0, 0), (size, 0), (size, size), (0, size)])
        elif i % 4 == 1:
            # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            polygon = Polygon([(0, 0), (size*1.5, 0), (size*1.5, size), (0, size)])
        elif i % 4 == 2:
            # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            polygon = Polygon([(0, 0), (size, 0), (size/2, size), (0, 0)])
        else:
            # –®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫
            import math
            points = []
            for angle in range(0, 360, 60):
                x = size/2 + (size/2) * math.cos(math.radians(angle))
                y = size/2 + (size/2) * math.sin(math.radians(angle))
                points.append((x, y))
            polygon = Polygon(points)
        
        carpet = Carpet(
            polygon=polygon,
            filename=filename,
            color=color,
            order_id=order_id,
            priority=1
        )
        carpets.append(carpet)
    
    return available_sheets, carpets

def main():
    print("=== –°–¢–†–ï–°–°-–¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===")
    
    available_sheets, carpets = create_stress_test_data()
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(available_sheets)} —Ç–∏–ø–æ–≤ –ª–∏—Å—Ç–æ–≤")
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(carpets)} –∫–æ–≤—Ä–æ–≤")
    print(f"  - –ö—Ä—É–ø–Ω—ã–µ –∫–æ–≤—Ä—ã: 40 —à—Ç (60-100–º–º)")
    print(f"  - –ú–µ–ª–∫–∏–µ –∫–æ–≤—Ä—ã: 60 —à—Ç (20-40–º–º)")
    print("–í–∫–ª—é—á–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...\n")
    
    start_time = time.time()
    
    try:
        placed_layouts, unplaced_carpets = bin_packing_with_inventory(
            carpets,
            available_sheets,
            verbose=False,
            max_sheets_per_order=5,
        )
        
        end_time = time.time()
        total_time = end_time - start_time
        
        print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–ê ===")
        print(f"‚è±Ô∏è  –û–ë–©–ï–ï –í–†–ï–ú–Ø: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
        print(f"üì¶ –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤: {len(unplaced_carpets)}")
        
        if placed_layouts:
            total_placed = sum(len(layout['placed_polygons']) for layout in placed_layouts)
            avg_usage = sum(layout.get('usage_percent', 0) for layout in placed_layouts) / len(placed_layouts)
            print(f"üéØ –í—Å–µ–≥–æ –∫–æ–≤—Ä–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {total_placed}")
            print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤: {avg_usage:.1f}%")
            
            print("\n–î–µ—Ç–∞–ª–∏ –ø–æ –ª–∏—Å—Ç–∞–º:")
            for layout in placed_layouts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  –õ–∏—Å—Ç {layout['sheet_number']}: {len(layout['placed_polygons'])} –∫–æ–≤—Ä–æ–≤, {layout.get('usage_percent', 0):.1f}%")
            if len(placed_layouts) > 5:
                print(f"  ... –µ—â–µ {len(placed_layouts) - 5} –ª–∏—Å—Ç–æ–≤")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        carpets_per_second = len(carpets) / total_time if total_time > 0 else float('inf')
        print(f"\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: {carpets_per_second:.1f} –∫–æ–≤—Ä–æ–≤/—Å–µ–∫")
        
        if total_time < 10.0:
            print("‚úÖ –û–¢–õ–ò–ß–ù–ê–Ø –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        elif total_time < 30.0:
            print("‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif total_time < 60.0:
            print("‚ö†Ô∏è  –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif total_time < 120.0:
            print("‚ùå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("‚ùå‚ùå –û–ß–ï–ù–¨ –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞!")
        
        print("\n=== –£–ó–ö–ò–ï –ú–ï–°–¢–ê ===")
        print("–ï—Å–ª–∏ –≤—ã—à–µ –±—ã–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚è±Ô∏è, —Ç–æ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞:")
        print("- –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π (–º–Ω–æ–≥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π)")
        print("- –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç waste (—Å–ª–æ–∂–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è)")
        print("- –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–º–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤)")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()