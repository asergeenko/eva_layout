#!/usr/bin/env python3

"""
Performance test for O(n¬≤) to O(1) optimization
"""

import time
import logging
from shapely.geometry import Polygon
from layout_optimizer import bin_packing_with_inventory, Carpet

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
logging.basicConfig(level=logging.ERROR)

def create_heavy_test_data():
    """Create test data that will trigger heavy dxf filling operations"""
    
    # 1. Create limited sheets to force dxf filling
    available_sheets = []
    
    black_sheet = {
        "name": "–õ–∏—Å—Ç 140x200 —á—ë—Ä–Ω—ã–π", 
        "width": 140, 
        "height": 200,
        "color": "—á—ë—Ä–Ω—ã–π", 
        "count": 3,  # Limited sheets to force dxf filling
        "used": 0,
    }
    gray_sheet = {
        "name": "–õ–∏—Å—Ç 140x200 —Å–µ—Ä—ã–π",
        "width": 140,
        "height": 200, 
        "color": "—Å–µ—Ä—ã–π",
        "count": 3,  # Limited sheets
        "used": 0,
    }
    available_sheets.extend([black_sheet, gray_sheet])
    
    # 2. Create many small carpets that will trigger dxf filling logic
    carpets = []
    
    # Create orders with multiple small carpets each
    for order_num in range(20):  # 20 orders
        order_id = f"ORDER_{order_num:03d}"
        color = "—á—ë—Ä–Ω—ã–π" if order_num % 2 == 0 else "—Å–µ—Ä—ã–π"
        
        # Each order has 3-5 small carpets
        carpets_per_order = 3 + (order_num % 3)
        for carpet_num in range(carpets_per_order):
            filename = f"order_{order_num}_carpet_{carpet_num}.dxf"
            
            # Create small polygons that will fit many per sheet
            size = 20 + (carpet_num % 10) * 2  # 20-38 mm
            polygon = Polygon([(0, 0), (size, 0), (size, size), (0, size)])
            
            carpet = Carpet(
                polygon=polygon,
                filename=filename,
                color=color,
                order_id=order_id,
                priority=1
            )
            carpets.append(carpet)
    
    return available_sheets, carpets

def main():
    print("=== –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò O(n¬≤) ‚Üí O(1) –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===")
    
    available_sheets, carpets = create_heavy_test_data()
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(available_sheets)} —Ç–∏–ø–æ–≤ –ª–∏—Å—Ç–æ–≤")
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(carpets)} –∫–æ–≤—Ä–æ–≤")
    
    # Count orders and carpets per order
    orders = {}
    for carpet in carpets:
        if carpet.order_id not in orders:
            orders[carpet.order_id] = 0
        orders[carpet.order_id] += 1
    
    print(f"–ó–∞–∫–∞–∑–æ–≤: {len(orders)}")
    print(f"–ö–æ–≤—Ä–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑: {sum(orders.values()) / len(orders):.1f} –≤ —Å—Ä–µ–¥–Ω–µ–º")
    
    # Run optimization with timing
    MAX_SHEETS_PER_ORDER = 5
    
    print(f"\n=== –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò (MAX_SHEETS_PER_ORDER={MAX_SHEETS_PER_ORDER}) ===")
    
    start_time = time.time()
    try:
        placed_layouts, unplaced_carpets = bin_packing_with_inventory(
            carpets,
            available_sheets,
            verbose=False,  # –û—Ç–∫–ª—é—á–∞–µ–º verbose 
            max_sheets_per_order=MAX_SHEETS_PER_ORDER,
        )
        
        end_time = time.time()
        elapsed = end_time - start_time
        
        print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
        print(f"üì¶ –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤: {len(unplaced_carpets)}")
        
        if placed_layouts:
            total_carpets_placed = sum(len(layout['placed_polygons']) for layout in placed_layouts)
            avg_usage = sum(layout.get('usage_percent', 0) for layout in placed_layouts) / len(placed_layouts)
            print(f"üéØ –í—Å–µ–≥–æ –∫–æ–≤—Ä–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {total_carpets_placed}")
            print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤: {avg_usage:.1f}%")
            
            print("\n–î–µ—Ç–∞–ª–∏ –ø–æ –ª–∏—Å—Ç–∞–º:")
            for layout in placed_layouts:
                print(f"  –õ–∏—Å—Ç {layout['sheet_number']}: {len(layout['placed_polygons'])} –∫–æ–≤—Ä–æ–≤, {layout.get('usage_percent', 0):.1f}%")
        
        # Performance assessment
        carpets_per_second = len(carpets) / elapsed if elapsed > 0 else float('inf')
        print(f"\nüöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {carpets_per_second:.1f} –∫–æ–≤—Ä–æ–≤/—Å–µ–∫")
        
        if elapsed < 5.0:
            print("‚úÖ –û–¢–õ–ò–ß–ù–ê–Ø –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        elif elapsed < 15.0:
            print("‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif elapsed < 30.0:
            print("‚ö†Ô∏è  –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("‚ùå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()