#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞."""

import sys
import os
import time
import logging

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏–Ω–≥ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
logging.getLogger().setLevel(logging.CRITICAL)

# –û—á–∏—Å—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
if 'layout_optimizer' in sys.modules:
    del sys.modules['layout_optimizer']

from layout_optimizer import (
    parse_dxf_complete, 
    bin_packing,
    __version__
)

print("=" * 70)
print("üöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê")
print("=" * 70)
print(f"üìã –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è: {__version__}")

def benchmark_tank300():
    """–ë–µ–Ω—á–º–∞—Ä–∫ —Ñ–∞–π–ª–æ–≤ TANK 300."""
    print(f"\nüéØ –ë–µ–Ω—á–º–∞—Ä–∫ TANK 300:")
    
    tank_folder = "dxf_samples/TANK 300"
    if not os.path.exists(tank_folder):
        print(f"‚ùå –ü–∞–ø–∫–∞ {tank_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None, None
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    print(f"   –ó–∞–≥—Ä—É–∑–∫–∞ DXF —Ñ–∞–π–ª–æ–≤...")
    start_load = time.time()
    
    polygons = []
    for i in range(1, 5):
        file_path = os.path.join(tank_folder, f"{i}.dxf")
        if os.path.exists(file_path):
            result = parse_dxf_complete(file_path, verbose=False)
            if result and result['combined_polygon']:
                filename = f"TANK300_{i}.dxf"
                polygons.append((result['combined_polygon'], filename, "—á—ë—Ä–Ω—ã–π", f"order_{i}"))
    
    load_time = time.time() - start_load
    print(f"   ‚è±Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ {len(polygons)} —Ñ–∞–π–ª–æ–≤: {load_time:.2f} —Å–µ–∫")
    
    if len(polygons) < 4:
        print(f"‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(polygons)}")
        return None, None
    
    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
    print(f"   –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
    start_placement = time.time()
    
    placed, unplaced = bin_packing(polygons, (200, 140), verbose=False)
    
    placement_time = time.time() - start_placement
    total_time = load_time + placement_time
    
    print(f"   ‚è±Ô∏è  –†–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_time:.2f} —Å–µ–∫")
    print(f"   ‚è±Ô∏è  –û–ë–©–ï–ï –í–†–ï–ú–Ø: {total_time:.2f} —Å–µ–∫")
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(placed)} —Ä–∞–∑–º–µ—â–µ–Ω–æ, {len(unplaced)} –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ")
    
    return placement_time, total_time

def benchmark_multiple_runs():
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏."""
    print(f"\nüîÑ –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (5 –∑–∞–ø—É—Å–∫–æ–≤):")
    
    times = []
    results_consistent = True
    baseline_result = None
    
    for run in range(5):
        print(f"   –ó–∞–ø—É—Å–∫ {run + 1}/5...", end=" ")
        
        tank_folder = "dxf_samples/TANK 300"
        polygons = []
        for i in range(1, 5):
            file_path = os.path.join(tank_folder, f"{i}.dxf")
            if os.path.exists(file_path):
                result = parse_dxf_complete(file_path, verbose=False)
                if result and result['combined_polygon']:
                    filename = f"TANK300_{i}.dxf"
                    polygons.append((result['combined_polygon'], filename, "—á—ë—Ä–Ω—ã–π", f"order_{i}"))
        
        start_time = time.time()
        placed, unplaced = bin_packing(polygons, (200, 140), verbose=False)
        end_time = time.time()
        
        run_time = end_time - start_time
        times.append(run_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        current_result = (len(placed), len(unplaced))
        if baseline_result is None:
            baseline_result = current_result
        elif baseline_result != current_result:
            results_consistent = False
        
        print(f"{run_time:.2f} —Å–µ–∫ ({len(placed)} —Ä–∞–∑–º–µ—â–µ–Ω–æ)")
    
    avg_time = sum(times) / len(times)
    min_time = min(times)
    max_time = max(times)
    
    print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} —Å–µ–∫")
    print(f"   üìä –ú–∏–Ω/–ú–∞–∫—Å: {min_time:.2f} / {max_time:.2f} —Å–µ–∫")
    print(f"   üìä –†–∞–∑–±—Ä–æ—Å: ¬±{((max_time - min_time) / avg_time * 100):.1f}%")
    
    if results_consistent:
        print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã: {baseline_result[0]} —Ä–∞–∑–º–µ—â–µ–Ω–æ, {baseline_result[1]} –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ")
    else:
        print(f"   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ!")
    
    return avg_time, results_consistent

def performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print(f"\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    placement_time, total_time = benchmark_tank300()
    avg_time, consistent = benchmark_multiple_runs()
    
    if placement_time is None:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if avg_time < 1.0:
        performance_rating = "üöÄ –û–¢–õ–ò–ß–ù–û"
        performance_desc = "–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ"
    elif avg_time < 3.0:
        performance_rating = "‚úÖ –•–û–†–û–®–û" 
        performance_desc = "–ë—ã—Å—Ç—Ä–æ"
    elif avg_time < 10.0:
        performance_rating = "‚ö†Ô∏è –ü–†–ò–ï–ú–õ–ï–ú–û"
        performance_desc = "–£–º–µ—Ä–µ–Ω–Ω–æ"
    else:
        performance_rating = "‚ùå –ú–ï–î–õ–ï–ù–ù–û"
        performance_desc = "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    
    print(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance_rating}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {performance_desc}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {avg_time:.2f} —Å–µ–∫")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print(f"\nüîß –ü–†–ò–ú–ï–ù–Å–ù–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print(f"   1. ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ bounding box –≤ check_collision")
    print(f"   2. ‚úÖ –†–∞–Ω–Ω–µ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –∫–æ–ª–ª–∏–∑–∏–π")
    print(f"   3. ‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü")
    print(f"   4. ‚úÖ –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
    print(f"   5. ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π offset'–æ–≤")
    
    success = avg_time < 10.0 and consistent
    
    if success:
        print(f"\nüéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    else:
        print(f"\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        if not consistent:
            print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã")
        if avg_time >= 10.0:
            print(f"   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")
    
    return success

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        success = performance_comparison()
        
        print("\n" + "=" * 70)
        if success:
            print("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"   –í–µ—Ä—Å–∏—è {__version__} –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø")
            
        print("\n–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:")
        print("1. –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à: python clear_python_cache.py")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Streamlit: streamlit run streamlit_demo.py")
        print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {__version__}")
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)