#!/usr/bin/env python3
"""
–ë–µ–Ω—á–º–∞—Ä–∫-—Ç–µ—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —Ç—Ä–µ–º—è –≥—Ä—É–ø–ø–∞–º–∏ –∫–æ–≤—Ä–∏–∫–æ–≤ BMW –∏ AUDI.
"""

import sys
import os
import time
import logging
from pathlib import Path

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import (
    bin_packing_with_inventory, 
    parse_dxf_complete, 
    Carpet,
    USE_IMPROVED_PACKING_BY_DEFAULT
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_test_sheets():
    """–°–æ–∑–¥–∞–µ—Ç 5 —á–µ—Ä–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ 144*200."""
    return [
        {
            "name": "–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç 144x200",
            "width": 144,
            "height": 200,
            "color": "—á—ë—Ä–Ω—ã–π", 
            "count": 5,
            "used": 0
        }
    ]

def load_carpets_from_folder(folder_path: str, group_name: str) -> list[Carpet]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ DXF —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏."""
    carpets = []
    folder = Path(folder_path)
    
    if not folder.exists():
        logger.error(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}")
        return carpets
    
    dxf_files = list(folder.glob("*.dxf"))
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(dxf_files)} DXF —Ñ–∞–π–ª–æ–≤ –≤ {folder_path}")
    
    for dxf_file in dxf_files:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º verbose=False —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Streamlit –≤—ã–∑–æ–≤–æ–≤
            polygon_data = parse_dxf_complete(str(dxf_file), verbose=False)
            if polygon_data and polygon_data.get("combined_polygon"):
                polygon = polygon_data["combined_polygon"]
                filename = dxf_file.name
                carpets.append(Carpet(polygon, filename, "—á—ë—Ä–Ω—ã–π", group_name, 1))
                logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω {filename}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
            continue
    
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(carpets)} –∫–æ–≤—Ä–∏–∫–æ–≤ –∏–∑ {group_name}")
    return carpets

def run_benchmark():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫-—Ç–µ—Å—Ç."""
    print("=== –ë–ï–ù–ß–ú–ê–†–ö-–¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–û–í –†–ê–ó–ú–ï–©–ï–ù–ò–Ø ===")
    print("–ö–ª–∏–µ–Ω—Ç —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç: —ç—Ç–∏ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ 2 –ª–∏—Å—Ç–∞")
    print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: —Ä–∞–∑–º–µ—â–∞–µ—Ç –Ω–∞ 3 –ª–∏—Å—Ç–∞")
    print("–¶–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º\n")
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = create_test_sheets()
    print(f"üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {available_sheets[0]['count']} –ª–∏—Å—Ç–æ–≤ {available_sheets[0]['width']}x{available_sheets[0]['height']} —Å–º")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–æ–≤—Ä–∏–∫–æ–≤
    carpet_groups = [
        ("dxf_samples/AUDI Q7 (4L) 1", "AUDI_Q7_4L_1"),
        ("dxf_samples/BMW X5 E53 1 –∏ —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥", "BMW_X5_E53_1"),
        ("dxf_samples/BMW X5 G05-G18 4 –∏ —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥", "BMW_X5_G05_G18_4"),
    ]
    
    all_carpets = []
    for folder_path, group_name in carpet_groups:
        carpets = load_carpets_from_folder(folder_path, group_name)
        all_carpets.extend(carpets)
        print(f"‚úÖ {group_name}: {len(carpets)} –∫–æ–≤—Ä–∏–∫–æ–≤")
    
    if not all_carpets:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–≤—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º.")
        return
    
    total_carpets = len(all_carpets)
    print(f"\nüìä –í—Å–µ–≥–æ –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_carpets}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å
    total_area_mm2 = sum(carpet.polygon.area for carpet in all_carpets)
    sheet_area_mm2 = (available_sheets[0]['width'] * 10) * (available_sheets[0]['height'] * 10)
    theoretical_sheets = total_area_mm2 / sheet_area_mm2
    
    print(f"üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–≤—Ä–∏–∫–æ–≤: {total_area_mm2/100:.0f} —Å–º¬≤")
    print(f"üìê –ü–ª–æ—â–∞–¥—å –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: {sheet_area_mm2/100:.0f} —Å–º¬≤") 
    print(f"üìä –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º: {theoretical_sheets:.2f} –ª–∏—Å—Ç–∞")
    print(f"üéØ –¶–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞: 2 –ª–∏—Å—Ç–∞ ({(total_area_mm2/(2*sheet_area_mm2))*100:.1f}% –∑–∞–≥—Ä—É–∑–∫–∞)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    print(f"\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: USE_IMPROVED_PACKING_BY_DEFAULT = {USE_IMPROVED_PACKING_BY_DEFAULT}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    print(f"\nüöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò...")
    print("-" * 50)
    
    start_time = time.time()
    
    def progress_callback(percent, status):
        if percent % 10 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 10%
            print(f"   {percent}% - {status}")
    
    try:
        placed_layouts, unplaced = bin_packing_with_inventory(
            all_carpets,
            available_sheets,
            verbose=True,
            progress_callback=progress_callback,
        )
        
        execution_time = time.time() - start_time
        
        print("-" * 50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
        print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ –∫–æ–≤—Ä–∏–∫–æ–≤: {total_carpets - len(unplaced)}/{total_carpets}")
        print(f"   –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)} –∫–æ–≤—Ä–∏–∫–æ–≤")
        
        if placed_layouts:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –ª–∏—Å—Ç–∞–º
            print(f"\nüìÑ –î–ï–¢–ê–õ–ò –ü–û –õ–ò–°–¢–ê–ú:")
            total_usage = 0
            for i, layout in enumerate(placed_layouts, 1):
                carpet_count = len(layout['placed_polygons'])
                usage = layout.get('usage_percent', 0)
                total_usage += usage
                print(f"   –õ–∏—Å—Ç {i}: {carpet_count} –∫–æ–≤—Ä–∏–∫–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
            
            avg_usage = total_usage / len(placed_layouts)
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {avg_usage:.1f}%")
        
        if unplaced:
            print(f"\n‚ùå –ù–ï–†–ê–ó–ú–ï–©–ï–ù–ù–´–ï –ö–û–í–†–´:")
            for carpet in unplaced:
                if hasattr(carpet, 'filename'):
                    bounds = carpet.polygon.bounds
                    size = f"{(bounds[2]-bounds[0])/10:.1f}x{(bounds[3]-bounds[1])/10:.1f}—Å–º"
                    print(f"   ‚Ä¢ {carpet.filename} ({size})")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\nüéØ –û–¶–ï–ù–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        if len(placed_layouts) <= 2:
            print("   ‚úÖ –û–¢–õ–ò–ß–ù–û! –£–ª–æ–∂–∏–ª–∏—Å—å –≤ —Ü–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (‚â§2 –ª–∏—Å—Ç–∞)")
        elif len(placed_layouts) == 3:
            print("   ‚ö†Ô∏è  –°–¢–ê–ù–î–ê–†–¢–ù–û! –ö–∞–∫ –æ–±—ã—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (3 –ª–∏—Å—Ç–∞)")
        elif len(placed_layouts) > 3:
            print("   ‚ùå –ü–õ–û–•–û! –•—É–∂–µ –æ–±—ã—á–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (>3 –ª–∏—Å—Ç–æ–≤)")
        
        if len(unplaced) == 0:
            print("   ‚úÖ –í—Å–µ –∫–æ–≤—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã!")
        else:
            print(f"   ‚ùå –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ {len(unplaced)} –∫–æ–≤—Ä–æ–≤")
            
        return {
            'sheets_used': len(placed_layouts),
            'carpets_placed': total_carpets - len(unplaced),
            'execution_time': execution_time,
            'average_usage': avg_usage if placed_layouts else 0,
            'unplaced_count': len(unplaced)
        }
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    result = run_benchmark()
    
    if result:
        print(f"\n{'='*50}")
        print("üìä –ò–¢–û–ì–û–í–´–ô –°–ß–ï–¢:")
        print(f"   –õ–∏—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result['sheets_used']} (—Ü–µ–ª—å: ‚â§2)")
        print(f"   –ö–æ–≤—Ä–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {result['carpets_placed']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {result['average_usage']:.1f}%")
        print(f"   –í—Ä–µ–º—è: {result['execution_time']:.1f} —Å–µ–∫")
        
        if result['sheets_used'] <= 2 and result['unplaced_count'] == 0:
            print("üèÜ –ê–õ–ì–û–†–ò–¢–ú –ü–†–û–®–ï–õ –¢–ï–°–¢!")
        else:
            print("üìà –ê–õ–ì–û–†–ò–¢–ú –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø")
    
    print(f"\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")