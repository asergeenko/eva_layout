#!/usr/bin/env python3
"""Test script to verify improved DXF search functionality."""

import os
import sys
sys.path.append('.')

def test_model_search():
    """Test the enhanced DXF search for complex model names."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ DXF —Ñ–∞–π–ª–æ–≤")
    print("=" * 60)
    
    # Test cases for different model formats
    test_cases = [
        {
            "article": "EVA_BORT+AUDI+A6 (C7) 4+2011-2018+black+15",
            "expected_parts": ["AUDI", "A6 (C7) 4"],
            "expected_keywords": ["a6", "c7", "4", "a6 4", "a6 c7", "a6 c7 4"]
        },
        {
            "article": "EVA_BORT+Changan+CX35PLUS+2018-2024+black+11", 
            "expected_parts": ["Changan", "CX35PLUS"],
            "expected_keywords": ["cx35plus", "cs35", "cs35 plus"]
        },
        {
            "article": "EVA_BORT+BMW+X5 (F15)+2013-2018+gray+20",
            "expected_parts": ["BMW", "X5 (F15)"],
            "expected_keywords": ["x5", "f15", "x5 f15"]
        }
    ]
    
    from streamlit_demo import find_dxf_files_for_article
    
    for i, test_case in enumerate(test_cases, 1):
        article = test_case["article"]
        expected_parts = test_case["expected_parts"]
        expected_keywords = test_case["expected_keywords"]
        
        print(f"\nüß™ –¢–µ—Å—Ç {i}: {article}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–∏: {expected_parts}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {expected_keywords}")
        
        # Test article parsing
        if '+' in article:
            parts = article.split('+')
            if len(parts) >= 3:
                brand = parts[1].strip()
                model_info = parts[2].strip()
                print(f"   ‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω –±—Ä–µ–Ω–¥: {brand}")
                print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_info}")
                
                # Test keyword generation for parentheses
                if '(' in model_info and ')' in model_info:
                    import re
                    parentheses_content = re.findall(r'\((.*?)\)', model_info)
                    base_model = re.sub(r'\s*\([^)]*\)\s*', ' ', model_info).strip()
                    print(f"   ‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–±–æ–∫: {parentheses_content}")
                    print(f"   ‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {base_model}")
                    
                    # Show generated variants
                    model_variants = [model_info]
                    model_variants.extend([
                        base_model,
                        model_info.replace('(', '').replace(')', ''),
                    ])
                    
                    for content in parentheses_content:
                        model_variants.extend([
                            f"{base_model} {content}",
                            f"{content} {base_model}",
                            content,
                        ])
                    
                    model_parts = re.sub(r'[^\w\s]', ' ', model_info).split()
                    model_variants.extend(model_parts)
                    
                    print(f"   üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {list(set(model_variants))}")
        
        # Try to find actual files (will work only if dxf_samples directory exists)
        try:
            found_files = find_dxf_files_for_article(article)
            if found_files:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(found_files)}")
                for file_path in found_files[:3]:  # Show first 3 files
                    print(f"      üìÑ {os.path.basename(file_path)}")
            else:
                print(f"   ‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç dxf_samples –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    print(f"\nüéØ –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–æ–±–æ–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –º–æ–¥–µ–ª–µ–π (A6 (C7) 4)")
    print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π –º–æ–¥–µ–ª–∏ (A6, C7, 4)")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —á–∞—Å—Ç–µ–π (A6 C7, A6 4, C7 4)")
    print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"   ‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–∞–ø–æ–∫")
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

if __name__ == "__main__":
    success = test_model_search()
    sys.exit(0 if success else 1)