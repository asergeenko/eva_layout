#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ 200_140_1_black.dxf –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏–π.
"""

from layout_optimizer import parse_dxf_complete, check_collision
import matplotlib.pyplot as plt

def analyze_overlap_in_file(filepath):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏–π –∫–æ–≤—Ä–æ–≤"""
    print(f"=== –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {filepath} ===")
    
    # –ß–∏—Ç–∞–µ–º DXF —Ñ–∞–π–ª
    result = parse_dxf_complete(filepath, verbose=True)
    
    if not result['polygons']:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
        return False
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(result['polygons'])}")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª–∏–≥–æ–Ω–µ
    print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–∏–≥–æ–Ω–∞—Ö:")
    carpets = []
    for i, polygon in enumerate(result['polygons']):
        bounds = polygon.bounds
        width_mm = bounds[2] - bounds[0]
        height_mm = bounds[3] - bounds[1]
        area_cm2 = polygon.area / 100  # mm¬≤ to cm¬≤
        
        print(f"  –ü–æ–ª–∏–≥–æ–Ω {i+1}:")
        print(f"    Bounds: {bounds}")
        print(f"    –†–∞–∑–º–µ—Ä: {width_mm/10:.1f}x{height_mm/10:.1f} —Å–º")
        print(f"    –ü–ª–æ—â–∞–¥—å: {area_cm2:.2f} —Å–º¬≤")
        
        # –ü–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω –æ–±—ã—á–Ω–æ –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
        if i == 0:
            print(f"    (–í–µ—Ä–æ—è—Ç–Ω–æ, –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞)")
        else:
            carpets.append((polygon, f"–ö–æ–≤–µ—Ä_{i}"))
    
    if len(carpets) == 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–≤—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞)")
        return False
    
    print(f"\n–ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É {len(carpets)} –∫–æ–≤—Ä–∞–º–∏:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–∂–¥—É –∫–æ–≤—Ä–∞–º–∏
    overlaps = []
    for i in range(len(carpets)):
        for j in range(i+1, len(carpets)):
            poly1, name1 = carpets[i]
            poly2, name2 = carpets[j]
            
            if check_collision(poly1, poly2):
                overlaps.append((i+1, j+1, name1, name2))
                print(f"  ‚ùå –ù–ê–õ–û–ñ–ï–ù–ò–ï –º–µ–∂–¥—É {name1} –∏ {name2}")
                print(f"    {name1}: bounds={poly1.bounds}")
                print(f"    {name2}: bounds={poly2.bounds}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                intersection = poly1.intersection(poly2)
                if intersection.area > 0:
                    intersection_cm2 = intersection.area / 100
                    print(f"    –ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {intersection_cm2:.2f} —Å–º¬≤")
            else:
                print(f"  ‚úÖ {name1} –∏ {name2}: –∫–æ–ª–ª–∏–∑–∏–π –Ω–µ—Ç")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    print(f"\n=== –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ===")
    
    fig, ax = plt.subplots(figsize=(12, 8))
    
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray', 'olive', 'cyan']
    
    # –†–∏—Å—É–µ–º –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    for i, polygon in enumerate(result['polygons']):
        color = colors[i % len(colors)]
        alpha = 0.3 if i == 0 else 0.7  # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ
        
        x, y = polygon.exterior.xy
        ax.fill(x, y, alpha=alpha, color=color, edgecolor='black', linewidth=2, 
                label=f'–ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞' if i == 0 else f'–ö–æ–≤–µ—Ä {i}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ —Ü–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞
        centroid = polygon.centroid
        label_text = '–õ–ò–°–¢' if i == 0 else f'–ö{i}'
        ax.annotate(label_text, (centroid.x, centroid.y), 
                   ha='center', va='center', fontsize=10, fontweight='bold', 
                   color='white' if i > 0 else 'black')
    
    ax.set_aspect("equal")
    ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    ax.grid(True, alpha=0.3)
    ax.set_title(f"–ê–Ω–∞–ª–∏–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏–π –≤ {filepath.split('/')[-1]}")
    ax.set_xlabel("X (–º–º)")
    ax.set_ylabel("Y (–º–º)")
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    output_image = filepath.replace('.dxf', '_analysis.png')
    plt.savefig(output_image, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_image}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê ===")
    if len(overlaps) == 0:
        print(f"‚úÖ –ù–ê–õ–û–ñ–ï–ù–ò–ô –ù–ï –ù–ê–ô–î–ï–ù–û")
        print(f"–í—Å–µ {len(carpets)} –∫–æ–≤—Ä–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print(f"‚ùå –ù–ê–ô–î–ï–ù–û {len(overlaps)} –ù–ê–õ–û–ñ–ï–ù–ò–ô:")
        for i, j, name1, name2 in overlaps:
            print(f"  - {name1} –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å {name2}")
        return False

if __name__ == "__main__":
    filepath = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    print("=" * 60)
    print("–ê–ù–ê–õ–ò–ó –ù–ê–õ–û–ñ–ï–ù–ò–ô –í DXF –§–ê–ô–õ–ï")
    print("=" * 60)
    
    success = analyze_overlap_in_file(filepath)
    
    print("=" * 60)
    if success:
        print("üéâ –§–ê–ô–õ –í –ü–û–†–Ø–î–ö–ï - –Ω–∞–ª–æ–∂–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        print("üö® –í –§–ê–ô–õ–ï –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ - –Ω–∞–π–¥–µ–Ω—ã –Ω–∞–ª–æ–∂–µ–Ω–∏—è!")
        print("–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∞–≥–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.")
    print("=" * 60)