#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ bounds —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""

import tempfile
import os
import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete, apply_placement_transform
from shapely.geometry import Polygon

def verify_spline_bounds():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç bounds —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    print("=== –ü–†–û–í–ï–†–ö–ê BOUNDS –¢–†–ê–ù–°–§–û–†–ú–ò–†–û–í–ê–ù–ù–´–• SPLINE ===")
    
    # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DXF —Ñ–∞–π–ª —Å SPLINE'–∞–º–∏
    source_dxf = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DXF
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    original_polygon = parsed_data['combined_polygon']
    orig_bounds = original_polygon.bounds
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"  Combined polygon bounds: {orig_bounds}")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    x_offset = -1000
    y_offset = 100
    rotation_angle = 0
    
    print(f"  –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: x_offset={x_offset}, y_offset={y_offset}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é
    spline_entities = [e for e in parsed_data['original_entities'] if e['type'] == 'SPLINE']
    print(f"  SPLINE'–æ–≤: {len(spline_entities)}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ bounds –≤—Å–µ—Ö SPLINE'–æ–≤ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    expected_xs = []
    expected_ys = []
    
    for spline_data in spline_entities:
        entity = spline_data['entity']
        control_points = entity.control_points
        
        if not control_points:
            continue
            
        for cp in control_points:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if hasattr(cp, 'x') and hasattr(cp, 'y'):
                x, y = cp.x, cp.y
            elif len(cp) >= 2:
                x, y = float(cp[0]), float(cp[1])
            else:
                continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            # Step 1: Normalize to origin
            x_norm = x - orig_bounds[0]
            y_norm = y - orig_bounds[1]
            
            # Step 2: Skip rotation (rotation_angle = 0)
            
            # Step 3: Apply final position
            x_final = x_norm + x_offset
            y_final = y_norm + y_offset
            
            expected_xs.append(x_final)
            expected_ys.append(y_final)
    
    if expected_xs and expected_ys:
        expected_bounds = (min(expected_xs), min(expected_ys), max(expected_xs), max(expected_ys))
        print(f"  üìê –û–∂–∏–¥–∞–µ–º—ã–µ bounds –í–°–ï–• SPLINE'–æ–≤: {expected_bounds}")
    else:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ bounds")
        return
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    file_name = "test_spline.dxf"
    color = "—á–µ—Ä–Ω—ã–π"
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è save_dxf_layout_complete
    expected_polygon_for_saving = apply_placement_transform(original_polygon, x_offset, y_offset, rotation_angle)
    placed_element = (expected_polygon_for_saving, x_offset, y_offset, rotation_angle, file_name, color)
    placed_elements = [placed_element]
    
    # –°–æ–∑–¥–∞–µ–º original_dxf_data_map
    original_dxf_data_map = {
        file_name: parsed_data
    }
    
    sheet_size = (200, 140)  # —Å–º
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        save_dxf_layout_complete(placed_elements, sheet_size, output_path, original_dxf_data_map)
        print(f"‚úÖ DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ bounds
        result_doc = ezdxf.readfile(output_path)
        result_msp = result_doc.modelspace()
        
        # –ò—â–µ–º SPLINE'—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        splines = [e for e in result_msp if e.dxftype() == 'SPLINE']
        
        actual_xs = []
        actual_ys = []
        
        for spline in splines:
            try:
                control_points = spline.control_points
                if control_points:
                    for cp in control_points:
                        if hasattr(cp, 'x') and hasattr(cp, 'y'):
                            actual_xs.append(cp.x)
                            actual_ys.append(cp.y)
                        elif len(cp) >= 2:
                            actual_xs.append(float(cp[0]))
                            actual_ys.append(float(cp[1]))
            except Exception as e:
                print(f"    –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ SPLINE: {e}")
        
        if actual_xs and actual_ys:
            actual_bounds = (min(actual_xs), min(actual_ys), max(actual_xs), max(actual_ys))
            print(f"  üìê –†–µ–∞–ª—å–Ω—ã–µ bounds –í–°–ï–• SPLINE'–æ–≤: {actual_bounds}")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            tolerance = 1.0  # 1–º–º –¥–æ–ø—É—Å–∫
            bounds_match = all(
                abs(actual_bounds[i] - expected_bounds[i]) < tolerance
                for i in range(4)
            )
            
            if bounds_match:
                print(f"  ‚úÖ BOUNDS –°–û–í–ü–ê–î–ê–Æ–¢! SPLINE'—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ö–û–†–†–ï–ö–¢–ù–û!")
                return True
            else:
                diff = [actual_bounds[i] - expected_bounds[i] for i in range(4)]
                print(f"  ‚ùå BOUNDS –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢!")
                print(f"  üìä –†–∞–∑–Ω–æ—Å—Ç–∏: {diff}")
                print(f"  üìä –ú–∞–∫—Å —Ä–∞–∑–Ω–æ—Å—Ç—å: {max(abs(d) for d in diff):.2f}")
                return False
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–∞–ª—å–Ω—ã–µ bounds")
            return False
        
    finally:
        if os.path.exists(output_path):
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

if __name__ == "__main__":
    success = verify_spline_bounds()
    print(f"\n{'‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' if success else '‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù'}")