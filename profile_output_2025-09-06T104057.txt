Timer unit: 1e-09 s

Total time: 1.81916 s
File: /home/sasha/proj/2025/eva_layout/layout_optimizer.py
Function: bin_packing at line 1187

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1187                                                               file_name,

Total time: 482.652 s
File: /home/sasha/proj/2025/eva_layout/layout_optimizer.py
Function: bin_packing_with_existing at line 1072

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1072                                           @profile
  1073                                           def bin_packing_with_existing(
  1074                                               polygons: list[Carpet],
  1075                                               existing_placed: list[tuple],
  1076                                               sheet_size: tuple[float, float],
  1077                                               verbose: bool = True,
  1078                                           ) -> tuple[list[tuple], list[tuple]]:
  1079                                               """Bin packing that considers already placed polygons on the sheet."""
  1080                                               # Convert sheet size from cm to mm to match DXF polygon units
  1081       220     505201.0   2296.4      0.0      sheet_width_mm, sheet_height_mm = sheet_size[0] * 10, sheet_size[1] * 10
  1082                                           
  1083       220     387160.0   1759.8      0.0      placed = []
  1084       220     377953.0   1718.0      0.0      unplaced = []
  1085                                           
  1086                                               # Start with existing placed polygons as obstacles
  1087       220     569170.0   2587.1      0.0      obstacles = [placed_tuple[0] for placed_tuple in existing_placed]
  1088                                           
  1089       220     379832.0   1726.5      0.0      if verbose:
  1090                                                   st.info(
  1091                                                       f"Дозаполняем лист с {len(obstacles)} существующими деталями, добавляем {len(polygons)} новых"
  1092                                                   )
  1093                                           
  1094                                               # IMPROVEMENT 1: Sort polygons by area and perimeter for better packing
  1095       220     422778.0   1921.7      0.0      def get_polygon_priority(polygon_tuple: Carpet):
  1096                                                   polygon = polygon_tuple.polygon
  1097                                                   # Combine area and perimeter for better sorting (larger, more complex shapes first)
  1098                                                   area = polygon.area
  1099                                                   bounds = polygon.bounds
  1100                                                   perimeter_approx = 2 * ((bounds[2] - bounds[0]) + (bounds[3] - bounds[1]))
  1101                                                   return area + perimeter_approx * 0.1
  1102                                           
  1103       220   36815864.0 167344.8      0.0      sorted_polygons = sorted(polygons, key=get_polygon_priority, reverse=True)
  1104                                           
  1105      1597    4109424.0   2573.2      0.0      for i, carpet in enumerate(sorted_polygons):
  1106      1377    2608747.0   1894.5      0.0          # ПРОФИЛИРОВАНИЕ: Измеряем время обработки каждого полигона
  1107      1377    3644872.0   2647.0      0.0          import time
  1108      1377    2648549.0   1923.4      0.0          polygon_start_time = time.time()
  1109      1377    2785699.0   2023.0      0.0          
  1110                                                   polygon = carpet.polygon
  1111      1377    2543380.0   1847.0      0.0          file_name = carpet.filename
  1112                                                   color = carpet.color
  1113                                                   order_id = carpet.order_id
  1114      1377   18498596.0  13434.0      0.0  
  1115      1377    2793329.0   2028.6      0.0          placed_successfully = False
  1116      1377    2694732.0   1957.0      0.0  
  1117                                                   # Check if polygon is too large for the sheet
  1118      1377    2677542.0   1944.5      0.0          bounds = polygon.bounds
  1119        63     106063.0   1683.5      0.0          poly_width = bounds[2] - bounds[0]
  1120        63      90229.0   1432.2      0.0          poly_height = bounds[3] - bounds[1]
  1121                                           
  1122                                                   if poly_width > sheet_width_mm or poly_height > sheet_height_mm:
  1123      1314    2603548.0   1981.4      0.0              unplaced.append((polygon, file_name, color, order_id))
  1124      1314    4504412.0   3428.0      0.0              continue
  1125                                           
  1126                                                   # Try all allowed orientations (0°, 90°, 180°, 270°) with better placement
  1127      1314    2523988.0   1920.8      0.0          best_placement = None
  1128                                                   best_waste = float("inf")
  1129      6570   14378913.0   2188.6      0.0  
  1130      5256  665766177.0 126667.8      0.1          # Only allowed rotation angles for cutting machines
  1131      5256   68222036.0  12979.8      0.0          rotation_angles = [0, 90, 180, 270]
  1132      5256   10382623.0   1975.4      0.0  
  1133      5256    8175503.0   1555.5      0.0          for angle in rotation_angles:
  1134                                                       rotated = rotate_polygon(polygon, angle) if angle != 0 else polygon
  1135                                                       rotated_bounds = rotated.bounds
  1136      5256   10272067.0   1954.4      0.0              rotated_width = rotated_bounds[2] - rotated_bounds[0]
  1137       116     174390.0   1503.4      0.0              rotated_height = rotated_bounds[3] - rotated_bounds[1]
  1138                                           
  1139                                                       # Skip if doesn't fit
  1140     10280     4.82e+11 4.69e+07     99.8              if rotated_width > sheet_width_mm or rotated_height > sheet_height_mm:
  1141      5140    7525024.0   1464.0      0.0                  continue
  1142                                           
  1143                                                       # Find position that avoids existing obstacles
  1144      5140   12408897.0   2414.2      0.0              # ПРОФИЛИРОВАНИЕ: Измеряем время поиска позиции
  1145                                                       pos_start_time = time.time()
  1146       300   11686896.0  38956.3      0.0              best_x, best_y = find_bottom_left_position_with_obstacles(
  1147       150     286335.0   1908.9      0.0                  rotated, obstacles, sheet_width_mm, sheet_height_mm
  1148                                                       )
  1149       300   11363624.0  37878.7      0.0              pos_elapsed = time.time() - pos_start_time
  1150       150     292553.0   1950.4      0.0              if pos_elapsed > 1.0:  # Логируем медленные поиски позиций
  1151       150     454395.0   3029.3      0.0                  logger.warning(f"⏱️ Медленный поиск позиции: {pos_elapsed:.2f}s для {len(obstacles)} препятствий")
  1152       150     276983.0   1846.6      0.0  
  1153       150     207086.0   1380.6      0.0              if best_x is not None and best_y is not None:
  1154                                                           # Calculate waste for this placement
  1155                                                           translated = translate_polygon(
  1156       150     304214.0   2028.1      0.0                      rotated, best_x - rotated_bounds[0], best_y - rotated_bounds[1]
  1157        72     121073.0   1681.6      0.0                  )
  1158        72     192922.0   2679.5      0.0                  # ПРОФИЛИРОВАНИЕ: Измеряем время расчета waste
  1159        72     102432.0   1422.7      0.0                  waste_start_time = time.time()
  1160        72     140973.0   1958.0      0.0                  waste = calculate_placement_waste(
  1161        72     108505.0   1507.0      0.0                      translated,
  1162        72     124630.0   1731.0      0.0                      [(obs, 0, 0, 0, "obstacle") for obs in obstacles],
  1163                                                               sheet_width_mm,
  1164                                                               sheet_height_mm,
  1165                                                           )
  1166      1314    2908006.0   2213.1      0.0                  waste_elapsed = time.time() - waste_start_time
  1167       124     226099.0   1823.4      0.0                  if waste_elapsed > 0.5:  # Логируем медленные расчеты waste
  1168        62      87004.0   1403.3      0.0                      logger.warning(f"⏱️ Медленный расчет waste: {waste_elapsed:.2f}s для {len(obstacles)} препятствий")
  1169        62     119541.0   1928.1      0.0  
  1170        62     113745.0   1834.6      0.0                  if waste < best_waste:
  1171        62     125404.0   2022.6      0.0                      best_waste = waste
  1172        62     114374.0   1844.7      0.0                      best_placement = {
  1173        62     113812.0   1835.7      0.0                          "polygon": translated,
  1174        62     104663.0   1688.1      0.0                          "x_offset": best_x - rotated_bounds[0],
  1175        62     101458.0   1636.4      0.0                          "y_offset": best_y - rotated_bounds[1],
  1176                                                                   "angle": angle,
  1177                                                               }
  1178                                           
  1179        62     121145.0   1954.0      0.0          # Apply best placement if found
  1180        62     118491.0   1911.1      0.0          if best_placement:
  1181                                                       placed.append(
  1182      1314    2304552.0   1753.8      0.0                  (
  1183      1252    3027409.0   2418.1      0.0                      best_placement["polygon"],
  1184                                                               best_placement["x_offset"],
  1185       220     756462.0   3438.5      0.0                      best_placement["y_offset"],
  1186                                                               best_placement["angle"],
  1187                                                               file_name,
  1188                                                               color,
  1189                                                               order_id,
  1190                                                           )
  1191                                                       )
  1192                                                       # Add this polygon as an obstacle for subsequent placements
  1193                                                       obstacles.append(best_placement["polygon"])
  1194                                                       placed_successfully = True
  1195                                           
  1196                                                   if not placed_successfully:
  1197                                                       unplaced.append((polygon, file_name, color, order_id))
  1198                                                   
  1199                                                   # ПРОФИЛИРОВАНИЕ: Логируем время обработки медленных полигонов
  1200                                                   polygon_elapsed = time.time() - polygon_start_time
  1201                                                   if polygon_elapsed > 2.0:  # Логируем полигоны, обрабатывающиеся дольше 2 секунд
  1202                                                       logger.warning(f"⏱️ Медленный полигон {file_name}: {polygon_elapsed:.2f}s, размещен={placed_successfully}")
  1203                                           
  1204                                               return placed, unplaced

Total time: 491.824 s
File: /home/sasha/proj/2025/eva_layout/layout_optimizer.py
Function: bin_packing_with_inventory at line 1617

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1617                                           
  1618                                           def calculate_placement_waste(polygon, placed_polygons, sheet_width, sheet_height):
  1619                                               """Calculate waste/inefficiency for a polygon placement."""
  1620                                               bounds = polygon.bounds
  1621                                           
  1622                                               # Calculate compactness - how close polygon is to other polygons and edges
  1623                                               edge_distance = min(bounds[0], bounds[1])  # Distance to bottom-left corner
  1624                                           
  1625                                               # Distance to other polygons
  1626       492   86421054.0 175652.5      0.0      min_neighbor_distance = float("inf")
  1627       982   77541502.0  78962.8      0.0      for placed_tuple in placed_polygons:
  1628       491    1079596.0   2198.8      0.0          placed_polygon = placed_tuple[0]
  1629                                                   placed_bounds = placed_polygon.bounds
  1630                                           
  1631       491     828232.0   1686.8      0.0          # Calculate minimum distance between bounding boxes
  1632       491     697688.0   1421.0      0.0          dx = max(0, max(bounds[0] - placed_bounds[2], placed_bounds[0] - bounds[2]))
  1633       982    1437996.0   1464.4      0.0          dy = max(0, max(bounds[1] - placed_bounds[3], placed_bounds[1] - bounds[3]))
  1634       982    1797816.0   1830.8      0.0          distance = (dx**2 + dy**2) ** 0.5
  1635                                           
  1636                                                   min_neighbor_distance = min(min_neighbor_distance, distance)
  1637       491     740533.0   1508.2      0.0  
  1638                                               if min_neighbor_distance == float("inf"):
  1639                                                   min_neighbor_distance = 0  # First polygon
  1640                                           
  1641                                               # Waste = edge_distance + average neighbor distance (lower is better)
  1642                                               waste = edge_distance + min_neighbor_distance * 0.5
  1643                                               return waste

  1.82 seconds - /home/sasha/proj/2025/eva_layout/layout_optimizer.py:1187 - bin_packing
482.65 seconds - /home/sasha/proj/2025/eva_layout/layout_optimizer.py:1072 - bin_packing_with_existing
491.82 seconds - /home/sasha/proj/2025/eva_layout/layout_optimizer.py:1617 - bin_packing_with_inventory
