#!/usr/bin/env python3

"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ save_dxf_layout_complete —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
"""

import sys
import os
sys.path.append('.')

from layout_optimizer import (
    parse_dxf_complete, 
    save_dxf_layout_complete
)
from shapely.geometry import Polygon

def test_simple_dxf_save():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("=== –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø DXF ===")
    
    # –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    small_polygon = Polygon([(0, 0), (100, 0), (100, 50), (0, 50)])
    
    # –ó–∞–≥—Ä—É–∑–∏–º –æ–¥–∏–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å IMAGE —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è original_dxf_data_map
    test_file = "dxf_samples/TOYOTA COROLLA VERSO/2.dxf"
    
    if not os.path.exists(test_file):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return
    
    try:
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {test_file}...")
        dxf_data = parse_dxf_complete(test_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π
        image_count = sum(1 for ed in dxf_data['original_entities'] if ed['type'] == 'IMAGE')
        print(f"  –ù–∞–π–¥–µ–Ω–æ IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π: {image_count}")
        
        if image_count == 0:
            print("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ placed_elements
        placed_elements = [
            (small_polygon, 50, 50, 0, test_file)  # (polygon, x_offset, y_offset, rotation_angle, file_name)
        ]
        
        # –°–æ–∑–¥–∞–µ–º original_dxf_data_map
        original_dxf_data_map = {
            test_file: dxf_data
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—Å—Ç–∞
        sheet_size = (1400, 2000)  # 140x200 —Å–º
        output_file = "test_simple_image_save.dxf"
        
        print(f"\n–í—ã–∑—ã–≤–∞–µ–º save_dxf_layout_complete...")
        print(f"  placed_elements: {len(placed_elements)}")
        print(f"  sheet_size: {sheet_size}")
        print(f"  output_file: {output_file}")
        print(f"  original_dxf_data_map: {list(original_dxf_data_map.keys())}")
        
        # –ì–õ–ê–í–ù–´–ô –í–´–ó–û–í - –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–ª–∞–¥–∫–∞
        save_dxf_layout_complete(
            placed_elements, 
            sheet_size, 
            output_file, 
            original_dxf_data_map
        )
        
        print(f"\n‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
        if os.path.exists("save_dxf_debug.log"):
            print(f"\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ save_dxf_debug.log:")
            with open("save_dxf_debug.log", "r", encoding="utf-8") as f:
                content = f.read()
                print(content)
        else:
            print(f"\n‚ùå –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ save_dxf_debug.log –ù–ï —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(output_file):
            print(f"\n‚úÖ DXF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_file}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º IMAGE –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
            import ezdxf
            doc = ezdxf.readfile(output_file)
            msp = doc.modelspace()
            
            image_entities = [e for e in msp if e.dxftype() == 'IMAGE']
            print(f"IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {len(image_entities)}")
            
            for i, img in enumerate(image_entities):
                if hasattr(img.dxf, 'insert'):
                    pos = img.dxf.insert
                    print(f"  IMAGE {i+1}: –ø–æ–∑–∏—Ü–∏—è ({pos[0]:.1f}, {pos[1]:.1f})")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏ –ª–∏—Å—Ç–∞
                    if 0 <= pos[0] <= sheet_size[0] and 0 <= pos[1] <= sheet_size[1]:
                        print(f"    ‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞")
                    else:
                        print(f"    ‚ùå –í–ù–ï –ø—Ä–µ–¥–µ–ª–æ–≤ –ª–∏—Å—Ç–∞! (–æ–∂–∏–¥–∞–µ–º–æ: 0-{sheet_size[0]}, 0-{sheet_size[1]})")
        else:
            print(f"\n‚ùå DXF —Ñ–∞–π–ª –ù–ï —Å–æ–∑–¥–∞–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_simple_dxf_save()