#!/usr/bin/env python3

from pathlib import Path
from dxf_utils import parse_dxf_complete
from layout_optimizer import Carpet, bin_packing_with_existing
from carpet import PlacedCarpet


def test_carpet_8_tetris_improvement():
    """–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∫–æ–≤—Ä–∞ 8.dxf - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–∞—è —Ç–µ—Ç—Ä–∏—Å–æ–≤–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç."""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–≤–µ—Ä 8.dxf
    dxf_file = Path("dxf_samples/SKODA KODIAQ/8.dxf")
    if not dxf_file.exists():
        print(f"‚ùå File not found: {dxf_file}")
        return

    try:
        polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
        if not polygon_data or not polygon_data.get("combined_polygon"):
            print("‚ùå Failed to parse DXF file")
            return

        base_polygon = polygon_data["combined_polygon"]
        carpet = Carpet(base_polygon, "8.dxf", "—á—ë—Ä–Ω—ã–π", "test", 1)

        print("üìä Testing carpet 8.dxf tetris behavior")
        print(f"Area: {base_polygon.area/10000:.1f} cm¬≤")
        print()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤
        from shapely import affinity

        obstacle_polygon = affinity.translate(
            base_polygon.buffer(0), xoff=300, yoff=300
        )
        existing_placed = [
            PlacedCarpet.from_carpet(
                Carpet(obstacle_polygon, "obstacle1.dxf", "—á—ë—Ä–Ω—ã–π", "test", 1), 0, 0, 0
            )
        ]

        print("üîÑ Testing placement with tetris quality assessment...")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ª–∏—Å—Ç–µ 140x200 —Å–º
        sheet_size = (140, 200)  # cm
        additional_placed, remaining_unplaced = bin_packing_with_existing(
            [carpet],
            existing_placed,
            sheet_size,
            verbose=True,  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        )

        if additional_placed:
            placed = additional_placed[0]
            print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
            print(f"Angle: {placed.angle}¬∞")
            print(f"Position: ({placed.x_offset:.1f}, {placed.y_offset:.1f})")
            print(f"Final bounds: {placed.polygon.bounds}")

            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            bounds = placed.polygon.bounds
            height = bounds[3] - bounds[1]
            width = bounds[2] - bounds[0]
            aspect_ratio = width / height if height > 0 else 1

            print(f"Dimensions: {width:.0f}mm x {height:.0f}mm")
            print(f"Aspect ratio: {aspect_ratio:.2f}")

            if placed.angle == 90 or placed.angle == 270:
                print("üéØ ‚úÖ Carpet was rotated - likely for better tetris quality!")
            else:
                print("‚ÑπÔ∏è  Carpet kept original orientation")

            # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–Ω–∏–∑—É
            bottom_y = bounds[1]
            if bottom_y > 50:  # –ë–æ–ª—å—à–µ 50–º–º –æ—Ç –Ω–∏–∑–∞
                print(
                    f"‚ö†Ô∏è  Carpet is {bottom_y:.0f}mm from bottom - some space below may be trapped"
                )
            else:
                print(
                    f"‚úÖ Carpet is close to bottom ({bottom_y:.0f}mm) - good tetris placement"
                )

        else:
            print("‚ùå Failed to place carpet")

        return additional_placed, remaining_unplaced

    except Exception as e:
        print(f"‚ùå Error: {e}")
        return [], []


if __name__ == "__main__":
    test_carpet_8_tetris_improvement()
