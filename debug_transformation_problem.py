#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DXF
"""

import sys
sys.path.insert(0, '.')

import os
import tempfile
import ezdxf
from layout_optimizer import parse_dxf_complete, bin_packing, save_dxf_layout_complete

def debug_transformation_problem():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò SPLINE")
    print("=" * 60)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–∑ TANK 300 –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    tank_file = "dxf_samples/TANK 300/1.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # 1. –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        print(f"\nüìã –®–ê–ì 1: –ü–ê–†–°–ò–ù–ì")
        result = parse_dxf_complete(tank_file, verbose=False)
        
        print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤: {len(result['polygons'])}")
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(result['original_entities'])}")
        
        if result['polygons']:
            first_poly = result['polygons'][0]
            bounds = first_poly.bounds
            print(f"  –ü–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω: {bounds[2]-bounds[0]:.1f}√ó{bounds[3]-bounds[1]:.1f}")
            print(f"  Bounds: ({bounds[0]:.1f}, {bounds[1]:.1f}, {bounds[2]:.1f}, {bounds[3]:.1f})")
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ - –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞ —Ä—è–¥–æ–º
        print(f"\nüì¶ –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        
        if not result['polygons']:
            print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
            
        test_poly = result['polygons'][0]
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: –æ–¥–Ω–æ –≤ (100, 100), –¥—Ä—É–≥–æ–µ –≤ (500, 100)
        placed = [
            (test_poly, 100, 100, 0, "test1.dxf", "—á–µ—Ä–Ω—ã–π"),
            (test_poly, 500, 100, 0, "test2.dxf", "—á–µ—Ä–Ω—ã–π") 
        ]
        
        print(f"  –°–æ–∑–¥–∞–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: {len(placed)}")
        print(f"  –†–∞–∑–º–µ—â–µ–Ω–∏–µ 1: x=100, y=100")
        print(f"  –†–∞–∑–º–µ—â–µ–Ω–∏–µ 2: x=500, y=100")
        print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏: 400–º–º")
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ DXF
        print(f"\nüíæ –®–ê–ì 3: –°–û–•–†–ê–ù–ï–ù–ò–ï –í DXF")
        
        original_dxf_data_map = {
            "test1.dxf": result,
            "test2.dxf": result
        }
        
        with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
            output_path = tmp_file.name
        
        save_dxf_layout_complete(placed, (140, 200), output_path, original_dxf_data_map, verbose=False)
        print(f"  DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –®–ê–ì 4: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê")
        
        saved_doc = ezdxf.readfile(output_path)
        saved_msp = saved_doc.modelspace()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–ª–æ—è–º (—Ñ–∞–π–ª–∞–º)
        splines_by_layer = {}
        for entity in saved_msp:
            if entity.dxftype() == 'SPLINE':
                layer = getattr(entity.dxf, 'layer', '0')
                if layer not in splines_by_layer:
                    splines_by_layer[layer] = []
                splines_by_layer[layer].append(entity)
        
        print(f"  –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–µ–≤ —Å–æ SPLINE: {len(splines_by_layer)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è (—Ñ–∞–π–ª–∞)
        for layer, splines in splines_by_layer.items():
            print(f"\n    –°–õ–û–ô: {layer}")
            print(f"      SPLINE –æ–±—ä–µ–∫—Ç–æ–≤: {len(splines)}")
            
            if splines:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π SPLINE –≤ —ç—Ç–æ–º —Å–ª–æ–µ
                spline = splines[0]
                if hasattr(spline, 'control_points') and spline.control_points:
                    first_cp = spline.control_points[0]
                    if hasattr(first_cp, 'x'):
                        x, y = first_cp.x, first_cp.y
                    else:
                        x, y = first_cp[0], first_cp[1]
                    
                    print(f"      –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: ({x:.1f}, {y:.1f})")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö SPLINE –≤ —ç—Ç–æ–º —Å–ª–æ–µ
                    all_x, all_y = [], []
                    for s in splines:
                        if hasattr(s, 'control_points') and s.control_points:
                            for cp in s.control_points:
                                if hasattr(cp, 'x'):
                                    all_x.append(cp.x)
                                    all_y.append(cp.y)
                                else:
                                    all_x.append(cp[0])
                                    all_y.append(cp[1])
                    
                    if all_x and all_y:
                        min_x, max_x = min(all_x), max(all_x)
                        min_y, max_y = min(all_y), max(all_y)
                        width = max_x - min_x
                        height = max_y - min_y
                        center_x = (min_x + max_x) / 2
                        center_y = (min_y + max_y) / 2
                        
                        print(f"      –ì—Ä–∞–Ω–∏—Ü—ã: ({min_x:.1f}, {min_y:.1f}) - ({max_x:.1f}, {max_y:.1f})")
                        print(f"      –†–∞–∑–º–µ—Ä: {width:.1f}√ó{height:.1f}")
                        print(f"      –¶–µ–Ω—Ç—Ä: ({center_x:.1f}, {center_y:.1f})")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
        print(f"\nüîç –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –†–ê–°–°–¢–û–Ø–ù–ò–ô")
        
        layer_names = list(splines_by_layer.keys())
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–ª–æ–∏ —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        test1_layers = [l for l in layer_names if l.startswith('test1_')]
        test2_layers = [l for l in layer_names if l.startswith('test2_')]
        
        if test1_layers and test2_layers:
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            matching_pairs = []
            for t1_layer in test1_layers:
                layer_suffix = t1_layer.replace('test1_', '')
                t2_layer = f'test2_{layer_suffix}'
                if t2_layer in test2_layers:
                    matching_pairs.append((t1_layer, t2_layer))
            
            if matching_pairs:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
                t1_layer, t2_layer = matching_pairs[0]
                
                def get_layer_center(layer):
                    splines = splines_by_layer[layer]
                    all_x, all_y = [], []
                    for s in splines:
                        if hasattr(s, 'control_points') and s.control_points:
                            for cp in s.control_points:
                                if hasattr(cp, 'x'):
                                    all_x.append(cp.x)
                                    all_y.append(cp.y)
                                else:
                                    all_x.append(cp[0])
                                    all_y.append(cp[1])
                    
                    if all_x and all_y:
                        return (min(all_x) + max(all_x)) / 2, (min(all_y) + max(all_y)) / 2
                    return None, None
                
                c1_x, c1_y = get_layer_center(t1_layer)
                c2_x, c2_y = get_layer_center(t2_layer)
                
                if c1_x is not None and c2_x is not None:
                    distance = ((c2_x - c1_x)**2 + (c2_y - c1_y)**2)**0.5
                    
                    print(f"  –¶–µ–Ω—Ç—Ä –æ–±—ä–µ–∫—Ç–∞ 1 ({t1_layer}): ({c1_x:.1f}, {c1_y:.1f})")
                    print(f"  –¶–µ–Ω—Ç—Ä –æ–±—ä–µ–∫—Ç–∞ 2 ({t2_layer}): ({c2_x:.1f}, {c2_y:.1f})")
                    print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏: {distance:.1f}–º–º")
                    print(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: 400–º–º")
                
                if abs(distance - 400) < 50:
                    print(f"  ‚úÖ –†–ê–°–°–¢–û–Ø–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ï")
                else:
                    print(f"  ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–°–°–¢–û–Ø–ù–ò–ï! –†–∞–∑–Ω–∏—Ü–∞: {abs(distance - 400):.1f}–º–º")
                    
                    if distance < 100:
                        print(f"  üö® –û–ë–™–ï–ö–¢–´ –ù–ê–ö–õ–ê–î–´–í–ê–Æ–¢–°–Ø! (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 100–º–º)")
        
        # –û—á–∏—Å—Ç–∫–∞
        try:
            os.unlink(output_path)
        except:
            pass
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_transformation_problem()