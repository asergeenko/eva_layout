#!/usr/bin/env python3

"""
–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ DXF —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π IMAGE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

import sys
import os
sys.path.append('.')

from layout_optimizer import (
    parse_dxf_complete, 
    bin_packing_with_inventory,
    save_dxf_layout_complete
)
from shapely.geometry import Polygon

def create_fixed_dxf():
    """–°–æ–∑–¥–∞–Ω–∏–µ DXF —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π IMAGE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    print("=== –°–û–ó–î–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û DXF ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Ñ–∞–π–ª—ã, —á—Ç–æ –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º 200_140_1_black.dxf
    sample_files = [
        "dxf_samples/–õ–æ–¥–∫–∞ –ê–∑–∏–º—É—Ç –≠–≤–µ—Ä–µ—Å—Ç 385/2.dxf",
        "dxf_samples/–õ–æ–¥–∫–∞ –ê–ì–£–õ 270/2.dxf", 
        "dxf_samples/TOYOTA COROLLA VERSO/2.dxf",
        "dxf_samples/–î–ï–ö–ê KUGOO M4 PRO JILONG/1.dxf"
    ]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º DXF –¥–∞–Ω–Ω—ã–µ
    original_dxf_data_map = {}
    polygons_for_placement = []
    
    for file_path in sample_files:
        if os.path.exists(file_path):
            try:
                print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {file_path}...")
                dxf_data = parse_dxf_complete(file_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π
                image_count = sum(1 for ed in dxf_data['original_entities'] if ed['type'] == 'IMAGE')
                spline_count = sum(1 for ed in dxf_data['original_entities'] if ed['type'] == 'SPLINE')
                print(f"  IMAGE: {image_count}, SPLINE: {spline_count}")
                
                original_dxf_data_map[file_path] = dxf_data
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω
                polygon = dxf_data['combined_polygon']
                if polygon:
                    color = "—á–µ—Ä–Ω—ã–π"
                    order_id = f"order_{len(polygons_for_placement)}"
                    polygons_for_placement.append((polygon, os.path.basename(file_path), color, order_id))
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    if not polygons_for_placement:
        print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return
    
    print(f"\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(polygons_for_placement)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ª–∏—Å—Ç–µ 140x200 —Å–º
    sheet_size = (140, 200)  # –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö - bin_packing –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –º–º –≤–Ω—É—Ç—Ä–∏
    available_sheets = [
        {'width': sheet_size[0], 'height': sheet_size[1], 'count': 1, 'used': 0, 'color': '—á–µ—Ä–Ω—ã–π', 'name': '140x200'}
    ]
    
    print(f"\n–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ...")
    try:
        layouts, unplaced = bin_packing_with_inventory(
            polygons_for_placement,
            available_sheets,
            verbose=True
        )
        
        if layouts:
            layout = layouts[0]
            print(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ {len(layout['placed_polygons'])} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π DXF —Ñ–∞–π–ª
            output_file = "200_140_1_black_FIXED.dxf"
            
            print(f"\n–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π DXF: {output_file}")
            save_dxf_layout_complete(
                layout['placed_polygons'], 
                layout['sheet_size'], 
                output_file, 
                original_dxf_data_map
            )
            
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            import ezdxf
            doc = ezdxf.readfile(output_file)
            msp = doc.modelspace()
            
            image_entities = [e for e in msp if e.dxftype() == 'IMAGE']
            spline_entities = [e for e in msp if e.dxftype() == 'SPLINE']
            
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            print(f"  IMAGE —Å—É—â–Ω–æ—Å—Ç–µ–π: {len(image_entities)}")
            print(f"  SPLINE —Å—É—â–Ω–æ—Å—Ç–µ–π: {len(spline_entities)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã IMAGE
            in_bounds_count = 0
            for i, img in enumerate(image_entities):
                if hasattr(img.dxf, 'insert'):
                    pos = img.dxf.insert
                    
                    if 0 <= pos[0] <= sheet_size[0] and 0 <= pos[1] <= sheet_size[1]:
                        in_bounds_count += 1
                        status = "‚úÖ"
                    else:
                        status = "‚ùå"
                    
                    print(f"  IMAGE {i+1}: {status} ({pos[0]:.1f}, {pos[1]:.1f})")
            
            print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"  IMAGE –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞: {in_bounds_count}/{len(image_entities)}")
            
            if in_bounds_count > len(image_entities) // 2:
                print(f"üéâ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ IMAGE –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö!")
                print(f"\nüìù –¢–µ–ø–µ—Ä—å –∑–∞–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª:")
                print(f"  cp {output_file} 200_140_1_black.dxf")
                print(f"  –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ autodesk.png")
            else:
                print(f"‚ö†Ô∏è  –í—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å IMAGE –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
                
        else:
            print("‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    create_fixed_dxf()