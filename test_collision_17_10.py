#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É EXEED VX/2.dxf –∏ HONDA FREED 2+/10.dxf
–∏–∑ —Ñ–∞–π–ª–∞ "17.10 –¥–µ–Ω—å.xlsx"
"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from excel_loader import parse_orders_from_excel
from layout_optimizer import bin_packing, check_collision
import logging
import pandas as pd

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Excel
    excel_file = "17.10 –¥–µ–Ω—å.xlsx"

    logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ {excel_file}...")

    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    df = pd.read_excel(excel_file, sheet_name="ZAKAZ", engine="openpyxl")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω DataFrame: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")

    orders = parse_orders_from_excel(df)

    if not orders:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã!")
        return

    logger.info(
        f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ (–Ω–æ –∑–∞–≥—Ä—É–∑–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–≤—Ä—ã)"
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–≤—Ä—ã
    from carpet import Carpet
    from dxf_utils import parse_dxf

    test_carpets = [
        ("data/EXEED VX/2.dxf", "EXEED VX/2.dxf", "—á—ë—Ä–Ω—ã–π"),
        ("data/HONDA FREED 2+/10.dxf", "HONDA FREED 2+/10.dxf", "—á—ë—Ä–Ω—ã–π"),
    ]

    all_carpets = []
    for dxf_path, filename, color in test_carpets:
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º: {dxf_path}")
            polygon = parse_dxf(dxf_path, verbose=False)
            if polygon:
                carpet = Carpet(
                    polygon=polygon,
                    filename=filename,
                    color=color,
                    order_id="test",
                    priority=1,
                )
                all_carpets.append(carpet)
                logger.info(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω: {filename}, bounds: {polygon.bounds}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å DXF: {dxf_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_path}: {e}")

    logger.info(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–≤—Ä–æ–≤: {len(all_carpets)}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–∞
    sheet_size = (140, 200)  # 140x200 —Å–º
    sheet_width_mm = sheet_size[0] * 10
    sheet_height_mm = sheet_size[1] * 10

    logger.info(
        f"–†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: {sheet_size[0]}x{sheet_size[1]} —Å–º ({sheet_width_mm}x{sheet_height_mm} –º–º)"
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º bin_packing —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º bin_packing –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞...")
    placed, unplaced = bin_packing(all_carpets, sheet_size=sheet_size)

    logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–æ –∫–æ–≤—Ä–æ–≤: {len(placed)}")
    logger.info(f"–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –∫–æ–≤—Ä–æ–≤: {len(unplaced)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    logger.info("\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø:")
    collision_found = False

    for i in range(len(placed)):
        for j in range(i + 1, len(placed)):
            if check_collision(
                placed[i].polygon,
                placed[j].polygon,
                min_gap=10.0,
            ):
                collision_found = True
                logger.error("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï!")
                logger.error(f"   –ö–æ–≤—ë—Ä {i}: {placed[i].filename}")
                logger.error(f"   –ö–æ–≤—ë—Ä {j}: {placed[j].filename}")
                logger.error(
                    f"   X offset {i}: {placed[i].x_offset:.1f}, Y offset: {placed[i].y_offset:.1f}"
                )
                logger.error(
                    f"   X offset {j}: {placed[j].x_offset:.1f}, Y offset: {placed[j].y_offset:.1f}"
                )
                logger.error(f"   Bounds {i}: {placed[i].polygon.bounds}")
                logger.error(f"   Bounds {j}: {placed[j].polygon.bounds}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏—Å–∫–æ–º—ã–µ —Ñ–∞–π–ª—ã
                if (
                    "EXEED VX/2.dxf" in placed[i].filename
                    and "HONDA FREED 2+/10.dxf" in placed[j].filename
                ) or (
                    "EXEED VX/2.dxf" in placed[j].filename
                    and "HONDA FREED 2+/10.dxf" in placed[i].filename
                ):
                    logger.error("\n‚ö†Ô∏è  –≠–¢–û –ò–ú–ï–ù–ù–û –¢–û –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –ò–ó –ó–ê–î–ê–ß–ò!")

    if not collision_found:
        logger.info("‚úì –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    else:
        logger.error("\n‚ùå –í–°–ï–ì–û –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô: –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ")

    return collision_found


if __name__ == "__main__":
    has_collision = main()
    sys.exit(1 if has_collision else 0)
