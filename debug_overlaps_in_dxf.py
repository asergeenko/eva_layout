#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–ª–æ–∂–µ–Ω–∏–π –≤ DXF —Ñ–∞–π–ª–µ
"""

import sys
sys.path.insert(0, '.')

import os
import tempfile
import ezdxf
from layout_optimizer import (
    parse_dxf_complete, bin_packing_with_inventory, 
    save_dxf_layout_complete
)

def debug_overlaps_in_dxf():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–π –≤ DXF"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–õ–û–ñ–ï–ù–ò–ô –í DXF")
    print("=" * 50)
    
    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç
    tank_files = [
        "dxf_samples/TANK 300/1.dxf",
        "dxf_samples/TANK 300/2.dxf", 
        "dxf_samples/TANK 300/3.dxf",
        "dxf_samples/TANK 300/4.dxf"
    ]
    
    # –°–æ–∑–¥–∞–µ–º 5 –∫–æ–ø–∏–π (–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    all_polygons = []
    original_dxf_data_map = {}
    
    print("üì¶ –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–• (–∫–∞–∫ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Å—Ç–µ)")
    
    for copy_num in range(1, 6):  # 5 –∫–æ–ø–∏–π
        for file_path in tank_files:
            if not os.path.exists(file_path):
                continue
                
            file_name = os.path.basename(file_path)
            copy_name = f"{copy_num}_–∫–æ–ø–∏—è_{file_name}"
            
            # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
            result = parse_dxf_complete(file_path, verbose=False)
            if result['polygons']:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
                for i, poly in enumerate(result['polygons']):
                    poly_name = f"{copy_name}_poly_{i}"
                    all_polygons.append((poly, poly_name, "—á–µ—Ä–Ω—ã–π", copy_num))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DXF
                original_dxf_data_map[copy_name] = result
    
    print(f"  –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(all_polygons)}")
    print(f"  –§–∞–π–ª–æ–≤ DXF: {len(original_dxf_data_map)}")
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = []
    sheet_size = (140, 200)  # 140x200 —Å–º
    for i in range(1):  # —Ç–æ–ª—å–∫–æ 1 –ª–∏—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        available_sheets.append({
            'name': f'sheet_{i+1}',
            'width': sheet_size[0],
            'height': sheet_size[1], 
            'count': 1,
            'used': 0,
            'color': '—á–µ—Ä–Ω—ã–π'
        })
    
    print(f"\nüéØ –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ù–ê 1 –õ–ò–°–¢–ï {sheet_size[0]}√ó{sheet_size[1]}—Å–º")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons, available_sheets, verbose=False
    )
    
    if not placed_layouts:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ!")
        return
    
    layout = placed_layouts[0]
    placed_polygons = layout['placed_polygons']
    
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(placed_polygons)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –í –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
    
    placed_info = []
    for i, placed_item in enumerate(placed_polygons):
        # –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(placed_item) >= 6:
            polygon, x_offset, y_offset, rotation, filename, color = placed_item[:6]
        else:
            polygon, x_offset, y_offset, rotation, filename = placed_item[:5]
            color = '—á–µ—Ä–Ω—ã–π'
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        bounds = polygon.bounds
        center_x = (bounds[0] + bounds[2]) / 2
        center_y = (bounds[1] + bounds[3]) / 2
        
        placed_info.append({
            'index': i,
            'filename': filename,
            'center': (center_x, center_y),
            'bounds': bounds,
            'size': (bounds[2] - bounds[0], bounds[3] - bounds[1])
        })
        
        print(f"  –û–±—ä–µ–∫—Ç {i}: {filename}")
        print(f"    –¶–µ–Ω—Ç—Ä: ({center_x:.1f}, {center_y:.1f})")
        print(f"    –†–∞–∑–º–µ—Ä: {bounds[2] - bounds[0]:.1f}√ó{bounds[3] - bounds[1]:.1f}–º–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print(f"\nüìè –†–ê–°–°–¢–û–Ø–ù–ò–Ø –í –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
    for i in range(len(placed_info)):
        for j in range(i + 1, len(placed_info)):
            obj1 = placed_info[i]
            obj2 = placed_info[j]
            
            distance = ((obj2['center'][0] - obj1['center'][0])**2 + 
                       (obj2['center'][1] - obj1['center'][1])**2)**0.5
            
            print(f"  {obj1['filename']} ‚Üî {obj2['filename']}: {distance:.1f}–º–º")
            
            if distance < 200:  # –º–µ–Ω—å—à–µ 20—Å–º
                print(f"    ‚ö†Ô∏è –ë–õ–ò–ó–ö–û! –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ")
    
    # –°–æ–∑–¥–∞–µ–º DXF –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    print(f"\nüíæ –°–û–ó–î–ê–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó DXF")
    
    # –°–æ–∑–¥–∞–µ–º original_dxf_data_map –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    layout_dxf_map = {}
    for placed_item in placed_polygons:
        poly_name = placed_item[4]  # –∏–º—è –ø–æ–ª–∏–≥–æ–Ω–∞
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        if '_poly_' in poly_name:
            base_name = poly_name.split('_poly_')[0]
            if base_name in original_dxf_data_map:
                layout_dxf_map[poly_name] = original_dxf_data_map[base_name]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º DXF
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        test_output = tmp_file.name
    
    save_dxf_layout_complete(
        placed_polygons, 
        sheet_size, 
        test_output, 
        layout_dxf_map, 
        verbose=False
    )
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π DXF
    saved_doc = ezdxf.readfile(test_output)
    saved_msp = saved_doc.modelspace()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º
    elements_by_file = {}
    for entity in saved_msp:
        if entity.dxftype() == 'SPLINE':
            layer = getattr(entity.dxf, 'layer', '0')
            file_part = layer.split('_')[0] + '_' + layer.split('_')[1] + '_' + layer.split('_')[2] + '.dxf'  # –Ω–∞–ø—Ä–∏–º–µ—Ä "1_–∫–æ–ø–∏—è_1.dxf"
            
            if file_part not in elements_by_file:
                elements_by_file[file_part] = []
            elements_by_file[file_part].append(entity)
    
    print(f"  –§–∞–π–ª–æ–≤ –≤ DXF: {len(elements_by_file)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ DXF
    print(f"\nüìç –ü–û–ó–ò–¶–ò–ò –§–ê–ô–õ–û–í –í DXF")
    
    file_centers = {}
    for file_name, entities in elements_by_file.items():
        all_x, all_y = [], []
        
        for entity in entities:
            if hasattr(entity, 'control_points') and entity.control_points:
                for cp in entity.control_points:
                    if hasattr(cp, 'x'):
                        all_x.append(cp.x)
                        all_y.append(cp.y)
                    else:
                        all_x.append(cp[0])
                        all_y.append(cp[1])
        
        if all_x and all_y:
            center_x = (min(all_x) + max(all_x)) / 2
            center_y = (min(all_y) + max(all_y)) / 2
            width = max(all_x) - min(all_x)
            height = max(all_y) - min(all_y)
            
            file_centers[file_name] = (center_x, center_y)
            
            print(f"  {file_name}:")
            print(f"    –¶–µ–Ω—Ç—Ä –≤ DXF: ({center_x:.1f}, {center_y:.1f})")
            print(f"    –†–∞–∑–º–µ—Ä –≤ DXF: {width:.1f}√ó{height:.1f}–º–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ DXF
    print(f"\nüìè –†–ê–°–°–¢–û–Ø–ù–ò–Ø –í DXF")
    file_list = list(file_centers.keys())
    for i in range(len(file_list)):
        for j in range(i + 1, len(file_list)):
            file1 = file_list[i]
            file2 = file_list[j]
            
            center1 = file_centers[file1]
            center2 = file_centers[file2]
            
            distance = ((center2[0] - center1[0])**2 + 
                       (center2[1] - center1[1])**2)**0.5
            
            print(f"  {file1} ‚Üî {file2}: {distance:.1f}–º–º")
            
            if distance < 100:  # –º–µ–Ω—å—à–µ 10—Å–º
                print(f"    üö® –ù–ê–õ–û–ñ–ï–ù–ò–ï –í DXF!")
    
    # –û—á–∏—Å—Ç–∫–∞
    try:
        os.unlink(test_output)
    except:
        pass

if __name__ == "__main__":
    debug_overlaps_in_dxf()