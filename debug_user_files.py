#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
"""

import sys
sys.path.insert(0, '.')

import os
import tempfile
import ezdxf
from layout_optimizer import (
    parse_dxf_complete, bin_packing_with_inventory, 
    save_dxf_layout_complete, plot_layout
)

def debug_user_files():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    # –ë–µ—Ä–µ–º —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É —Å–ø–∏—Å–∫—É
    target_files = [
        "dxf_samples/–õ–æ–¥–∫–∞ –ê–∑–∏–º—É—Ç –≠–≤–µ—Ä–µ—Å—Ç 385/2.dxf",
        "dxf_samples/VOLKSWAGEN TIGUAN 2/2.dxf", 
        "dxf_samples/–õ–æ–¥–∫–∞ –ê–ì–£–õ 270/2.dxf",
        "dxf_samples/SSANG YONG KYRON/1.dxf",
        "dxf_samples/TOYOTA FORTUNER/3.dxf",
        "dxf_samples/–ö–æ–≤—Ä–∏–∫ –¥–ª—è –æ–±—É–≤–∏ –ø—Ä–∏–¥–≤–µ—Ä–Ω—ã–π/1.dxf",
        "dxf_samples/VOLVO S80 1/3.dxf",
        "dxf_samples/VOLKSWAGEN TIGUAN 2/3.dxf"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    found_files = []
    for file_path in target_files:
        if os.path.exists(file_path):
            found_files.append(file_path)
        else:
            print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–µ, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
    if len(found_files) < 4:
        print("\nüîç –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã...")
        for root, dirs, files in os.walk("dxf_samples"):
            folder_name = os.path.basename(root)
            if any(name in folder_name for name in ["–õ–æ–¥–∫–∞", "VOLKSWAGEN", "SSANG", "TOYOTA", "–ö–æ–≤—Ä–∏–∫", "VOLVO"]):
                for file in files[:3]:  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏
                    if file.endswith('.dxf'):
                        full_path = os.path.join(root, file)
                        if full_path not in found_files:
                            found_files.append(full_path)
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(found_files)}")
    for f in found_files:
        print(f"  ‚Ä¢ {f}")
    
    if not found_files:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    all_polygons = []
    original_dxf_data_map = {}
    
    print(f"\nüì¶ –ü–ê–†–°–ò–ù–ì –§–ê–ô–õ–û–í")
    for file_path in found_files:
        file_name = os.path.basename(file_path)
        
        try:
            result = parse_dxf_complete(file_path, verbose=False)
            if result['polygons']:
                poly = result['polygons'][0]  # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω
                all_polygons.append((poly, file_name, "—á–µ—Ä–Ω—ã–π", 1))
                original_dxf_data_map[file_name] = result
                
                bounds = poly.bounds
                print(f"  ‚úÖ {file_name}: {bounds[2]-bounds[0]:.1f}√ó{bounds[3]-bounds[1]:.1f}–º–º")
            else:
                print(f"  ‚ùå {file_name}: –Ω–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
        except Exception as e:
            print(f"  ‚ùå {file_name}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - {e}")
    
    print(f"\n  –ì–æ—Ç–æ–≤–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(all_polygons)}")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ 140√ó200—Å–º
    available_sheets = [{
        'name': 'test_sheet',
        'width': 140,
        'height': 200, 
        'count': 1,
        'used': 0,
        'color': '—á–µ—Ä–Ω—ã–π'
    }]
    
    print(f"\nüéØ –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ù–ê –õ–ò–°–¢–ï 140√ó200—Å–º")
    
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons, available_sheets, verbose=False
    )
    
    if not placed_layouts:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ!")
        return
        
    layout = placed_layouts[0]
    placed_polygons = layout['placed_polygons']
    
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(placed_polygons)}")
    print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –í –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
    
    for i, placed_item in enumerate(placed_polygons):
        if len(placed_item) >= 6:
            polygon, x_offset, y_offset, rotation, filename, color = placed_item[:6]
        else:
            polygon, x_offset, y_offset, rotation, filename = placed_item[:5]
            color = '—á–µ—Ä–Ω—ã–π'
        
        bounds = polygon.bounds
        center_x = (bounds[0] + bounds[2]) / 2
        center_y = (bounds[1] + bounds[3]) / 2
        
        print(f"  {i}: {filename}")
        print(f"    –¶–µ–Ω—Ç—Ä: ({center_x:.1f}, {center_y:.1f})")
        print(f"    –ü–æ–≤–æ—Ä–æ—Ç: {rotation}¬∞")
        print(f"    –†–∞–∑–º–µ—Ä: {bounds[2]-bounds[0]:.1f}√ó{bounds[3]-bounds[1]:.1f}–º–º")
        print(f"    Offsets: x={x_offset:.1f}, y={y_offset:.1f}")
    
    # –°–æ–∑–¥–∞–µ–º DXF –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    print(f"\nüíæ –°–û–ó–î–ê–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó DXF")
    
    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DXF
    layout_dxf_map = {}
    for placed_item in placed_polygons:
        filename = placed_item[4]  # –∏–º—è —Ñ–∞–π–ª–∞
        if filename in original_dxf_data_map:
            layout_dxf_map[filename] = original_dxf_data_map[filename]
    
    print(f"  –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(layout_dxf_map)} —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º DXF
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        test_output = tmp_file.name
    
    try:
        save_dxf_layout_complete(
            placed_polygons, 
            (140, 200), 
            test_output, 
            layout_dxf_map, 
            verbose=True  # –≤–∫–ª—é—á–∞–µ–º verbose –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        )
        
        print(f"  DXF —Å–æ–∑–¥–∞–Ω: {test_output}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π DXF
        saved_doc = ezdxf.readfile(test_output)
        saved_msp = saved_doc.modelspace()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º
        elements_by_file = {}
        for entity in saved_msp:
            if entity.dxftype() == 'SPLINE':
                layer = getattr(entity.dxf, 'layer', '0')
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–ª–æ—è
                file_base = layer.rsplit('_', 1)[0] if '_' in layer else layer
                
                if file_base not in elements_by_file:
                    elements_by_file[file_base] = []
                elements_by_file[file_base].append(entity)
        
        print(f"\nüìç –ü–û–ó–ò–¶–ò–ò –í DXF")
        for file_base, entities in elements_by_file.items():
            all_x, all_y = [], []
            
            for entity in entities:
                if hasattr(entity, 'control_points') and entity.control_points:
                    for cp in entity.control_points:
                        if hasattr(cp, 'x'):
                            all_x.append(cp.x)
                            all_y.append(cp.y)
                        else:
                            all_x.append(cp[0])
                            all_y.append(cp[1])
            
            if all_x and all_y:
                min_x, max_x = min(all_x), max(all_x)
                min_y, max_y = min(all_y), max(all_y)
                center_x = (min_x + max_x) / 2
                center_y = (min_y + max_y) / 2
                width = max_x - min_x
                height = max_y - min_y
                
                print(f"  {file_base}:")
                print(f"    –¶–µ–Ω—Ç—Ä –≤ DXF: ({center_x:.1f}, {center_y:.1f})")
                print(f"    –†–∞–∑–º–µ—Ä –≤ DXF: {width:.1f}√ó{height:.1f}–º–º")
                print(f"    –ì—Ä–∞–Ω–∏—Ü—ã: ({min_x:.1f}, {min_y:.1f}) - ({max_x:.1f}, {max_y:.1f})")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DXF: {e}")
        import traceback
        traceback.print_exc()
    
    # –û—á–∏—Å—Ç–∫–∞
    try:
        os.unlink(test_output)
    except:
        pass

if __name__ == "__main__":
    debug_user_files()