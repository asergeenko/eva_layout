#!/usr/bin/env python3
"""Test script to verify improved ultra-tight packing algorithm."""

import numpy as np
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
from layout_optimizer import (
    bin_packing, 
    Carpet, 
    plot_layout,
    find_ultra_tight_position,
    check_collision
)

def create_test_carpets():
    """Create test carpets with various shapes and sizes."""
    carpets = []
    
    # –ö–æ–≤–µ—Ä 21 (–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)
    carpet21 = Polygon([
        (0, 0), (150, 0), (150, 50), (200, 50), (200, 150),
        (180, 150), (180, 200), (150, 200), (150, 300), 
        (120, 300), (120, 400), (80, 400), (80, 350),
        (50, 350), (50, 250), (0, 250)
    ])
    carpets.append(Carpet(carpet21, "21.dxf", "—á—ë—Ä–Ω—ã–π", "test", 1))
    
    # –ö–æ–≤–µ—Ä 23 (–±–æ–ª—å—à–æ–π –∑–µ–ª–µ–Ω—ã–π)
    carpet23 = Polygon([
        (0, 0), (300, 0), (300, 100), (320, 100), (320, 200),
        (300, 200), (300, 250), (250, 250), (250, 300),
        (200, 300), (200, 350), (150, 350), (150, 400),
        (0, 400), (0, 350), (50, 350), (50, 200), (0, 200)
    ])
    carpets.append(Carpet(carpet23, "23.dxf", "—á—ë—Ä–Ω—ã–π", "test", 1))
    
    # –ö–æ–≤–µ—Ä 24 (–∂–µ–ª—Ç—ã–π)
    carpet24 = Polygon([
        (0, 0), (180, 0), (180, 80), (200, 80), (200, 120),
        (180, 120), (180, 200), (160, 200), (160, 250),
        (120, 250), (120, 300), (80, 300), (80, 200),
        (0, 200)
    ])
    carpets.append(Carpet(carpet24, "24.dxf", "—á—ë—Ä–Ω—ã–π", "test", 1))
    
    return carpets

def test_ultra_tight_vs_original():
    """Compare ultra-tight packing vs original algorithm."""
    print("üî• –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—å—Ç—Ä–∞-–ø–ª–æ—Ç–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É...")
    
    carpets = create_test_carpets()
    sheet_size = (140, 200)  # 140x200 cm –∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    
    # –¢–µ—Å—Ç —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    print("\n=== –ù–û–í–´–ô –£–õ–¨–¢–†–ê-–ü–õ–û–¢–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú ===")
    placed_new, unplaced_new = bin_packing(carpets, sheet_size, verbose=True)
    
    # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏
    total_carpet_area = sum(carpet.polygon.area for carpet in carpets)
    sheet_area_mm2 = (sheet_size[0] * 10) * (sheet_size[1] * 10)  # convert cm to mm
    
    placed_area = sum(placed[0].area for placed in placed_new)
    usage_percent = (placed_area / sheet_area_mm2) * 100
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ –∫–æ–≤—Ä–æ–≤: {len(placed_new)}/{len(carpets)}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏: {usage_percent:.1f}%")
    print(f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–≤—Ä–æ–≤: {total_carpet_area/100:.0f} —Å–º¬≤")
    print(f"–†–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {placed_area/100:.0f} —Å–º¬≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–≤—Ä–∞–º–∏
    min_distances = []
    for i, (poly1, *_) in enumerate(placed_new):
        for j, (poly2, *_) in enumerate(placed_new[i+1:], i+1):
            distance = poly1.distance(poly2)
            min_distances.append(distance)
    
    if min_distances:
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–≤—Ä–∞–º–∏: {min(min_distances):.2f} –º–º")
        print(f"–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–≤—Ä–∞–º–∏: {np.mean(min_distances):.2f} –º–º")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    if placed_new:
        plot_buffer = plot_layout(placed_new, sheet_size)
        with open("/tmp/improved_packing_test.png", "wb") as f:
            f.write(plot_buffer.getvalue())
        print(f"\nüìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ /tmp/improved_packing_test.png")
    
    return len(placed_new) == len(carpets), usage_percent

def test_collision_precision():
    """Test collision detection precision."""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –±–ª–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–∞
    poly1 = Polygon([(0, 0), (100, 0), (100, 100), (0, 100)])
    poly2 = Polygon([(100.1, 0), (200, 0), (200, 100), (100.1, 100)])  # –ó–∞–∑–æ—Ä 0.1–º–º
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–∑–æ—Ä—ã
    gaps = [0.05, 0.1, 0.5, 1.0, 2.0]
    for gap in gaps:
        collision = check_collision(poly1, poly2, min_gap=gap)
        print(f"–ó–∞–∑–æ—Ä {gap:.2f}–º–º: {'–ö–û–õ–õ–ò–ó–ò–Ø' if collision else 'OK'}")

def main():
    """Main test function."""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –£–ü–ê–ö–û–í–ö–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏–π
    test_collision_precision()
    
    # –¢–µ—Å—Ç 2: –£–ª—å—Ç—Ä–∞-–ø–ª–æ—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞
    all_placed, usage = test_ultra_tight_vs_original()
    
    print(f"\nüèÜ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –í—Å–µ –∫–æ–≤—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã: {'–î–ê' if all_placed else '–ù–ï–¢'}")
    print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: {usage:.1f}%")
    
    if usage > 75:
        print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞!")
    elif usage > 60:
        print("üëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ó–∞–º–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏.")
    else:
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.")

if __name__ == "__main__":
    main()