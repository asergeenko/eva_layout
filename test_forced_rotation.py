#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
"""

from layout_optimizer import rotate_polygon, translate_polygon, check_collision
from shapely.geometry import Polygon

def test_manual_rotation():
    """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π"""
    print("=== –¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –∫–æ–≤—Ä–∞
    carpet1 = Polygon([(0, 0), (100, 0), (100, 50), (0, 50)])     # 100x50
    carpet2 = Polygon([(0, 0), (80, 0), (80, 60), (0, 60)])       # 80x60
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–≤—Ä—ã:")
    print(f"  –ö–æ–≤–µ—Ä 1: bounds={carpet1.bounds} (—Ä–∞–∑–º–µ—Ä: 10x5 —Å–º)")
    print(f"  –ö–æ–≤–µ—Ä 2: bounds={carpet2.bounds} (—Ä–∞–∑–º–µ—Ä: 8x6 —Å–º)")
    print(f"  –ö–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É –∏—Å—Ö–æ–¥–Ω—ã–º–∏: {check_collision(carpet1, carpet2)}")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–≤–µ—Ä –≤ –ø–æ–∑–∏—Ü–∏–∏ (0, 0)
    placed_carpet1 = carpet1  # –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
    
    # –†–∞–∑–º–µ—â–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–æ–≤–µ—Ä —Ä—è–¥–æ–º –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
    placed_carpet2_no_rot = translate_polygon(carpet2, 100, 0)  # –°–¥–≤–∏–≥–∞–µ–º –Ω–∞ 100–º–º –≤–ø—Ä–∞–≤–æ
    
    print(f"\n–ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞:")
    print(f"  –ö–æ–≤–µ—Ä 1: bounds={placed_carpet1.bounds}")
    print(f"  –ö–æ–≤–µ—Ä 2: bounds={placed_carpet2_no_rot.bounds}")
    print(f"  –ö–æ–ª–ª–∏–∑–∏—è: {check_collision(placed_carpet1, placed_carpet2_no_rot)}")
    print(f"  –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞: {placed_carpet2_no_rot.bounds[2]} –º–º")
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–æ–≤–µ—Ä –Ω–∞ 90¬∞ –∏ —Ä–∞–∑–º–µ—â–∞–µ–º 
    rotated_carpet2 = rotate_polygon(carpet2, 90)
    print(f"\n–ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–≤—Ä–∞ 2 –Ω–∞ 90¬∞:")
    print(f"  –ü–æ–≤–µ—Ä–Ω—É—Ç—ã–π –∫–æ–≤–µ—Ä 2: bounds={rotated_carpet2.bounds}")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π –∫–æ–≤–µ—Ä —Ä—è–¥–æ–º —Å –ø–µ—Ä–≤—ã–º
    placed_carpet2_rot = translate_polygon(rotated_carpet2, 100 - rotated_carpet2.bounds[0], 0 - rotated_carpet2.bounds[1])
    
    print(f"\n–° –ø–æ–≤–æ—Ä–æ—Ç–æ–º:")
    print(f"  –ö–æ–≤–µ—Ä 1: bounds={placed_carpet1.bounds}")
    print(f"  –ö–æ–≤–µ—Ä 2 (–ø–æ–≤–µ—Ä–Ω—É—Ç—ã–π): bounds={placed_carpet2_rot.bounds}")
    print(f"  –ö–æ–ª–ª–∏–∑–∏—è: {check_collision(placed_carpet1, placed_carpet2_rot)}")
    
    rotated_width = placed_carpet2_rot.bounds[2] - placed_carpet2_rot.bounds[0]
    rotated_height = placed_carpet2_rot.bounds[3] - placed_carpet2_rot.bounds[1]
    print(f"  –†–∞–∑–º–µ—Ä –ø–æ–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–≤—Ä–∞: {rotated_width/10:.1f}x{rotated_height/10:.1f} —Å–º")
    print(f"  –û–±—â–∞—è —à–∏—Ä–∏–Ω–∞: {placed_carpet2_rot.bounds[2]} –º–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞
    # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–≤–µ—Ä 80x60 –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 90¬∞ –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å 60x80
    expected_width = 60  # –ë—ã–ª–∞ –≤—ã—Å–æ—Ç–∞
    expected_height = 80  # –ë—ã–ª–∞ —à–∏—Ä–∏–Ω–∞
    
    actual_width = rotated_width
    actual_height = rotated_height
    
    width_correct = abs(actual_width - expected_width) < 1
    height_correct = abs(actual_height - expected_height) < 1
    
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞:")
    print(f"  –û–∂–∏–¥–∞–ª–∏—Å—å: {expected_width}x{expected_height} –º–º")
    print(f"  –ü–æ–ª—É—á–∏–ª–∏: {actual_width:.1f}x{actual_height:.1f} –º–º")
    print(f"  –†–∞–∑–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {width_correct and height_correct}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫–æ–ª–ª–∏–∑–∏–π
    no_collision = not check_collision(placed_carpet1, placed_carpet2_rot)
    
    success = width_correct and height_correct and no_collision
    
    if success:
        print(f"\n‚úÖ –†—É—á–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞ –£–°–ü–ï–®–ï–ù!")
        print(f"  - –†–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print(f"  - –ö–æ–ª–ª–∏–∑–∏–π –Ω–µ—Ç") 
        print(f"  - –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–≤–æ—Ä–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print(f"\n‚ùå –†—É—á–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞ –ù–ï–£–°–ü–ï–®–ï–ù!")
        if not (width_correct and height_correct):
            print(f"  - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞")
        if not no_collision:
            print(f"  - –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–ª–ª–∏–∑–∏—è–º–∏")
    
    return success

def test_dxf_transformation_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∫ –≤ save_dxf_layout_complete"""
    print(f"\n=== –°–∏–º—É–ª—è—Ü–∏—è DXF —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===")
    
    # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–≤–µ—Ä
    original_carpet = Polygon([(10, 20), (90, 20), (90, 70), (10, 70)])  # 80x50 –≤ –ø–æ–∑–∏—Ü–∏–∏ (10,20)
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–≤–µ—Ä: bounds={original_carpet.bounds}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç bin_packing (–∏–º–∏—Ç–∏—Ä—É–µ–º)
    angle = 90
    final_position = (150, 80)  # –ì–¥–µ –¥–æ–ª–∂–µ–Ω –æ–∫–∞–∑–∞—Ç—å—Å—è –∫–æ–≤–µ—Ä –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    
    # 1. –ü–æ–≤–æ—Ä–æ—Ç –∫–∞–∫ –≤ bin_packing (–≤–æ–∫—Ä—É–≥ –Ω–∏–∂–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞)
    binpack_rotated = rotate_polygon(original_carpet, angle)
    binpack_placed = translate_polygon(binpack_rotated, 
                                      final_position[0] - binpack_rotated.bounds[0],
                                      final_position[1] - binpack_rotated.bounds[1])
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç bin_packing: bounds={binpack_placed.bounds}")
    
    # 2. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∫ –≤ save_dxf_layout_complete
    orig_bounds = original_carpet.bounds
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    moved_to_origin = translate_polygon(original_carpet, -orig_bounds[0], -orig_bounds[1])
    print(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω –∫ –Ω–∞—á–∞–ª—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: bounds={moved_to_origin.bounds}")
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    rotated_at_origin = rotate_polygon(moved_to_origin, angle)
    print(f"–ü–æ–≤–µ—Ä–Ω—É—Ç –≤ –Ω–∞—á–∞–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: bounds={rotated_at_origin.bounds}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è 
    rotated_bounds = rotated_at_origin.bounds
    target_bounds = binpack_placed.bounds
    translate_x = target_bounds[0] - rotated_bounds[0]
    translate_y = target_bounds[1] - rotated_bounds[1]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
    dxf_result = translate_polygon(rotated_at_origin, translate_x, translate_y)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç DXF: bounds={dxf_result.bounds}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tolerance = 0.1
    bounds_match = all(
        abs(a - b) < tolerance 
        for a, b in zip(binpack_placed.bounds, dxf_result.bounds)
    )
    
    print(f"\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"  bin_packing: {binpack_placed.bounds}")
    print(f"  save_dxf:    {dxf_result.bounds}")
    print(f"  –°–æ–≤–ø–∞–¥–∞—é—Ç: {bounds_match}")
    
    if bounds_match:
        print(f"\n‚úÖ DXF —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print(f"\n‚ùå DXF —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    return bounds_match

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ DXF —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===")
    
    test1 = test_manual_rotation()
    test2 = test_dxf_transformation_simulation()
    
    print(f"\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    if test1 and test2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è rotate_polygon –∏ save_dxf_layout_complete —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –ø–æ–≤–æ—Ä–æ—Ç–∞!")
        if not test1:
            print("- –ü—Ä–æ–±–ª–µ–º–∞ –≤ –±–∞–∑–æ–≤–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ –ø–æ–≤–æ—Ä–æ—Ç–∞")
        if not test2:
            print("- –ü—Ä–æ–±–ª–µ–º–∞ –≤ DXF —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")