#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""

import tempfile
import os
import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete, apply_placement_transform
from shapely.geometry import Polygon

def debug_spline_transformation():
    """–û—Ç–ª–∞–¥–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    print("=== –û–¢–õ–ê–î–ö–ê –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò SPLINE –≠–õ–ï–ú–ï–ù–¢–û–í ===")
    
    # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DXF —Ñ–∞–π–ª —Å SPLINE'–∞–º–∏
    source_dxf = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    print(f"üìÅ –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {source_dxf}")
    
    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DXF
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"  Combined polygon bounds: {parsed_data['combined_polygon'].bounds}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ SPLINE'–æ–≤
    spline_entities = [e for e in parsed_data['original_entities'] if e['type'] == 'SPLINE']
    print(f"  SPLINE'–æ–≤: {len(spline_entities)}")
    
    if len(spline_entities) > 0:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ SPLINE:")
        first_spline = spline_entities[0]
        entity = first_spline['entity']
        
        control_points = entity.control_points
        print(f"  –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫: {len(control_points)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        points = []
        for i, cp in enumerate(control_points[:5]):  # –ü–µ—Ä–≤—ã–µ 5
            if hasattr(cp, 'x') and hasattr(cp, 'y'):
                x, y = cp.x, cp.y
            elif len(cp) >= 2:
                x, y = float(cp[0]), float(cp[1])
            else:
                continue
            points.append((x, y))
            print(f"    –¢–æ—á–∫–∞ {i+1}: ({x:.2f}, {y:.2f})")
        
        if points:
            xs = [p[0] for p in points]
            ys = [p[1] for p in points]
            spline_bounds = (min(xs), min(ys), max(xs), max(ys))
            print(f"  Bounds SPLINE: {spline_bounds}")
    
    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    original_polygon = parsed_data['combined_polygon']
    x_offset = -1000
    y_offset = 100
    rotation_angle = 0
    
    print(f"\nüéØ –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π bounds: {original_polygon.bounds}")
    print(f"  x_offset={x_offset}, y_offset={y_offset}, rotation={rotation_angle}¬∞")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –ø–æ–ª–∏–≥–æ–Ω—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    expected_polygon = apply_placement_transform(original_polygon, x_offset, y_offset, rotation_angle)
    print(f"  –û–∂–∏–¥–∞–µ–º—ã–π bounds: {expected_polygon.bounds}")
    
    print(f"\nüßÆ –ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE:")
    
    if len(spline_entities) > 0:
        first_spline = spline_entities[0]
        entity = first_spline['entity']
        control_points = entity.control_points
        
        if control_points and len(control_points) > 0:
            cp = control_points[0]
            if hasattr(cp, 'x') and hasattr(cp, 'y'):
                x, y = cp.x, cp.y
            elif len(cp) >= 2:
                x, y = float(cp[0]), float(cp[1])
            else:
                return
            
            print(f"  –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞: ({x:.2f}, {y:.2f})")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –∏ –≤ –∫–æ–¥–µ
            orig_bounds = original_polygon.bounds
            print(f"  Original bounds: {orig_bounds}")
            
            # Step 1: Normalize to origin
            x_norm = x - orig_bounds[0]
            y_norm = y - orig_bounds[1]
            print(f"  –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: ({x_norm:.2f}, {y_norm:.2f})")
            
            # Step 2: Apply rotation (skip for now since rotation_angle = 0)
            
            # Step 3: Apply final position (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            x_final = x_norm + x_offset
            y_final = y_norm + y_offset
            print(f"  –ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: ({x_final:.2f}, {y_final:.2f})")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ, —á—Ç–æ –±—ã–ª–æ –±—ã —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π
            x_final_old = x_norm + x_offset + orig_bounds[0]
            y_final_old = y_norm + y_offset + orig_bounds[1]
            print(f"  –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–≤–∞–ª–∞: ({x_final_old:.2f}, {y_final_old:.2f})")

if __name__ == "__main__":
    debug_spline_transformation()