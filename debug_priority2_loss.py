#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –ø–æ—Ç–µ—Ä–∏ 4 —Å–µ—Ä—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è SUZUKI XBEE_5.dxf
"""

import sys
import os
import pandas as pd
import logging
from shapely.geometry import Polygon

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º info –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
logging.basicConfig(level=logging.WARNING)

def load_excel_and_create_polygon_groups():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–∏–≥–æ–Ω—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Streamlit"""
    
    excel_path = "sample_input.xlsx"
    if not os.path.exists(excel_path):
        print(f"‚ùå –§–∞–π–ª {excel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None, None
    
    df = pd.read_excel(excel_path, sheet_name='ZAKAZ')
    header_row = df.iloc[0]
    df.columns = [str(header_row.iloc[i]) if pd.notna(header_row.iloc[i]) else f'col_{i}' for i in range(len(header_row))]
    df = df[1:].reset_index(drop=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã Excel (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    excel_polygons = []
    for idx, row in df.iterrows():
        if pd.isna(row['–¢–û–í–ê–†']):
            continue
            
        order_id = f"ZAKAZ_row_{idx + 2}"
        product_name = row['–¢–û–í–ê–†']
        article = row['–ê—Ä—Ç–∏–∫—É–ª']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
        color = '—á—ë—Ä–Ω—ã–π'
        if '+11' in str(article):
            color = '—Å–µ—Ä—ã–π'
        
        # –°–æ–∑–¥–∞–µ–º 2-3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞  
        poly_count = 3 if "SUZUKI XBEE" in product_name or "VOLKSWAGEN TIGUAN" in product_name else 2
        
        for i in range(poly_count):
            size = 80 + i * 10
            poly = Polygon([(0, 0), (size, 0), (size, size-20), (0, size-20)])
            filename = f"{product_name}_{i+1}.dxf"
            excel_polygons.append((poly, filename, color, order_id))
            
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(excel_polygons)} Excel –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 - —Ç–æ—á–Ω–æ 20 —á–µ—Ä–Ω—ã—Ö + 20 —Å–µ—Ä—ã—Ö
    priority2_polygons = []
    
    # 20 —á–µ—Ä–Ω—ã—Ö
    for i in range(20):
        poly = Polygon([(0, 0), (60, 0), (60, 40), (0, 40)])
        filename = f"1_–∫–æ–ø–∏—è_{i+1}.dxf"
        priority2_polygons.append((poly, filename, "—á—ë—Ä–Ω—ã–π", "group_1", 2))  # 5-—ç–ª–µ–º–µ–Ω—Ç–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ —Å priority=2
    
    # 20 —Å–µ—Ä—ã—Ö
    for i in range(20):
        poly = Polygon([(0, 0), (60, 0), (60, 40), (0, 40)])
        filename = f"1_–∫–æ–ø–∏—è_{i+1}.dxf"
        priority2_polygons.append((poly, filename, "—Å–µ—Ä—ã–π", "group_2", 2))   # 5-—ç–ª–µ–º–µ–Ω—Ç–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ —Å priority=2
    
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(priority2_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 (20 —á–µ—Ä–Ω—ã—Ö + 20 —Å–µ—Ä—ã—Ö)")
    
    return excel_polygons, priority2_polygons

def debug_polygon_processing():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª–∏–≥–æ–Ω–æ–≤"""
    
    excel_polygons, priority2_polygons = load_excel_and_create_polygon_groups()
    if excel_polygons is None:
        return False
    
    all_polygons = excel_polygons + priority2_polygons
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(all_polygons)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–∫ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ
    normal_orders = {}
    priority2_list = []
    
    for poly in all_polygons:
        if len(poly) >= 5 and poly[4] == 2:  # –ü–æ–ª–∏–≥–æ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
            priority2_list.append(poly)
        elif len(poly) >= 4:
            order_id = poly[3]
            if order_id not in normal_orders:
                normal_orders[order_id] = []
            normal_orders[order_id].append(poly)
    
    print(f"‚úì –û–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(normal_orders)}")
    print(f"‚úì –ü–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2: {len(priority2_list)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
    black_p2 = [p for p in priority2_list if p[2] == "—á—ë—Ä–Ω—ã–π"]
    gray_p2 = [p for p in priority2_list if p[2] == "—Å–µ—Ä—ã–π"]
    
    print(f"  ‚Ä¢ –ß–µ—Ä–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2: {len(black_p2)}")
    print(f"  ‚Ä¢ –°–µ—Ä—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2: {len(gray_p2)}")
    
    if len(gray_p2) != 20:
        print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 20 —Å–µ—Ä—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2, –∞ –Ω–∞–π–¥–µ–Ω–æ {len(gray_p2)}")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SUZUKI XBEE
    suzuki_files = []
    for order_id, polygons in normal_orders.items():
        for poly in polygons:
            filename = poly[1]
            if "SUZUKI XBEE" in filename:
                suzuki_files.append((filename, order_id))
    
    print(f"\nSUZUKI XBEE —Ñ–∞–π–ª—ã:")
    for filename, order_id in suzuki_files:
        print(f"  ‚Ä¢ {filename} -> {order_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    filenames = [f for f, _ in suzuki_files]
    duplicates = [f for f in filenames if filenames.count(f) > 1]
    
    if duplicates:
        print(f"‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´: {duplicates}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    expected_suzuki = ["SUZUKI XBEE_1.dxf", "SUZUKI XBEE_2.dxf", "SUZUKI XBEE_3.dxf"]
    missing_suzuki = [f for f in expected_suzuki if f not in filenames]
    
    if missing_suzuki:
        print(f"‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï SUZUKI XBEE –§–ê–ô–õ–´: {missing_suzuki}")
    else:
        print("‚úì –í—Å–µ SUZUKI XBEE —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º VOLKSWAGEN TIGUAN 1
    vw_files = []
    for order_id, polygons in normal_orders.items():
        for poly in polygons:
            filename = poly[1]
            if "VOLKSWAGEN TIGUAN 1" in filename:
                vw_files.append((filename, order_id))
    
    print(f"\nVOLKSWAGEN TIGUAN 1 —Ñ–∞–π–ª—ã:")
    for filename, order_id in vw_files:
        print(f"  ‚Ä¢ {filename} -> {order_id}")
    
    expected_vw = ["VOLKSWAGEN TIGUAN 1_1.dxf", "VOLKSWAGEN TIGUAN 1_2.dxf", "VOLKSWAGEN TIGUAN 1_3.dxf"]  
    vw_filenames = [f for f, _ in vw_files]
    missing_vw = [f for f in expected_vw if f not in vw_filenames]
    
    if missing_vw:
        print(f"‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï VOLKSWAGEN TIGUAN 1 –§–ê–ô–õ–´: {missing_vw}")
    else:
        print("‚úì –í—Å–µ VOLKSWAGEN TIGUAN 1 —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    print(f"\n=== –ò–¢–û–ì–ò ===")
    if len(gray_p2) == 20 and not duplicates and not missing_suzuki and not missing_vw:
        print("‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –£–°–¢–†–ê–ù–ï–ù–´ –ù–ê –≠–¢–ê–ü–ï –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–ò–ì–û–ù–û–í")
        return True
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –û–°–¢–ê–Æ–¢–°–Ø:")
        if len(gray_p2) != 20:
            print(f"   ‚Ä¢ –°–µ—Ä—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2: {len(gray_p2)} –≤–º–µ—Å—Ç–æ 20")
        if duplicates:
            print(f"   ‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {duplicates}")
        if missing_suzuki:
            print(f"   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ SUZUKI XBEE: {missing_suzuki}")
        if missing_vw:
            print(f"   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ VOLKSWAGEN TIGUAN 1: {missing_vw}")
        return False

if __name__ == "__main__":
    print("=== –û–¢–õ–ê–î–ö–ê –ü–û–¢–ï–†–ò –ü–†–ò–û–†–ò–¢–ï–¢–ê 2 –ò –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ===")
    success = debug_polygon_processing()
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£–°–ü–ï–•' if success else '–ù–ï–£–î–ê–ß–ê'}")
    sys.exit(0 if success else 1)