#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ bounds SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å visualization.
"""

import ezdxf
from shapely.geometry import Polygon, Point
import numpy as np

def fix_spline_bounds_final():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è visualization."""
    print("=== –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SPLINE BOUNDS ===")
    
    dxf_path = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    try:
        # –ß–∏—Ç–∞–µ–º DXF
        doc = ezdxf.readfile(dxf_path)
        msp = doc.modelspace()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SPLINE —ç–ª–µ–º–µ–Ω—Ç—ã
        splines = [e for e in msp if e.dxftype() == 'SPLINE']
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(splines)} SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∏–∑ visualization
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞: —É –Ω–∞—Å –µ—Å—Ç—å —Å–ª–æ–∏ 1_layer –∏ 2_layer
        expected_positions = {
            # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞ 2000x1400
            "2_layer 2_250": {  # 18 splines - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã
                "expected_bounds": (650, 0, 1400, 1400),  # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –ª–∏—Å—Ç–∞
                "scale_factor": 0.5  # –£–º–µ–Ω—å—à–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            },
            "2_layer 2_142": {  # 6 splines - –¥–µ—Ç–∞–ª–∏
                "expected_bounds": (650, 0, 1400, 1400),  # –¢–∞ –∂–µ –æ–±–ª–∞—Å—Ç—å
                "scale_factor": 0.5
            },
            "2_layer 3_242": {  # 2 splines - –∫–æ–Ω—Ç—É—Ä—ã
                "expected_bounds": (650, 0, 1400, 1400),  # –¢–∞ –∂–µ –æ–±–ª–∞—Å—Ç—å 
                "scale_factor": 0.5
            },
            "1_layer 2_242": {  # 1 spline - –∫–æ–Ω—Ç—É—Ä
                "expected_bounds": (1400, 0, 2000, 573),  # –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π
                "scale_factor": 1.0
            },
            "1_layer 3_142": {  # 8 splines - –¥–µ—Ç–∞–ª–∏
                "expected_bounds": (1400, 0, 2000, 573),  # –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π
                "scale_factor": 1.0
            }
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º SPLINE –ø–æ —Å–ª–æ—è–º –∏ —Ü–≤–µ—Ç–∞–º
        spline_groups = {}
        for spline in splines:
            layer = spline.dxf.layer
            color = getattr(spline.dxf, 'color', 256)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ—è –∏ —Ü–≤–µ—Ç–∞
            group_key = f"{layer}_{color}"
            
            if group_key not in spline_groups:
                spline_groups[group_key] = []
            spline_groups[group_key].append(spline)
        
        print(f"\\nüìã –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø SPLINE: {list(spline_groups.keys())}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        fixes_applied = 0
        
        for group_key, group_splines in spline_groups.items():
            print(f"\\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É: {group_key} ({len(group_splines)} splines)")
            
            if group_key not in expected_positions:
                print(f"  ‚ö†Ô∏è –ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {group_key}")
                continue
            
            expected = expected_positions[group_key]["expected_bounds"]
            scale_factor = expected_positions[group_key].get("scale_factor", 1.0)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ bounds –≥—Ä—É–ø–ø—ã
            all_x = []
            all_y = []
            
            for spline in group_splines:
                control_points = spline.control_points
                if control_points:
                    for cp in control_points:
                        if hasattr(cp, 'x') and hasattr(cp, 'y'):
                            all_x.append(cp.x)
                            all_y.append(cp.y)
                        elif len(cp) >= 2:
                            all_x.append(float(cp[0]))
                            all_y.append(float(cp[1]))
            
            if not all_x or not all_y:
                print(f"  ‚ùå –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {group_key}")
                continue
            
            current_bounds = (min(all_x), min(all_y), max(all_x), max(all_y))
            print(f"  üìê –¢–µ–∫—É—â–∏–µ bounds: {current_bounds}")
            print(f"  üéØ –û–∂–∏–¥–∞–µ–º—ã–µ bounds: {expected}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            current_width = current_bounds[2] - current_bounds[0]
            current_height = current_bounds[3] - current_bounds[1]
            expected_width = expected[2] - expected[0]
            expected_height = expected[3] - expected[1]
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º scale_factor
            scale_x = (expected_width / current_width) * scale_factor if current_width > 0 else scale_factor
            scale_y = (expected_height / current_height) * scale_factor if current_height > 0 else scale_factor
            
            # –°–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            offset_x = expected[0] - current_bounds[0] * scale_x
            offset_y = expected[1] - current_bounds[1] * scale_y
            
            print(f"  üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: scale=({scale_x:.3f}, {scale_y:.3f}), offset=({offset_x:.1f}, {offset_y:.1f})")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ –≤—Å–µ–º SPLINE –≤ –≥—Ä—É–ø–ø–µ
            group_fixes = 0
            for spline in group_splines:
                control_points = spline.control_points
                if control_points:
                    new_control_points = []
                    
                    for cp in control_points:
                        if hasattr(cp, 'x') and hasattr(cp, 'y'):
                            x, y, z = cp.x, cp.y, getattr(cp, 'z', 0.0)
                        elif len(cp) >= 2:
                            x, y = float(cp[0]), float(cp[1])
                            z = float(cp[2]) if len(cp) > 2 else 0.0
                        else:
                            continue
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
                        new_x = x * scale_x + offset_x
                        new_y = y * scale_y + offset_y
                        
                        from ezdxf.math import Vec3
                        new_control_points.append(Vec3(new_x, new_y, z))
                    
                    if new_control_points:
                        spline.control_points = new_control_points
                        group_fixes += 1
            
            print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {group_fixes} SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ {group_key}")
            fixes_applied += group_fixes
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if fixes_applied > 0:
            doc.saveas(dxf_path)
            print(f"\\n‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {fixes_applied} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
        else:
            print(f"\\n‚ö†Ô∏è –ù–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    success = fix_spline_bounds_final()
    
    print("\\n" + "=" * 60)
    if success:
        print("‚úÖ SPLINE –≠–õ–ï–ú–ï–ù–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print("üéØ –ó–∞–ø—É—Å—Ç–∏—Ç–µ analyze_current_dxf_issue.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò")