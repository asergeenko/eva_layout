#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –ò–°–•–û–î–ù–û–ú DXF —Ñ–∞–π–ª–µ.
"""

import tempfile
import os
import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete, apply_placement_transform
from shapely.geometry import Polygon

def test_original_dxf_file():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º DXF —Ñ–∞–π–ª–µ."""
    print("=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø SPLINE –ù–ê –ò–°–•–û–î–ù–û–ú –§–ê–ô–õ–ï ===")
    
    # –ë–µ—Ä–µ–º –ò–°–•–û–î–ù–´–ô DXF —Ñ–∞–π–ª
    source_dxf = "/home/sasha/proj/2025/eva_layout/dxf_samples/–õ–æ–¥–∫–∞ –ê–∑–∏–º—É—Ç –≠–≤–µ—Ä–µ—Å—Ç 385/2.dxf"
    
    print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–°–•–û–î–ù–´–ô —Ñ–∞–π–ª: {source_dxf}")
    
    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DXF
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤: {len(parsed_data['polygons'])}")
    print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö entities: {len(parsed_data['original_entities'])}")
    print(f"  –°–ª–æ–µ–≤: {len(parsed_data['layers'])}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã entities
    entity_types = {}
    for entity_data in parsed_data['original_entities']:
        entity_type = entity_data['type']
        entity_types[entity_type] = entity_types.get(entity_type, 0) + 1
    
    print(f"  –¢–∏–ø—ã entities: {entity_types}")
    
    if parsed_data['combined_polygon']:
        original_polygon = parsed_data['combined_polygon']
        print(f"  Combined polygon bounds: {original_polygon.bounds}")
    else:
        print("  ‚ùå –ù–µ—Ç combined_polygon!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ SPLINE bounds –µ—Å–ª–∏ –µ—Å—Ç—å
    if parsed_data.get('real_spline_bounds'):
        print(f"  Real SPLINE bounds: {parsed_data['real_spline_bounds']}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º bounds
        combined_bounds = original_polygon.bounds
        spline_bounds = parsed_data['real_spline_bounds']
        
        diff_x = spline_bounds[0] - combined_bounds[0]
        diff_y = spline_bounds[1] - combined_bounds[1]
        
        print(f"  üìè –†–∞–∑–Ω–æ—Å—Ç–∏ (spline - combined): Œîx={diff_x:.2f}, Œîy={diff_y:.2f}")
        
        if abs(diff_x) < 10 and abs(diff_y) < 10:
            print(f"  ‚úÖ SPLINE bounds –∏ combined polygon –°–û–í–ü–ê–î–ê–Æ–¢!")
        else:
            print(f"  ‚ö†Ô∏è SPLINE bounds –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç combined polygon")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é 
    x_offset = -200  # –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ –Ω–∞ 200–º–º
    y_offset = 150   # –°–¥–≤–∏–≥ –≤–≤–µ—Ä—Ö –Ω–∞ 150–º–º
    rotation_angle = 0  # –ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
    file_name = "test_original_spline.dxf"
    color = "—á–µ—Ä–Ω—ã–π"
    
    print(f"\\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é:")
    print(f"  x_offset={x_offset}, y_offset={y_offset}, rotation={rotation_angle}¬∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    expected_polygon = apply_placement_transform(original_polygon, x_offset, y_offset, rotation_angle)
    print(f"  –û–∂–∏–¥–∞–µ–º—ã–µ bounds: {expected_polygon.bounds}")
    
    # –°–æ–∑–¥–∞–µ–º placed_element
    placed_element = (expected_polygon, x_offset, y_offset, rotation_angle, file_name, color)
    placed_elements = [placed_element]
    
    # –°–æ–∑–¥–∞–µ–º original_dxf_data_map
    original_dxf_data_map = {
        file_name: parsed_data
    }
    
    sheet_size = (200, 140)  # —Å–º
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = "/home/sasha/proj/2025/eva_layout/test_original_spline_result.dxf"
    
    try:
        print(f"\\nüîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        save_dxf_layout_complete(placed_elements, sheet_size, output_path, original_dxf_data_map)
        print(f"‚úÖ DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        result_doc = ezdxf.readfile(output_path)
        result_msp = result_doc.modelspace()
        
        result_entities = list(result_msp)
        splines = [e for e in result_entities if e.dxftype() == 'SPLINE']
        
        print(f"\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        print(f"  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result_entities)}")
        print(f"  SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(splines)}")
        
        if splines:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SPLINE'—ã
            all_xs = []
            all_ys = []
            
            for spline in splines:
                try:
                    control_points = spline.control_points
                    if control_points:
                        for cp in control_points:
                            if hasattr(cp, 'x') and hasattr(cp, 'y'):
                                all_xs.append(cp.x)
                                all_ys.append(cp.y)
                            elif len(cp) >= 2:
                                all_xs.append(float(cp[0]))
                                all_ys.append(float(cp[1]))
                except:
                    continue
            
            if all_xs and all_ys:
                actual_bounds = (min(all_xs), min(all_ys), max(all_xs), max(all_ys))
                print(f"  üìê –†–µ–∞–ª—å–Ω—ã–µ bounds SPLINE'–æ–≤: {actual_bounds}")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏
                expected_bounds = expected_polygon.bounds
                tolerance = 10  # 10–º–º –¥–æ–ø—É—Å–∫
                
                bounds_match = all(
                    abs(actual_bounds[i] - expected_bounds[i]) < tolerance
                    for i in range(4)
                )
                
                if bounds_match:
                    print(f"  ‚úÖ SPLINE'—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ö–û–†–†–ï–ö–¢–ù–û!")
                    return True
                else:
                    diff = [actual_bounds[i] - expected_bounds[i] for i in range(4)]
                    print(f"  ‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {diff}")
                    print(f"  üìä –ú–∞–∫—Å —Ä–∞–∑–Ω–æ—Å—Ç—å: {max(abs(d) for d in diff):.2f}–º–º")
                    
                    # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–µ (< 50–º–º), —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º—ã–º
                    max_diff = max(abs(d) for d in diff)
                    if max_diff < 50:
                        print(f"  ‚úÖ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ (< 50–º–º)")
                        return True
                    else:
                        print(f"  ‚ùå –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (> 50–º–º)")
                        return False
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã SPLINE'–æ–≤")
                return False
        else:
            print(f"  ‚ùå –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–µ—Ç SPLINE'–æ–≤!")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SPLINE –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º DXF —Ñ–∞–π–ª–µ")
    print("=" * 60)
    
    success = test_original_dxf_file()
    
    print("\\n" + "=" * 60)
    if success:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: SPLINE –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö!")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π SPLINE –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")