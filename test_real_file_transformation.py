#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
"""

import tempfile
import os
import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete, apply_placement_transform, rotate_polygon
from shapely.geometry import Polygon
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon as MPLPolygon

def test_real_file_transformation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ."""
    print("=== –¢–ï–°–¢ –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –ù–ê –†–ï–ê–õ–¨–ù–û–ú –§–ê–ô–õ–ï ===")
    
    source_dxf = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {source_dxf}")
    
    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DXF
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    original_polygon = parsed_data['combined_polygon']
    print(f"üìä Combined polygon bounds: {original_polygon.bounds}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_cases = [
        ("–ë–µ–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏", 0, 0, 0),
        ("–°–¥–≤–∏–≥ –≤–ª–µ–≤–æ", -500, 0, 0), 
        ("–°–¥–≤–∏–≥ –≤–≤–µ—Ä—Ö", 0, 300, 0),
        ("–ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞", 0, 0, 90),
        ("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", -300, 200, 45),
    ]
    
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    axes = axes.flatten()
    
    for i, (name, x_offset, y_offset, rotation_angle) in enumerate(test_cases):
        if i >= len(axes):
            break
            
        print(f"\\nüîÑ –¢–µ—Å—Ç {i+1}: {name}")
        print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: x_offset={x_offset}, y_offset={y_offset}, rotation={rotation_angle}¬∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        expected_polygon = apply_placement_transform(original_polygon, x_offset, y_offset, rotation_angle)
        print(f"  –û–∂–∏–¥–∞–µ–º—ã–µ bounds: {expected_polygon.bounds}")
        
        file_name = f"test_case_{i+1}.dxf"
        color = "—á–µ—Ä–Ω—ã–π"
        
        # –°–æ–∑–¥–∞–µ–º placed_element
        placed_element = (expected_polygon, x_offset, y_offset, rotation_angle, file_name, color)
        placed_elements = [placed_element]
        
        # –°–æ–∑–¥–∞–µ–º original_dxf_data_map
        original_dxf_data_map = {
            file_name: parsed_data
        }
        
        sheet_size = (200, 140)  # —Å–º
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
            output_path = tmp_file.name
        
        try:
            save_dxf_layout_complete(placed_elements, sheet_size, output_path, original_dxf_data_map)
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SPLINE'—ã
            result_doc = ezdxf.readfile(output_path)
            result_msp = result_doc.modelspace()
            
            splines = [e for e in result_msp if e.dxftype() == 'SPLINE']
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(splines)} SPLINE'–æ–≤")
            
            if splines:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º bounds –≤—Å–µ—Ö SPLINE'–æ–≤
                all_xs = []
                all_ys = []
                
                for spline in splines:
                    try:
                        control_points = spline.control_points
                        if control_points:
                            for cp in control_points:
                                if hasattr(cp, 'x') and hasattr(cp, 'y'):
                                    all_xs.append(cp.x)
                                    all_ys.append(cp.y)
                                elif len(cp) >= 2:
                                    all_xs.append(float(cp[0]))
                                    all_ys.append(float(cp[1]))
                    except:
                        continue
                
                if all_xs and all_ys:
                    actual_bounds = (min(all_xs), min(all_ys), max(all_xs), max(all_ys))
                    print(f"  –†–µ–∞–ª—å–Ω—ã–µ bounds: {actual_bounds}")
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏
                    expected_bounds = expected_polygon.bounds
                    tolerance = 50  # 50–º–º –¥–æ–ø—É—Å–∫
                    
                    bounds_match = all(
                        abs(actual_bounds[j] - expected_bounds[j]) < tolerance
                        for j in range(4)
                    )
                    
                    if bounds_match:
                        print(f"  ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ö–û–†–†–ï–ö–¢–ù–ê!")
                    else:
                        diff = [actual_bounds[j] - expected_bounds[j] for j in range(4)]
                        print(f"  ‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {diff}")
                        print(f"  üìè –ú–∞–∫—Å. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {max(abs(d) for d in diff):.2f}–º–º")
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    ax = axes[i]
                    
                    # –†–∏—Å—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –ø–æ–ª–∏–≥–æ–Ω
                    if hasattr(expected_polygon, 'exterior'):
                        expected_coords = list(expected_polygon.exterior.coords)
                        expected_patch = MPLPolygon(expected_coords, alpha=0.5, facecolor='blue', 
                                                  edgecolor='blue', label='–û–∂–∏–¥–∞–µ–º—ã–π')
                        ax.add_patch(expected_patch)
                    
                    # –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ SPLINE'–æ–≤
                    ax.scatter(all_xs, all_ys, c='red', s=1, alpha=0.7, label='SPLINE —Ç–æ—á–∫–∏')
                    
                    # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                    ax.axhline(y=actual_bounds[1], color='red', linestyle='--', alpha=0.5)
                    ax.axhline(y=actual_bounds[3], color='red', linestyle='--', alpha=0.5)
                    ax.axvline(x=actual_bounds[0], color='red', linestyle='--', alpha=0.5)
                    ax.axvline(x=actual_bounds[2], color='red', linestyle='--', alpha=0.5)
                    
                    ax.set_title(f"{name}\\n{'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' if bounds_match else '‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ'}")
                    ax.set_aspect('equal')
                    ax.grid(True, alpha=0.3)
                    ax.legend()
        
        finally:
            if os.path.exists(output_path):
                os.unlink(output_path)
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ subplot'—ã
    for i in range(len(test_cases), len(axes)):
        axes[i].remove()
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    output_viz = "/home/sasha/proj/2025/eva_layout/spline_transformation_test.png"
    plt.savefig(output_viz, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"\\n‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_viz}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SPLINE –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ")
    print("=" * 60)
    
    test_real_file_transformation()
    
    print("\\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: spline_transformation_test.png")