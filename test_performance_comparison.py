#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
"""

import time
import numpy as np
from shapely.geometry import Polygon
from layout_optimizer import bin_packing, check_collision

def create_test_polygons(count=20):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    polygons = []
    for i in range(count):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        width = np.random.uniform(10, 50)
        height = np.random.uniform(10, 40)
        x = np.random.uniform(0, 10)
        y = np.random.uniform(0, 10)
        
        polygon = Polygon([
            (x, y), (x + width, y), 
            (x + width, y + height), (x, y + height)
        ])
        
        polygons.append((polygon, f"test_{i}.dxf", "—Å–µ—Ä—ã–π", f"order_{i % 5}"))
    
    return polygons

def test_collision_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π."""
    print("=== –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–æ–ª–∏–≥–æ–Ω–∞
    poly1 = Polygon([(0, 0), (30, 0), (30, 20), (0, 20)])
    poly2 = Polygon([(25, 5), (55, 5), (55, 25), (25, 25)])
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
    iterations = 10000
    
    start_time = time.time()
    collision_count = 0
    for _ in range(iterations):
        if check_collision(poly1, poly2):
            collision_count += 1
    end_time = time.time()
    
    total_time = end_time - start_time
    avg_time = (total_time / iterations) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–ª–ª–∏–∑–∏–π: {iterations}")
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f} —Å–µ–∫")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {avg_time:.4f} –º—Å")
    print(f"–ö–æ–ª–ª–∏–∑–∏–π –Ω–∞–π–¥–µ–Ω–æ: {collision_count}")
    
    return avg_time

def test_bin_packing_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è."""
    print("\n=== –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    polygons = create_test_polygons(count=15)
    sheet_size = (200, 150)  # —Å–º
    
    start_time = time.time()
    placed, unplaced = bin_packing(polygons, sheet_size, verbose=False)
    end_time = time.time()
    
    total_time = end_time - start_time
    
    print(f"–ü–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(polygons)}")
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)}")
    print(f"–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
    print(f"–í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_time:.3f} —Å–µ–∫")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω: {(total_time / len(polygons)):.3f} —Å–µ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    collision_count = 0
    for i, (poly1, *_) in enumerate(placed):
        for j, (poly2, *_) in enumerate(placed[i+1:], i+1):
            if check_collision(poly1, poly2):
                collision_count += 1
                print(f"‚ö†Ô∏è –ö–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏ {i} –∏ {j}")
    
    if collision_count == 0:
        print("‚úÖ –í—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π!")
    else:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {collision_count} –∫–æ–ª–ª–∏–∑–∏–π")
    
    return total_time, len(placed), collision_count

def benchmark_comparison():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    print("\n=== –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ ===")
    
    sizes = [5, 10, 15, 20]
    
    for size in sizes:
        print(f"\n–¢–µ—Å—Ç —Å {size} –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏:")
        polygons = create_test_polygons(count=size)
        sheet_size = (250, 200)
        
        start_time = time.time()
        placed, unplaced = bin_packing(polygons, sheet_size, verbose=False)
        end_time = time.time()
        
        total_time = end_time - start_time
        efficiency = len(placed) / len(polygons) * 100
        
        print(f"  –í—Ä–µ–º—è: {total_time:.3f} —Å–µ–∫")
        print(f"  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {efficiency:.1f}%")
        print(f"  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(polygons)/total_time:.1f} –ø–æ–ª–∏–≥–æ–Ω–æ–≤/—Å–µ–∫")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–ª–ª–∏–∑–∏–π
    collision_time = test_collision_performance()
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    placement_time, placed_count, collisions = test_bin_packing_performance()
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫
    benchmark_comparison()
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π: {collision_time:.4f} –º—Å")
    print(f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è 15 –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {placement_time:.3f} —Å–µ–∫")
    print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–ª–∏–∑–∏–π: {collisions}")
    
    if collision_time < 0.1 and placement_time < 5.0 and collisions == 0:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å—é")