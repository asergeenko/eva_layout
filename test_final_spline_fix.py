#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.
"""

import tempfile
import os
import ezdxf
import numpy as np
from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete
from shapely.geometry import Polygon

def test_final_spline_fix():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    print("=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ SPLINE –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò ===")
    
    # –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DXF —Ñ–∞–π–ª
    source_dxf = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {source_dxf}")
    
    # –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π DXF
    with open(source_dxf, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=False)
    
    original_polygon = parsed_data['combined_polygon']
    print(f"üìä Combined polygon bounds: {original_polygon.bounds}")
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    x_offset = 0     # –ë–µ–∑ —Å–¥–≤–∏–≥–∞ –ø–æ X
    y_offset = 0     # –ë–µ–∑ —Å–¥–≤–∏–≥–∞ –ø–æ Y  
    rotation_angle = 0  # –ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
    file_name = "test_spline.dxf"
    color = "—á–µ—Ä–Ω—ã–π"
    
    # –°–æ–∑–¥–∞–µ–º placed_element (–±–µ–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    placed_element = (original_polygon, x_offset, y_offset, rotation_angle, file_name, color)
    placed_elements = [placed_element]
    
    # –°–æ–∑–¥–∞–µ–º original_dxf_data_map
    original_dxf_data_map = {
        file_name: parsed_data
    }
    
    sheet_size = (200, 140)  # —Å–º
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = "/home/sasha/proj/2025/eva_layout/test_spline_fix_result.dxf"
    
    try:
        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤: {output_path}")
        save_dxf_layout_complete(placed_elements, sheet_size, output_path, original_dxf_data_map)
        print(f"‚úÖ DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        result_doc = ezdxf.readfile(output_path)
        result_msp = result_doc.modelspace()
        
        result_entities = list(result_msp)
        splines = [e for e in result_entities if e.dxftype() == 'SPLINE']
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        print(f"  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result_entities)}")
        print(f"  SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(splines)}")
        
        if splines:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ SPLINE'–æ–≤
            print(f"\\nüîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö SPLINE'–æ–≤:")
            
            for i, spline in enumerate(splines[:3]):
                layer = getattr(spline.dxf, 'layer', 'UNKNOWN')
                
                try:
                    control_points = spline.control_points
                    if control_points and len(control_points) > 0:
                        # –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
                        cp = control_points[0]
                        if hasattr(cp, 'x') and hasattr(cp, 'y'):
                            x, y = cp.x, cp.y
                        elif len(cp) >= 2:
                            x, y = float(cp[0]), float(cp[1])
                        else:
                            continue
                        
                        print(f"  SPLINE {i+1} ({layer}): –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ ({x:.2f}, {y:.2f})")
                
                except Exception as e:
                    print(f"  SPLINE {i+1}: –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - {e}")
        
        print(f"\\n‚úÖ SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def compare_with_original():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
    print("\\n=== –°–†–ê–í–ù–ï–ù–ò–ï –° –ò–°–•–û–î–ù–´–ú –§–ê–ô–õ–û–ú ===")
    
    original_file = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    result_file = "/home/sasha/proj/2025/eva_layout/test_spline_fix_result.dxf"
    
    if not os.path.exists(result_file):
        print("‚ùå –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
        orig_doc = ezdxf.readfile(original_file)
        orig_msp = orig_doc.modelspace()
        orig_splines = [e for e in orig_msp if e.dxftype() == 'SPLINE']
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_doc = ezdxf.readfile(result_file)
        result_msp = result_doc.modelspace()
        result_splines = [e for e in result_msp if e.dxftype() == 'SPLINE']
        
        print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {len(orig_splines)} SPLINE'–æ–≤")
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result_splines)} SPLINE'–æ–≤")
        
        if len(orig_splines) == len(result_splines):
            print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SPLINE'–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SPLINE'–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π SPLINE
        if orig_splines and result_splines:
            orig_cp = orig_splines[0].control_points[0]
            result_cp = result_splines[0].control_points[0]
            
            if hasattr(orig_cp, 'x'):
                orig_x, orig_y = orig_cp.x, orig_cp.y
            else:
                orig_x, orig_y = float(orig_cp[0]), float(orig_cp[1])
            
            if hasattr(result_cp, 'x'):
                result_x, result_y = result_cp.x, result_cp.y
            else:
                result_x, result_y = float(result_cp[0]), float(result_cp[1])
            
            print(f"  –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ SPLINE: ({orig_x:.2f}, {orig_y:.2f})")
            print(f"  –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ SPLINE: ({result_x:.2f}, {result_y:.2f})")
            
            # –î–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (0, 0, 0) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º–∏ –∂–µ
            if abs(orig_x - result_x) < 0.01 and abs(orig_y - result_y) < 0.01:
                print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–±–µ–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
            else:
                print(f"‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: Œîx={result_x-orig_x:.2f}, Œîy={result_y-orig_y:.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SPLINE —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    print("=" * 60)
    
    success = test_final_spline_fix()
    
    if success:
        compare_with_original()
    
    print("\\n" + "=" * 60)
    if success:
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SPLINE –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –†–ê–ë–û–¢–ê–ï–¢!")
        print("üéØ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω—ã")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –° SPLINE –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ï–ô –û–°–¢–ê–Æ–¢–°–Ø")