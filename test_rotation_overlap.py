#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ —Å –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏.
"""

from layout_optimizer import rotate_polygon, translate_polygon, bin_packing, save_dxf_layout_complete, parse_dxf_complete, check_collision
from shapely.geometry import Polygon
import tempfile
import os

def create_test_carpets_for_rotation():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–≤—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–≤—Ä—ã —Ç–∞–∫, —á—Ç–æ–±—ã –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –æ–Ω–∏ –Ω–µ –ø–æ–º–µ—â–∞–ª–∏—Å—å –Ω–∞ –ª–∏—Å—Ç–µ 200x100
    carpet1 = Polygon([(0, 0), (150, 0), (150, 40), (0, 40)])  # 150x40 - –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
    carpet2 = Polygon([(0, 0), (120, 0), (120, 60), (0, 60)])  # 120x60 - –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ —É–∑–∫–æ–º –ª–∏—Å—Ç–µ
    carpet3 = Polygon([(0, 0), (100, 0), (100, 70), (0, 70)])  # 100x70 - –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç
    
    return [
        (carpet1, "long_carpet.dxf", "—Å–µ—Ä—ã–π", "order1"),
        (carpet2, "wide_carpet1.dxf", "—Å–µ—Ä—ã–π", "order1"), 
        (carpet3, "wide_carpet2.dxf", "—Å–µ—Ä—ã–π", "order1")
    ]

def test_rotation_overlap():
    """–¢–µ—Å—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞—Ö"""
    print("=== –¢–µ—Å—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ —Å –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ ===")
    
    carpets = create_test_carpets_for_rotation()
    sheet_size = (120, 120)  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –ª–∏—Å—Ç 12x12 —Å–º - –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
    
    print(f"–†–∞–∑–º–µ—â–∞–µ–º {len(carpets)} –∫–æ–≤—Ä–æ–≤ –Ω–∞ —É–∑–∫–æ–º –ª–∏—Å—Ç–µ {sheet_size[0]/10}x{sheet_size[1]/10} —Å–º")
    for i, carpet_data in enumerate(carpets):
        poly = carpet_data[0]
        name = carpet_data[1]
        bounds = poly.bounds
        width_cm = (bounds[2] - bounds[0]) / 10
        height_cm = (bounds[3] - bounds[1]) / 10
        print(f"  –ö–æ–≤–µ—Ä {i+1} ({name}): {width_cm:.1f}x{height_cm:.1f} —Å–º")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º bin_packing
    placed, unplaced = bin_packing(carpets, sheet_size, verbose=False)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç bin_packing:")
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)}")
    print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
    
    if len(placed) == 0:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω –∫–æ–≤–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω!")
        return False
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–∞—Ö
    print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–∞—Ö:")
    rotated_count = 0
    for i, placed_carpet in enumerate(placed):
        polygon = placed_carpet[0]
        x_offset = placed_carpet[1] if len(placed_carpet) > 1 else 0
        y_offset = placed_carpet[2] if len(placed_carpet) > 2 else 0
        angle = placed_carpet[3] if len(placed_carpet) > 3 else 0
        filename = placed_carpet[4] if len(placed_carpet) > 4 else "unknown"
        
        if angle != 0:
            rotated_count += 1
        
        bounds = polygon.bounds
        width_mm = bounds[2] - bounds[0]
        height_mm = bounds[3] - bounds[1]
        
        print(f"  –ö–æ–≤–µ—Ä {i+1} ({filename}):")
        print(f"    Bounds: {polygon.bounds}")
        print(f"    –†–∞–∑–º–µ—Ä: {width_mm/10:.1f}x{height_mm/10:.1f} —Å–º")
        print(f"    –°–º–µ—â–µ–Ω–∏–µ: ({x_offset}, {y_offset})")
        print(f"    –£–≥–æ–ª: {angle}¬∞ {'(–ü–û–í–ï–†–ù–£–¢!)' if angle != 0 else ''}")
    
    print(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–≤—Ä–æ–≤: {rotated_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–∞—Ö
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –≤ bin_packing:")
    overlaps = []
    for i in range(len(placed)):
        for j in range(i+1, len(placed)):
            poly1 = placed[i][0]
            poly2 = placed[j][0]
            if check_collision(poly1, poly2):
                overlaps.append((i+1, j+1))
                print(f"  ‚ùå –ö–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É –∫–æ–≤—Ä–∞–º–∏ {i+1} –∏ {j+1}")
                print(f"    –ö–æ–≤–µ—Ä {i+1}: bounds={poly1.bounds}")
                print(f"    –ö–æ–≤–µ—Ä {j+1}: bounds={poly2.bounds}")
    
    if not overlaps:
        print(f"  ‚úÖ –ö–æ–ª–ª–∏–∑–∏–π –≤ bin_packing –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ DXF
    print(f"\n=== –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–≤—Ä–æ–≤ –≤ DXF ===")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    original_dxf_data_map = {}
    for carpet_data in carpets:
        filename = carpet_data[1]
        original_polygon = carpet_data[0]
        original_dxf_data_map[filename] = {
            'combined_polygon': original_polygon,
            'original_entities': []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ DXF
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        save_dxf_layout_complete(
            placed, 
            sheet_size, 
            output_path, 
            original_dxf_data_map
        )
        print(f"‚úÖ DXF —Ñ–∞–π–ª —Å –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        result = parse_dxf_complete(output_path, verbose=False)
        
        print(f"–ò–∑ DXF –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {len(result['polygons']) if result['polygons'] else 0} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
        
        if result['polygons'] and len(result['polygons']) > 1:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞ (–ø–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω)
            dxf_carpets = result['polygons'][1:]
            print(f"–ö–æ–≤—Ä–æ–≤ –≤ DXF: {len(dxf_carpets)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–∑ DXF –∫–æ–≤—Ä–∞—Ö
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –≤ DXF:")
            dxf_overlaps = []
            for i in range(len(dxf_carpets)):
                for j in range(i+1, len(dxf_carpets)):
                    poly1 = dxf_carpets[i]
                    poly2 = dxf_carpets[j] 
                    if check_collision(poly1, poly2):
                        dxf_overlaps.append((i+1, j+1))
                        print(f"  ‚ùå –ö–æ–ª–ª–∏–∑–∏—è –≤ DXF –º–µ–∂–¥—É –∫–æ–≤—Ä–∞–º–∏ {i+1} –∏ {j+1}")
                        print(f"    –ö–æ–≤–µ—Ä {i+1}: bounds={poly1.bounds}")
                        print(f"    –ö–æ–≤–µ—Ä {j+1}: bounds={poly2.bounds}")
            
            if not dxf_overlaps:
                print(f"  ‚úÖ –ö–æ–ª–ª–∏–∑–∏–π –≤ DXF –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success = len(overlaps) == len(dxf_overlaps) == 0
            
            if success:
                print(f"\n‚úÖ –£–°–ü–ï–•: –ü–æ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–æ–≤—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏–π!")
                if rotated_count > 0:
                    print(f"   üîÑ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {rotated_count} –ø–æ–≤–æ—Ä–æ—Ç–æ–≤")
                return True
            else:
                print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω—ã –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–≤—Ä–∞—Ö!")
                print(f"   –ö–æ–ª–ª–∏–∑–∏–π –≤ bin_packing: {len(overlaps)}")
                print(f"   –ö–æ–ª–ª–∏–∑–∏–π –≤ DXF: {len(dxf_overlaps)}")
                return False
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–≤—Ä—ã –∏–∑ DXF")
            return False
            
    finally:
        if os.path.exists(output_path):
            os.unlink(output_path)

if __name__ == "__main__":
    success = test_rotation_overlap()
    print(f"\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    if success:
        print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ —Å –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ê!")
        print("–í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("üö® –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ —Å –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ê!")
        print("–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")