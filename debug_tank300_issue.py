#!/usr/bin/env python3
"""–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–∞–º–∏ TANK 300."""

import sys
import os
import logging
import numpy as np
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
from shapely import affinity

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('debug_tank300.log', mode='w', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

print("=== –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú–´ TANK 300 ===")

# –û—á–∏—Å—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
if 'layout_optimizer' in sys.modules:
    del sys.modules['layout_optimizer']

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
from layout_optimizer import (
    parse_dxf_complete, 
    bin_packing, 
    check_collision,
    rotate_polygon,
    translate_polygon,
    plot_layout,
    __version__
)

print(f"–í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è: {__version__}")

def test_tank300_files():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ TANK 300."""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í TANK 300 ===")
    
    tank_folder = "dxf_samples/TANK 300"
    if not os.path.exists(tank_folder):
        print(f"–ü–∞–ø–∫–∞ {tank_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ TANK 300
    dxf_files = []
    for i in range(1, 5):  # 1.dxf - 4.dxf
        file_path = os.path.join(tank_folder, f"{i}.dxf")
        if os.path.exists(file_path):
            dxf_files.append(file_path)
    
    if not dxf_files:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ DXF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ TANK 300")
        return False
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(dxf_files)}")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
    polygons = []
    original_data = {}
    
    for i, file_path in enumerate(dxf_files):
        print(f"\n–ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª {i+1}: {file_path}")
        
        try:
            result = parse_dxf_complete(file_path, verbose=False)
            if result and result['combined_polygon']:
                polygon = result['combined_polygon']
                bounds = polygon.bounds
                width_mm = bounds[2] - bounds[0]
                height_mm = bounds[3] - bounds[1]
                area_mm2 = polygon.area
                
                print(f"  –†–∞–∑–º–µ—Ä—ã: {width_mm/10:.1f} x {height_mm/10:.1f} —Å–º")
                print(f"  –ü–ª–æ—â–∞–¥—å: {area_mm2/100:.2f} —Å–º¬≤")
                
                filename = f"TANK300_{i+1}.dxf"
                color = "—á—ë—Ä–Ω—ã–π"
                order_id = f"tank_order_{i+1}"
                
                polygons.append((polygon, filename, color, order_id))
                original_data[filename] = result
                
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–∏–≥–æ–Ω")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    
    if not polygons:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
        return False
    
    print(f"\n–ü–æ–ª—É—á–µ–Ω–æ {len(polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ª–∏—Å—Ç–µ 200x140 —Å–º
    sheet_size = (200, 140)
    print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ª–∏—Å—Ç–µ {sheet_size[0]}x{sheet_size[1]} —Å–º")
    
    try:
        # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è bin_packing
        logger.setLevel(logging.DEBUG)
        
        placed, unplaced = bin_packing(polygons, sheet_size, verbose=True)
        
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
        print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)}")
        print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
        
        if placed:
            print("\n=== –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ü–û–õ–ò–ì–û–ù–û–í ===")
            
            for i, placed_tuple in enumerate(placed):
                polygon = placed_tuple[0]
                x_offset = placed_tuple[1] if len(placed_tuple) > 1 else 0
                y_offset = placed_tuple[2] if len(placed_tuple) > 2 else 0
                angle = placed_tuple[3] if len(placed_tuple) > 3 else 0
                filename = placed_tuple[4] if len(placed_tuple) > 4 else f"polygon_{i}"
                
                bounds = polygon.bounds
                print(f"\n–ü–æ–ª–∏–≥–æ–Ω {i+1} ({filename}):")
                print(f"  –ü–æ–∑–∏—Ü–∏—è: ({bounds[0]:.1f}, {bounds[1]:.1f}) - ({bounds[2]:.1f}, {bounds[3]:.1f})")
                print(f"  –°–º–µ—â–µ–Ω–∏–µ: ({x_offset:.1f}, {y_offset:.1f})")
                print(f"  –ü–æ–≤–æ—Ä–æ—Ç: {angle}¬∞")
                print(f"  –†–∞–∑–º–µ—Ä: {(bounds[2]-bounds[0])/10:.1f} x {(bounds[3]-bounds[1])/10:.1f} —Å–º")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
                sheet_width_mm = sheet_size[0] * 10
                sheet_height_mm = sheet_size[1] * 10
                
                outside_bounds = (bounds[0] < -1 or bounds[1] < -1 or 
                                bounds[2] > sheet_width_mm + 1 or bounds[3] > sheet_height_mm + 1)
                
                if outside_bounds:
                    print(f"  ‚ùå –í–´–•–û–î–ò–¢ –ó–ê –ì–†–ê–ù–ò–¶–´ –õ–ò–°–¢–ê!")
                    print(f"     –õ–∏—Å—Ç: (0, 0) - ({sheet_width_mm}, {sheet_height_mm})")
                else:
                    print(f"  ‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è
            print(f"\n=== –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–û–ñ–ï–ù–ò–ô ===")
            overlaps = 0
            
            for i in range(len(placed)):
                for j in range(i+1, len(placed)):
                    poly1 = placed[i][0]
                    poly2 = placed[j][0]
                    
                    collision = check_collision(poly1, poly2, min_gap=2.0)
                    
                    if collision:
                        overlaps += 1
                        print(f"‚ùå –ù–ê–õ–û–ñ–ï–ù–ò–ï –º–µ–∂–¥—É –ø–æ–ª–∏–≥–æ–Ω–æ–º {i+1} –∏ {j+1}")
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏
                        bounds1 = poly1.bounds
                        bounds2 = poly2.bounds
                        
                        print(f"   –ü–æ–ª–∏–≥–æ–Ω {i+1}: ({bounds1[0]:.1f}, {bounds1[1]:.1f}) - ({bounds1[2]:.1f}, {bounds1[3]:.1f})")
                        print(f"   –ü–æ–ª–∏–≥–æ–Ω {j+1}: ({bounds2[0]:.1f}, {bounds2[1]:.1f}) - ({bounds2[2]:.1f}, {bounds2[3]:.1f})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                        intersection = poly1.intersects(poly2)
                        print(f"   –ü–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è: {intersection}")
                        
                        if not intersection:
                            # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
                            try:
                                distance = poly1.distance(poly2)
                                print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f}–º–º")
                            except:
                                print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å")
                    else:
                        distance_info = ""
                        try:
                            distance = poly1.distance(poly2)
                            distance_info = f" (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f}–º–º)"
                        except:
                            pass
                        print(f"‚úÖ –ü–æ–ª–∏–≥–æ–Ω—ã {i+1} –∏ {j+1} —Ä–∞–∑–º–µ—â–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ{distance_info}")
            
            if overlaps == 0:
                print(f"‚úÖ –í—Å–µ {len(placed)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω—ã –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏–π!")
            else:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {overlaps} –Ω–∞–ª–æ–∂–µ–Ω–∏–π –∏–∑ {len(placed)*(len(placed)-1)//2} –≤–æ–∑–º–æ–∂–Ω—ã—Ö!")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            try:
                plot_buf = plot_layout(placed, sheet_size)
                with open("tank300_debug_layout.png", 'wb') as f:
                    f.write(plot_buf.getvalue())
                print(f"\nüìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: tank300_debug_layout.png")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        return overlaps == 0 if placed else False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_individual_polygon_placement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤."""
    print("\n=== –¢–ï–°–¢ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –†–ê–ó–ú–ï–©–ï–ù–ò–Ø ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    rect1 = Polygon([(0, 0), (500, 0), (500, 300), (0, 300)])  # 50x30 —Å–º
    rect2 = Polygon([(0, 0), (600, 0), (600, 400), (0, 400)])  # 60x40 —Å–º
    
    polygons = [
        (rect1, "test1.dxf", "—á—ë—Ä–Ω—ã–π", "order1"),
        (rect2, "test2.dxf", "—á—ë—Ä–Ω—ã–π", "order2")
    ]
    
    sheet_size = (200, 140)
    print(f"–†–∞–∑–º–µ—â–∞–µ–º 2 –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ –ª–∏—Å—Ç–µ {sheet_size[0]}x{sheet_size[1]} —Å–º")
    
    try:
        placed, unplaced = bin_packing(polygons, sheet_size, verbose=True)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(placed)} —Ä–∞–∑–º–µ—â–µ–Ω–æ, {len(unplaced)} –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ")
        
        if len(placed) >= 2:
            collision = check_collision(placed[0][0], placed[1][0], min_gap=2.0)
            print(f"–ù–∞–ª–æ–∂–µ–Ω–∏–µ: {collision}")
            
            if collision:
                print("‚ùå –ü–†–û–°–¢–´–ï –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–ò–ö–ò –ù–ê–ö–õ–ê–î–´–í–ê–Æ–¢–°–Ø!")
                return False
            else:
                print("‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ TANK 300...")
    
    success = True
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
        print("\n" + "="*60)
        simple_test = test_individual_polygon_placement()
        success &= simple_test
        
        if not simple_test:
            print("‚ùå –ë–ê–ó–û–í–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ! –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.")
        
        # –¢–µ—Å—Ç 2: –§–∞–π–ª—ã TANK 300
        print("\n" + "="*60)
        tank_test = test_tank300_files()
        success &= tank_test
        
        print("\n" + "="*60)
        if success:
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞.")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
            print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: debug_tank300.log")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)