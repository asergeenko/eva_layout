#!/usr/bin/env python3
import ezdxf
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
from shapely.ops import transform
import numpy as np

def check_dxf_overlaps(dxf_path):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–π –≤ DXF —Ñ–∞–π–ª–µ."""
    
    doc = ezdxf.readfile(dxf_path)
    msp = doc.modelspace()
    
    # –ò–∑–≤–ª–µ—á—å –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    polygons = []
    carpet_names = []
    
    print(f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {dxf_path}")
    print("="*50)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å–ª–æ—è–º
    layer_objects = {}
    for entity in msp:
        if hasattr(entity, 'dxf') and hasattr(entity.dxf, 'layer'):
            layer_name = entity.dxf.layer
            if layer_name != 'SHEET_BOUNDARY' and not layer_name.startswith('Defpoints'):
                if layer_name not in layer_objects:
                    layer_objects[layer_name] = []
                layer_objects[layer_name].append(entity)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–≤—Ä–∞
    for layer_name, entities in layer_objects.items():
        try:
            # –ò–∑–≤–ª–µ—á—å –≤—Å–µ —Ç–æ—á–∫–∏ –∏–∑ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å–ª–æ—è
            all_points = []
            
            for entity in entities:
                points = []
                if entity.dxftype() == 'SPLINE':
                    # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–ª–∞–π–Ω –ø–æ–ª–∏–ª–∏–Ω–∏–µ–π
                    try:
                        spline_points = list(entity.flattening(0.1))  # –¢–æ—á–Ω–æ—Å—Ç—å –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
                        points = [(p.x, p.y) for p in spline_points]
                    except:
                        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –µ—Å–ª–∏ flattening –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        try:
                            points = [(p.x, p.y) for p in entity.control_points]
                        except:
                            continue
                elif entity.dxftype() == 'POLYLINE':
                    points = [(v.dxf.location.x, v.dxf.location.y) for v in entity.vertices]
                elif entity.dxftype() == 'LWPOLYLINE':
                    points = [(p[0], p[1]) for p in entity.get_points()]
                
                all_points.extend(points)
            
            if len(all_points) >= 3:
                # –°–æ–∑–¥–∞—Ç—å –≤—ã–ø—É–∫–ª—É—é –æ–±–æ–ª–æ—á–∫—É –∏–∑ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ —Å–ª–æ—è
                from shapely.geometry import MultiPoint
                if len(all_points) > 2:
                    multi_point = MultiPoint(all_points)
                    polygon = multi_point.convex_hull
                    
                    if polygon.geom_type == 'Polygon' and polygon.is_valid and polygon.area > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
                        polygons.append(polygon)
                        carpet_names.append(layer_name)
                        print(f"–ù–∞–π–¥–µ–Ω –∫–æ–≤–µ—Ä {layer_name}: –ø–ª–æ—â–∞–¥—å {polygon.area:.2f}, —Ç–æ—á–µ–∫ {len(all_points)}")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {layer_name}: {e}")
    
    print(f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–≤—Ä–æ–≤: {len(polygons)}")
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–π:")
    print("-"*30)
    
    overlaps = []
    for i in range(len(polygons)):
        for j in range(i + 1, len(polygons)):
            poly1, poly2 = polygons[i], polygons[j]
            name1, name2 = carpet_names[i], carpet_names[j]
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (–Ω–æ –Ω–µ –∫–∞—Å–∞–Ω–∏–µ)
            if poly1.intersects(poly2) and not poly1.touches(poly2):
                intersection = poly1.intersection(poly2)
                overlap_area = intersection.area
                overlaps.append({
                    'carpet1': name1,
                    'carpet2': name2,
                    'area': overlap_area,
                    'poly1': poly1,
                    'poly2': poly2,
                    'intersection': intersection
                })
                print(f"‚ùå –ù–ê–õ–û–ñ–ï–ù–ò–ï: {name1} ‚Üî {name2} (–ø–ª–æ—â–∞–¥—å: {overlap_area:.2f})")
    
    if not overlaps:
        print("‚úÖ –ù–∞–ª–æ–∂–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
    else:
        print(f"\nüö® –ù–ê–ô–î–ï–ù–û {len(overlaps)} –ù–ê–õ–û–ñ–ï–ù–ò–ô!")
        
        # –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–ª–æ–∂–µ–Ω–∏–π
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–≤—Ä—ã
        colors = plt.cm.Set3(np.linspace(0, 1, len(polygons)))
        for i, (poly, name) in enumerate(zip(polygons, carpet_names)):
            if poly.geom_type == 'Polygon':
                x, y = poly.exterior.xy
                ax.fill(x, y, color=colors[i], alpha=0.7, label=name)
                ax.plot(x, y, 'k-', linewidth=0.5)
                
                # –ü–æ–¥–ø–∏—Å—å –ø–æ —Ü–µ–Ω—Ç—Ä—É
                centroid = poly.centroid
                ax.text(centroid.x, centroid.y, name, ha='center', va='center', 
                       fontsize=8, fontweight='bold')
        
        # –í—ã–¥–µ–ª–∏—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫—Ä–∞—Å–Ω—ã–º
        for overlap in overlaps:
            if overlap['intersection'].geom_type == 'Polygon':
                x, y = overlap['intersection'].exterior.xy
                ax.fill(x, y, color='red', alpha=0.8)
                ax.plot(x, y, 'r-', linewidth=2)
        
        ax.set_aspect('equal')
        ax.grid(True, alpha=0.3)
        ax.set_title(f'–ù–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ –≤ {dxf_path}')
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        overlap_image = dxf_path.replace('.dxf', '_overlaps.png')
        plt.savefig(overlap_image, dpi=150, bbox_inches='tight')
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏—è–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {overlap_image}")
        
    return overlaps

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª 200_140_1_black.dxf
    overlaps = check_dxf_overlaps("/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf")