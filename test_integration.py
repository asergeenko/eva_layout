#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π
"""

import pandas as pd
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_excel_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Excel"""
    print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ Excel")
    print("=" * 50)
    
    if not os.path.exists('sample_input.xlsx'):
        print("‚ùå –§–∞–π–ª sample_input.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    try:
        df = pd.read_excel('sample_input.xlsx')
        print(f"‚úÖ Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑–¥–µ–ª–∏–π –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ H
    if len(df.columns) > 7:
        product_types = df.iloc[:, 7].value_counts()
        print("\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏–∑–¥–µ–ª–∏–π (–∫–æ–ª–æ–Ω–∫–∞ H):")
        for product_type, count in product_types.items():
            if pd.notna(product_type) and product_type != '–ò–∑–¥–µ–ª–∏–µ':
                print(f"   ‚Ä¢ {product_type}: {count} –∑–∞–∫–∞–∑–æ–≤")
    
    # –ù–∞–π–¥–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    test_orders = []
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    if df.shape[0] > 2:
        data_rows = df.iloc[2:].copy()
        
        for idx, row in data_rows.iterrows():
            if pd.notna(row.iloc[3]) and pd.notna(row.iloc[7]):  # –ï—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª –∏ —Ç–∏–ø
                article = str(row.iloc[3])
                product = str(row.iloc[4]) if pd.notna(row.iloc[4]) else ''
                product_type = str(row.iloc[7])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                if not any(order['product_type'] == product_type for order in test_orders):
                    test_orders.append({
                        'article': article,
                        'product': product,
                        'product_type': product_type
                    })
                
                if len(test_orders) >= 6:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                    break
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_orders)} —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤:")
    
    success_count = 0
    
    for i, order in enumerate(test_orders, 1):
        print(f"\n{i}. –¢–∏–ø: {order['product_type']}")
        print(f"   –ê—Ä—Ç–∏–∫—É–ª: {order['article']}")
        print(f"   –¢–æ–≤–∞—Ä: {order['product'][:60]}...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        files_found = simulate_file_search(order['article'], order['product'], order['product_type'])
        
        if files_found:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_found)}")
            print(f"   üìÅ –§–∞–π–ª—ã: {files_found}")
            success_count += 1
        else:
            print(f"   ‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(test_orders)} —Ç–∏–ø–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    
    return success_count > len(test_orders) * 0.5

def simulate_file_search(article, product_name, product_type):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    
    # –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏
    base_folder = find_base_folder(article, product_name)
    
    if not base_folder:
        return []
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ DXF —Ñ–∞–π–ª–æ–≤
    dxf_folder = os.path.join(base_folder, "DXF")
    search_folder = dxf_folder if os.path.exists(dxf_folder) else base_folder
    
    try:
        all_files = [f for f in os.listdir(search_folder) if f.lower().endswith('.dxf')]
        all_files.sort()
    except OSError:
        return []
    
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É –∏–∑–¥–µ–ª–∏—è
    if product_type == "–±–æ—Ä—Ç":
        # –§–∞–π–ª—ã 1.dxf –¥–æ 9.dxf
        filtered_files = []
        for i in range(1, 10):
            target_file = f"{i}.dxf"
            if target_file in all_files:
                filtered_files.append(target_file)
        return filtered_files
    
    elif product_type == "–≤–æ–¥–∏—Ç–µ–ª—å":
        # –¢–æ–ª—å–∫–æ 1.dxf
        return ["1.dxf"] if "1.dxf" in all_files else []
    
    elif product_type == "–ø–µ—Ä–µ–¥–Ω–∏–µ":
        # 1.dxf –∏ 2.dxf
        filtered_files = []
        for i in [1, 2]:
            target_file = f"{i}.dxf"
            if target_file in all_files:
                filtered_files.append(target_file)
        return filtered_files
    
    elif product_type == "–±–∞–≥–∞–∂–Ω–∏–∫":
        # –§–∞–π–ª—ã 10.dxf –¥–æ 16.dxf
        filtered_files = []
        for i in range(10, 17):
            target_file = f"{i}.dxf"
            if target_file in all_files:
                filtered_files.append(target_file)
        return filtered_files
    
    elif product_type in ["—Å–∞–º–æ–∫–∞—Ç", "–ª–æ–¥–∫–∞", "–∫–æ–≤–µ—Ä"]:
        # –í—Å–µ —Ñ–∞–π–ª—ã
        return all_files
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –≤—Å–µ —Ñ–∞–π–ª—ã
        return all_files

def calculate_folder_match_score(search_term, folder_name):
    """Calculate how well a folder name matches the search term."""
    import re
    
    search_lower = search_term.lower()
    folder_lower = folder_name.lower()
    score = 0
    
    # Direct substring match
    if search_lower in folder_lower or folder_lower in search_lower:
        score += max(len(search_lower), len(folder_lower)) * 2
    
    # Word-based matching
    search_words = re.split(r'[\s\-_()]+', search_lower)
    folder_words = re.split(r'[\s\-_()]+', folder_lower)
    
    # Remove empty words
    search_words = [w for w in search_words if len(w) > 1]
    folder_words = [w for w in folder_words if len(w) > 1]
    
    for search_word in search_words:
        for folder_word in folder_words:
            if search_word == folder_word:
                score += len(search_word) * 3
            elif search_word in folder_word:
                score += len(search_word) * 2
            elif folder_word in search_word:
                score += len(folder_word) * 2
            elif search_word[:3] == folder_word[:3] and len(search_word) > 2:
                score += 2  # Partial match for similar words
    
    return score

def find_base_folder(article, product_name):
    """–ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ)"""
    
    # Strategy 1: Direct search in flat dxf_samples folder structure
    if product_name:
        product_upper = product_name.upper()
        
        # Search directly in dxf_samples folder for matching folder names
        best_match = None
        best_score = 0
        
        for item in os.listdir("dxf_samples"):
            item_path = os.path.join("dxf_samples", item)
            if os.path.isdir(item_path):
                score = calculate_folder_match_score(product_name, item)
                if score > best_score:
                    best_score = score
                    best_match = item_path
        
        if best_match and best_score >= 6:
            return best_match
        
        # Special categories handling
        special_keywords = {
            '–ª–æ–¥–∫–∞': ['–õ–æ–¥–∫–∞', 'ADMIRAL', 'ABAKAN', 'AKVA', '–ê–ì–£–õ', '–ê–∑–∏–º—É—Ç'],
            '–∫–æ–≤–µ—Ä': ['–ö–æ–≤—Ä–∏–∫'],
            '—Å–∞–º–æ–∫–∞—Ç': ['–î–ï–ö–ê', 'KUGOO']
        }
        
        for category, keywords in special_keywords.items():
            for keyword in keywords:
                if keyword.upper() in product_upper:
                    # Search for folders containing this keyword
                    for item in os.listdir("dxf_samples"):
                        if keyword.lower() in item.lower():
                            folder_path = os.path.join("dxf_samples", item)
                            if os.path.isdir(folder_path):
                                return folder_path
    
    # Strategy 2: Parse article format like EVA_BORT+Brand+Model
    if '+' in article:
        parts = article.split('+')
        if len(parts) >= 3:
            brand = parts[1].strip()
            model_info = parts[2].strip()
            
            # Handle special case mappings first
            special_mappings = {
                'Kugoo': ['–î–ï–ö–ê KUGOO KIRIN M4 PRO', '–î–ï–ö–ê KUGOO M4 PRO JILONG'],
                '–ê–±–∞–∫–∞–Ω': ['–õ–æ–¥–∫–∞ ABAKAN 430 JET'],
                'Admiral': ['–õ–æ–¥–∫–∞ ADMIRAL 335', '–õ–æ–¥–∫–∞ ADMIRAL 340', '–õ–æ–¥–∫–∞ ADMIRAL 410'],
                'AKVA': ['–õ–æ–¥–∫–∞ AKVA 2600', '–õ–æ–¥–∫–∞ AKVA 2800']
            }
            
            if brand in special_mappings:
                for folder_name in special_mappings[brand]:
                    folder_path = os.path.join("dxf_samples", folder_name)
                    if os.path.exists(folder_path):
                        return folder_path
            
            # For standard automotive brands, search the flat folder structure
            search_term = f"{brand} {model_info}".upper()
            
            # Find best match in flat folder structure
            best_match = None
            best_score = 0
            
            for item in os.listdir("dxf_samples"):
                item_path = os.path.join("dxf_samples", item)
                if os.path.isdir(item_path):
                    score = calculate_folder_match_score(search_term, item)
                    if score > best_score:
                        best_score = score
                        best_match = item_path
            
            if best_match and best_score >= 3:
                return best_match
    
    return None

def main():
    print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤")
    print("=" * 70)
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Excel
    integration_success = test_excel_integration()
    
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if integration_success:
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
        
        print("\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("   1. streamlit run streamlit_demo.py")
        print("   2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ sample_input.xlsx")
        print("   3. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∏–∑–¥–µ–ª–∏–π")
        print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        
        return True
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        return False

if __name__ == "__main__":
    main()