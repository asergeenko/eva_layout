#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤.
"""

from layout_optimizer import rotate_polygon, translate_polygon, bin_packing, save_dxf_layout_complete, parse_dxf_complete
from shapely.geometry import Polygon
import tempfile
import os

def create_test_carpets():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–≤—Ä–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–≤—Ä–æ–≤ —Ä–∞–∑–Ω–æ–π —Ñ–æ—Ä–º—ã
    carpet1 = Polygon([(0, 0), (100, 0), (100, 60), (0, 60)])  # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 100x60
    carpet2 = Polygon([(0, 0), (80, 0), (80, 50), (0, 50)])    # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 80x50  
    carpet3 = Polygon([(0, 0), (90, 0), (90, 40), (0, 40)])    # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 90x40
    
    return [
        (carpet1, "carpet1.dxf", "—Å–µ—Ä—ã–π", "order1"),
        (carpet2, "carpet2.dxf", "—Å–µ—Ä—ã–π", "order1"), 
        (carpet3, "carpet3.dxf", "—Å–µ—Ä—ã–π", "order1")
    ]

def test_overlap_issue():
    """–¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–ª–æ–∂–µ–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ ===")
    
    carpets = create_test_carpets()
    sheet_size = (300, 200)  # 30x20 —Å–º –ª–∏—Å—Ç
    
    print(f"–†–∞–∑–º–µ—â–∞–µ–º {len(carpets)} –∫–æ–≤—Ä–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ {sheet_size[0]/10}x{sheet_size[1]/10} —Å–º")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º bin_packing
    placed, unplaced = bin_packing(carpets, sheet_size, verbose=False)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç bin_packing:")
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)}")
    print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
    
    if len(placed) == 0:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω –∫–æ–≤–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω!")
        return False
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–∞—Ö
    print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–∞—Ö:")
    for i, placed_carpet in enumerate(placed):
        polygon = placed_carpet[0]
        x_offset = placed_carpet[1] if len(placed_carpet) > 1 else 0
        y_offset = placed_carpet[2] if len(placed_carpet) > 2 else 0
        angle = placed_carpet[3] if len(placed_carpet) > 3 else 0
        filename = placed_carpet[4] if len(placed_carpet) > 4 else "unknown"
        
        print(f"  –ö–æ–≤–µ—Ä {i+1} ({filename}):")
        print(f"    Bounds: {polygon.bounds}")
        print(f"    –°–º–µ—â–µ–Ω–∏–µ: ({x_offset}, {y_offset})")
        print(f"    –£–≥–æ–ª: {angle}¬∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–≤—Ä–∞—Ö
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π:")
    from layout_optimizer import check_collision
    
    overlaps = []
    for i in range(len(placed)):
        for j in range(i+1, len(placed)):
            poly1 = placed[i][0]
            poly2 = placed[j][0]
            if check_collision(poly1, poly2):
                overlaps.append((i+1, j+1))
                print(f"  ‚ùå –ö–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É –∫–æ–≤—Ä–∞–º–∏ {i+1} –∏ {j+1}")
                print(f"    –ö–æ–≤–µ—Ä {i+1}: bounds={poly1.bounds}")
                print(f"    –ö–æ–≤–µ—Ä {j+1}: bounds={poly2.bounds}")
    
    if not overlaps:
        print(f"  ‚úÖ –ö–æ–ª–ª–∏–∑–∏–π –≤ bin_packing –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ DXF –∏ —á—Ç–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
    print(f"\n=== –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DXF ===")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—É—Å—Ç—ã–º–∏ entity —Å–ø–∏—Å–∫–∞–º–∏ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ)
    original_dxf_data_map = {}
    for carpet_data in carpets:
        filename = carpet_data[1]
        original_polygon = carpet_data[0]
        original_dxf_data_map[filename] = {
            'combined_polygon': original_polygon,
            'original_entities': []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º—ã
        }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ DXF —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å –ø—É—Å—Ç—ã–º–∏ entity)
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        save_dxf_layout_complete(
            placed, 
            sheet_size, 
            output_path, 
            original_dxf_data_map  # –° –ø—É—Å—Ç—ã–º–∏ entities
        )
        print(f"‚úÖ DXF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        result = parse_dxf_complete(output_path, verbose=True)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–µ–Ω–∏—è DXF: –Ω–∞–π–¥–µ–Ω–æ {len(result['polygons']) if result['polygons'] else 0} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
        
        if result['polygons'] and len(result['polygons']) > 1:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞ (–ø–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω)
            dxf_carpets = result['polygons'][1:]  
            print(f"–ò–∑ DXF –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(dxf_carpets)} –∫–æ–≤—Ä–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–∑ DXF –∫–æ–≤—Ä–∞—Ö
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –≤ DXF:")
            dxf_overlaps = []
            for i in range(len(dxf_carpets)):
                for j in range(i+1, len(dxf_carpets)):
                    poly1 = dxf_carpets[i]
                    poly2 = dxf_carpets[j] 
                    if check_collision(poly1, poly2):
                        dxf_overlaps.append((i+1, j+1))
                        print(f"  ‚ùå –ö–æ–ª–ª–∏–∑–∏—è –≤ DXF –º–µ–∂–¥—É –∫–æ–≤—Ä–∞–º–∏ {i+1} –∏ {j+1}")
                        print(f"    –ö–æ–≤–µ—Ä {i+1}: bounds={poly1.bounds}")
                        print(f"    –ö–æ–≤–µ—Ä {j+1}: bounds={poly2.bounds}")
            
            if not dxf_overlaps:
                print(f"  ‚úÖ –ö–æ–ª–ª–∏–∑–∏–π –≤ DXF –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–ª–∏–∑–∏–π
            if len(overlaps) == 0 and len(dxf_overlaps) > 0:
                print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!")
                print(f"  - –í bin_packing –∫–æ–ª–ª–∏–∑–∏–π: {len(overlaps)}")
                print(f"  - –í DXF –∫–æ–ª–ª–∏–∑–∏–π: {len(dxf_overlaps)}")
                print(f"  –ü—Ä–æ–±–ª–µ–º–∞ –≤ save_dxf_layout_complete!")
                return False
            elif len(overlaps) > 0 and len(dxf_overlaps) == 0:
                print(f"\nü§î –°—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:")
                print(f"  - –í bin_packing –∫–æ–ª–ª–∏–∑–∏–π: {len(overlaps)}")
                print(f"  - –í DXF –∫–æ–ª–ª–∏–∑–∏–π: {len(dxf_overlaps)}")
                return False
            elif len(overlaps) == len(dxf_overlaps) == 0:
                print(f"\n‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ - –∫–æ–ª–ª–∏–∑–∏–π –Ω–µ—Ç –Ω–∏–≥–¥–µ")
                return True
            else:
                print(f"\n‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–ª–∏–∑–∏–π —Ä–∞–∑–Ω–æ–µ:")
                print(f"  - –í bin_packing –∫–æ–ª–ª–∏–∑–∏–π: {len(overlaps)}")  
                print(f"  - –í DXF –∫–æ–ª–ª–∏–∑–∏–π: {len(dxf_overlaps)}")
                return len(overlaps) == len(dxf_overlaps)
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–≤—Ä—ã –∏–∑ DXF")
            return False
            
    finally:
        if os.path.exists(output_path):
            os.unlink(output_path)

if __name__ == "__main__":
    success = test_overlap_issue()
    print(f"\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    if success:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ - –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")