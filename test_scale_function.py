#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é scale_polygons_to_fit - —á—Ç–æ –æ–Ω–∞ –¥–µ–ª–∞–µ—Ç —Å TANK –æ–±—ä–µ–∫—Ç–∞–º–∏
"""

import sys
sys.path.insert(0, '.')

import importlib
import layout_optimizer
importlib.reload(layout_optimizer)

from layout_optimizer import parse_dxf_complete, scale_polygons_to_fit
import os
import glob

def test_scale_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º scale_polygons_to_fit"""
    print("üîç –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ò scale_polygons_to_fit")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º TANK –æ–±—ä–µ–∫—Ç—ã
    tank_file = "dxf_samples/TANK 300/1.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        result = parse_dxf_complete(tank_file)
        polygons = result['polygons']
        
        if not polygons:
            print("‚ùå –ü–æ–ª–∏–≥–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –≤ Streamlit
        polygons_with_names = []
        for i, poly in enumerate(polygons):
            polygons_with_names.append((poly, f"tank_{i+1}.dxf", "—á–µ—Ä–Ω—ã–π", i))
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(polygons_with_names)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –†–∞–∑–º–µ—Ä—ã –î–û scale_polygons_to_fit
        print(f"\nüìè –†–ê–ó–ú–ï–†–´ –î–û –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø:")
        for i, (poly, name, color, oid) in enumerate(polygons_with_names):
            bounds = poly.bounds
            width = bounds[2] - bounds[0]
            height = bounds[3] - bounds[1]
            print(f"  –û–±—ä–µ–∫—Ç {i+1}: {width:.2f}√ó{height:.2f}–º–º, –ø–ª–æ—â–∞–¥—å={poly.area:.1f}")
        
        # –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞ –∫–∞–∫ –≤ Streamlit
        reference_sheet_size = (140, 200)  # —Å–º
        print(f"\n–†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: {reference_sheet_size} —Å–º = {reference_sheet_size[0]*10}√ó{reference_sheet_size[1]*10}–º–º")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º scale_polygons_to_fit
        print(f"\nüîÑ –ü–†–ò–ú–ï–ù–Ø–ï–ú scale_polygons_to_fit...")
        scaled_polygons = scale_polygons_to_fit(polygons_with_names, reference_sheet_size, verbose=True)
        
        # –†–∞–∑–º–µ—Ä—ã –ü–û–°–õ–ï scale_polygons_to_fit
        print(f"\nüìè –†–ê–ó–ú–ï–†–´ –ü–û–°–õ–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø:")
        for i, (poly, name, color, oid) in enumerate(scaled_polygons):
            bounds = poly.bounds
            width = bounds[2] - bounds[0]
            height = bounds[3] - bounds[1]
            print(f"  –û–±—ä–µ–∫—Ç {i+1}: {width:.2f}√ó{height:.2f}–º–º, –ø–ª–æ—â–∞–¥—å={poly.area:.1f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        if polygons_with_names and scaled_polygons:
            orig_bounds = polygons_with_names[0][0].bounds
            scaled_bounds = scaled_polygons[0][0].bounds
            
            orig_width = orig_bounds[2] - orig_bounds[0]
            scaled_width = scaled_bounds[2] - scaled_bounds[0]
            
            scale_factor = scaled_width / orig_width if orig_width > 0 else 1
            print(f"\nüéØ –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø: {scale_factor:.4f}")
            
            if scale_factor < 1.0:
                print(f"‚ùå –û–ë–™–ï–ö–¢–´ –£–ú–ï–ù–¨–®–ï–ù–´! –ë—ã–ª–æ {orig_width:.1f}–º–º ‚Üí —Å—Ç–∞–ª–æ {scaled_width:.1f}–º–º")
            elif scale_factor > 1.0:
                print(f"‚úÖ –û–±—ä–µ–∫—Ç—ã —É–≤–µ–ª–∏—á–µ–Ω—ã: {orig_width:.1f}–º–º ‚Üí {scaled_width:.1f}–º–º")
            else:
                print(f"‚úÖ –†–∞–∑–º–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_scale_function()