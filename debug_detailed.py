#!/usr/bin/env python3

from pathlib import Path
from dxf_utils import parse_dxf_complete
from carpet import Carpet
from layout_optimizer import find_bottom_left_position, rotate_polygon, translate_polygon, check_collision
from shapely.geometry import Polygon

def debug_bin_packing_step_by_step():
    """–ü–æ–ª–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ bin_packing –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –∫–æ–≤—Ä–∞
    carpets = []
    for i in range(1, 3):
        dxf_path = f'dxf_samples/HYUNDAI SOLARIS 1/{i}.dxf'
        polygon_data = parse_dxf_complete(dxf_path, verbose=False)
        if polygon_data and polygon_data.get("combined_polygon"):
            carpet = Carpet(polygon_data["combined_polygon"], f"{i}.dxf", "—á—ë—Ä–Ω—ã–π", f"group_{i}", 1)
            carpets.append(carpet)

    if len(carpets) < 2:
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–≤—Ä–æ–≤")
        return

    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ 2 –∫–æ–≤—Ä–æ–≤:")
    print(f"1.dxf: –ø–ª–æ—â–∞–¥—å {carpets[0].polygon.area:.0f} –º–º¬≤")
    print(f"2.dxf: –ø–ª–æ—â–∞–¥—å {carpets[1].polygon.area:.0f} –º–º¬≤")

    # –†–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–∞
    sheet_size = (140, 200)  # —Å–º
    sheet_width_mm, sheet_height_mm = sheet_size[0] * 10, sheet_size[1] * 10

    print(f"–õ–∏—Å—Ç: {sheet_width_mm} x {sheet_height_mm} –º–º")

    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–≥–∏–∫—É bin_packing
    placed = []
    unplaced = []

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–∫–∞–∫ –≤ bin_packing)
    def get_polygon_priority(carpet: Carpet):
        polygon = carpet.polygon
        area = polygon.area
        bounds = polygon.bounds
        width = bounds[2] - bounds[0]
        height = bounds[3] - bounds[1]
        aspect_ratio = max(width / height, height / width) if min(width, height) > 0 else 1
        compactness = area / (width * height) if width * height > 0 else 0
        perimeter_approx = 2 * (width + height)
        return (
            area * 1.0
            + (aspect_ratio - 1) * area * 0.3
            + (1 - compactness) * area * 0.2
            + perimeter_approx * 0.05
        )

    sorted_polygons = sorted(carpets, key=get_polygon_priority, reverse=True)
    print(f"\n–ü–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {[c.filename for c in sorted_polygons]}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–≤—ë—Ä
    for i, carpet in enumerate(sorted_polygons):
        print(f"\n{'='*50}")
        print(f"–†–ê–ó–ú–ï–©–ï–ù–ò–ï –ö–û–í–†–ê {i+1}: {carpet.filename}")
        print(f"{'='*50}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        bounds = carpet.polygon.bounds
        poly_width = bounds[2] - bounds[0]
        poly_height = bounds[3] - bounds[1]

        print(f"–†–∞–∑–º–µ—Ä—ã: {poly_width:.1f} x {poly_height:.1f} –º–º")

        if poly_width > sheet_width_mm or poly_height > sheet_height_mm:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –ª–∏—Å—Ç–∞")
            unplaced.append(carpet)
            continue

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–≤–æ—Ä–æ—Ç—ã
        best_placement = None
        best_score = float("inf")

        rotation_angles = [0, 90, 180, 270]

        for angle in rotation_angles:
            print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç {angle}¬∞ ---")

            rotated = rotate_polygon(carpet.polygon, angle) if angle != 0 else carpet.polygon
            rotated_bounds = rotated.bounds
            rotated_width = rotated_bounds[2] - rotated_bounds[0]
            rotated_height = rotated_bounds[3] - rotated_bounds[1]

            print(f"–ü–æ–≤—ë—Ä–Ω—É—Ç—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {rotated_width:.1f} x {rotated_height:.1f} –º–º")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏
            if rotated_width > sheet_width_mm or rotated_height > sheet_height_mm:
                print(f"‚ùå –ù–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –ª–∏—Å—Ç")
                continue

            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é
            print(f"–ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–≤—ë—Ä–Ω—É—Ç–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞...")
            best_x, best_y = find_bottom_left_position(
                rotated, placed, sheet_width_mm, sheet_height_mm
            )

            if best_x is not None and best_y is not None:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: ({best_x:.1f}, {best_y:.1f})")

                # –í—ã—á–∏—Å–ª—è–µ–º —Å—á—ë—Ç
                position_score = best_y * 10 + best_x * 100

                # –ë–æ–Ω—É—Å—ã –∑–∞ —Ñ–æ—Ä–º—É (–∫–∞–∫ –≤ bin_packing)
                shape_bonus = 0
                aspect_ratio = rotated_width / rotated_height if rotated_height > 0 else 1

                if aspect_ratio > 1.05:
                    width_bonus = min(2000, int((aspect_ratio - 1) * 2000))
                    shape_bonus -= width_bonus
                    if best_y < 5:
                        shape_bonus -= 3000
                    if best_x < 5:
                        shape_bonus -= 2000

                total_score = position_score + shape_bonus
                print(f"–°—á—ë—Ç: position={position_score}, shape={shape_bonus}, total={total_score}")

                if total_score < best_score:
                    best_score = total_score
                    translated = translate_polygon(
                        rotated, best_x - rotated_bounds[0], best_y - rotated_bounds[1]
                    )
                    best_placement = {
                        "polygon": translated,
                        "x_offset": best_x - rotated_bounds[0],
                        "y_offset": best_y - rotated_bounds[1],
                        "angle": angle,
                        "position": (best_x, best_y)
                    }
                    print(f"üéØ –ù–æ–≤—ã–π –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!")
                else:
                    print(f"–ù–µ –ª—É—á—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            else:
                print(f"‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª—É—á—à–µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        if best_placement:
            from carpet import PlacedCarpet
            placed_carpet = PlacedCarpet(
                best_placement["polygon"],
                best_placement["x_offset"],
                best_placement["y_offset"],
                best_placement["angle"],
                carpet.filename,
                carpet.color,
                carpet.order_id,
                carpet.carpet_id,
                carpet.priority,
            )
            placed.append(placed_carpet)

            print(f"\n‚úÖ –†–ê–ó–ú–ï–©–Å–ù: {carpet.filename}")
            print(f"   –ü–æ–∑–∏—Ü–∏—è: {best_placement['position']}")
            print(f"   –ü–æ–≤–æ—Ä–æ—Ç: {best_placement['angle']}¬∞")
            print(f"   –ì—Ä–∞–Ω–∏—Ü—ã: {best_placement['polygon'].bounds}")
        else:
            print(f"\n‚ùå –ù–ï –†–ê–ó–ú–ï–©–Å–ù: {carpet.filename}")
            unplaced.append(carpet)

    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)} –∫–æ–≤—Ä–æ–≤")
    print(f"–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)} –∫–æ–≤—Ä–æ–≤")

    if len(placed) < len(carpets):
        print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –Ω–µ –≤—Å–µ –∫–æ–≤—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã!")

        if len(placed) >= 1:
            first_bounds = placed[0].polygon.bounds
            print(f"–ü–µ—Ä–≤—ã–π –∫–æ–≤—ë—Ä –∑–∞–Ω–∏–º–∞–µ—Ç: {first_bounds}")

            remaining_width = sheet_width_mm - (first_bounds[2] - first_bounds[0])
            remaining_height = sheet_height_mm - (first_bounds[3] - first_bounds[1])
            print(f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ: {remaining_width:.1f} x {remaining_height:.1f} –º–º")

if __name__ == "__main__":
    debug_bin_packing_step_by_step()