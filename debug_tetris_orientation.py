#!/usr/bin/env python3

from pathlib import Path
from dxf_utils import parse_dxf_complete
from layout_optimizer import Carpet, rotate_polygon
from shapely.geometry import Polygon
import numpy as np

def analyze_tetris_quality(carpet_polygon, angle=0):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ç—Ä–∏—Å–æ–≤–æ—Å—Ç—å –∫–æ–≤—Ä–∞ –≤ –¥–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏."""
    rotated = rotate_polygon(carpet_polygon, angle) if angle != 0 else carpet_polygon
    bounds = rotated.bounds

    # Bounding box –ø–ª–æ—â–∞–¥—å
    bbox_area = (bounds[2] - bounds[0]) * (bounds[3] - bounds[1])
    actual_area = rotated.area

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è bounding box
    fill_ratio = actual_area / bbox_area if bbox_area > 0 else 0

    # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –ø–æ–¥ –∫–æ–≤—Ä–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    test_points = []
    for x in np.linspace(bounds[0], bounds[2], 10):
        for y in np.linspace(bounds[1] - 50, bounds[1], 5):  # 50–º–º –ø–æ–¥ –∫–æ–≤—Ä–æ–º
            test_points.append((x, y))

    accessible_points = sum(1 for p in test_points if not rotated.contains(Polygon([p, (p[0]+1, p[1]), (p[0]+1, p[1]+1), (p[0], p[1]+1)])))

    accessibility_ratio = accessible_points / len(test_points) if test_points else 0

    # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–ø—É—Å—Ç–æ—Ç–∞ —Å–≤–µ—Ä—Ö—É –≤ bbox)
    top_space_height = 200 - (bounds[3] - bounds[1])  # –í—ã—Å–æ—Ç–∞ –ª–∏—Å—Ç–∞ –º–∏–Ω—É—Å –≤—ã—Å–æ—Ç–∞ –∫–æ–≤—Ä–∞

    return {
        'angle': angle,
        'fill_ratio': fill_ratio,
        'accessibility_ratio': accessibility_ratio,
        'top_space_height': top_space_height,
        'tetris_score': fill_ratio * 0.3 + accessibility_ratio * 0.4 + (top_space_height / 200) * 0.3,
        'bounds': bounds
    }

def debug_carpet_8_orientations():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–≤—Ä–∞ 8.dxf –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ—Ç—Ä–∏—Å–æ–≤–æ—Å—Ç–∏."""

    dxf_file = Path('dxf_samples/SKODA KODIAQ/8.dxf')
    if not dxf_file.exists():
        print(f"‚ùå File not found: {dxf_file}")
        return

    try:
        polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
        if not polygon_data or not polygon_data.get("combined_polygon"):
            print("‚ùå Failed to parse DXF file")
            return

        base_polygon = polygon_data["combined_polygon"]
        print(f"üìä Analyzing carpet 8.dxf")
        print(f"Area: {base_polygon.area/10000:.1f} cm¬≤")
        print(f"Original bounds: {base_polygon.bounds}")
        print()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ 4 –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        orientations = []
        for angle in [0, 90, 180, 270]:
            analysis = analyze_tetris_quality(base_polygon, angle)
            orientations.append(analysis)

            print(f"üîÑ Angle {angle}¬∞:")
            print(f"  Fill ratio: {analysis['fill_ratio']:.3f} (bbox utilization)")
            print(f"  Accessibility: {analysis['accessibility_ratio']:.3f} (space below accessible)")
            print(f"  Top space: {analysis['top_space_height']:.0f}mm (free space above)")
            print(f"  TETRIS SCORE: {analysis['tetris_score']:.3f}")
            print(f"  Bounds: ({analysis['bounds'][0]:.0f}, {analysis['bounds'][1]:.0f}) to ({analysis['bounds'][2]:.0f}, {analysis['bounds'][3]:.0f})")
            print()

        # –ù–∞–π–¥–µ–º –ª—É—á—à—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        best = max(orientations, key=lambda x: x['tetris_score'])
        worst = min(orientations, key=lambda x: x['tetris_score'])

        print("üèÜ BEST TETRIS ORIENTATION:")
        print(f"  Angle: {best['angle']}¬∞ (score: {best['tetris_score']:.3f})")
        print(f"  Improvement over worst: {((best['tetris_score'] - worst['tetris_score']) / worst['tetris_score'] * 100):.1f}%")
        print()

        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if best['angle'] != 0:
            print(f"  ‚úÖ –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ {best['angle']}¬∞ —É–ª—É—á—à–∏—Ç —Ç–µ—Ç—Ä–∏—Å–æ–≤–æ—Å—Ç—å")
        else:
            print("  ‚ÑπÔ∏è  –¢–µ–∫—É—â–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —É–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞")

        if best['accessibility_ratio'] > 0.7:
            print("  ‚úÖ –•–æ—Ä–æ—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å–Ω–∏–∑—É")
        else:
            print("  ‚ö†Ô∏è  –ö–æ–≤–µ—Ä –∑–∞–ø–∏—Ä–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–Ω–∏–∑—É")

        if best['top_space_height'] > 100:
            print("  ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Å–≤–µ—Ä—Ö—É")
        else:
            print("  ‚ö†Ô∏è  –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Å–≤–µ—Ä—Ö—É")

        return orientations

    except Exception as e:
        print(f"‚ùå Error analyzing carpet: {e}")
        return []

if __name__ == "__main__":
    debug_carpet_8_orientations()