#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è rotate_polygon.
"""

from layout_optimizer import rotate_polygon, translate_polygon, check_collision, bin_packing
from shapely.geometry import Polygon
import matplotlib.pyplot as plt

def visualize_polygons(polygons, title="–ü–æ–ª–∏–≥–æ–Ω—ã"):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    fig, ax = plt.subplots(figsize=(10, 8))
    
    colors = ['red', 'blue', 'green', 'orange', 'purple']
    
    for i, poly in enumerate(polygons):
        color = colors[i % len(colors)]
        x, y = poly.exterior.xy
        ax.fill(x, y, alpha=0.5, color=color, edgecolor='black', linewidth=2, 
                label=f'–ü–æ–ª–∏–≥–æ–Ω {i+1}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥
        centroid = poly.centroid
        ax.plot(centroid.x, centroid.y, 'ko', markersize=5)
        ax.annotate(f'P{i+1}', (centroid.x, centroid.y), 
                   ha='center', va='center', fontweight='bold', color='white')
    
    ax.set_aspect("equal")
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_title(title)
    plt.tight_layout()
    plt.savefig(f'/tmp/{title.replace(" ", "_").lower()}.png', dpi=150)
    plt.close()
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: /tmp/{title.replace(' ', '_').lower()}.png")

def test_collision_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π"""
    print("=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    poly1 = Polygon([(0, 0), (50, 0), (50, 30), (0, 30)])
    poly2 = Polygon([(60, 0), (110, 0), (110, 30), (60, 30)])  # –ù–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
    poly3 = Polygon([(40, 0), (90, 0), (90, 30), (40, 30)])   # –ü–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å poly1
    
    print(f"–ü–æ–ª–∏–≥–æ–Ω 1: bounds={poly1.bounds}")
    print(f"–ü–æ–ª–∏–≥–æ–Ω 2: bounds={poly2.bounds}")
    print(f"–ü–æ–ª–∏–≥–æ–Ω 3: bounds={poly3.bounds}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
    collision_1_2 = check_collision(poly1, poly2)
    collision_1_3 = check_collision(poly1, poly3)
    collision_2_3 = check_collision(poly2, poly3)
    
    print(f"–ö–æ–ª–ª–∏–∑–∏—è poly1 –∏ poly2: {collision_1_2} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: False)")
    print(f"–ö–æ–ª–ª–∏–∑–∏—è poly1 –∏ poly3: {collision_1_3} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: True)")
    print(f"–ö–æ–ª–ª–∏–∑–∏—è poly2 –∏ poly3: {collision_2_3} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: False)")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º
    visualize_polygons([poly1, poly2, poly3], "–¢–µ—Å—Ç –∫–æ–ª–ª–∏–∑–∏–π")
    
    return not collision_1_2 and collision_1_3 and not collision_2_3

def test_rotation_collision():
    """–¢–µ—Å—Ç –∫–æ–ª–ª–∏–∑–∏–π –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞"""
    print("\n=== –¢–µ—Å—Ç –∫–æ–ª–ª–∏–∑–∏–π –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–æ–ª–∏–≥–æ–Ω–∞
    original1 = Polygon([(0, 0), (40, 0), (40, 20), (0, 20)])
    original2 = Polygon([(50, 0), (90, 0), (90, 20), (50, 20)])
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã:")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 1: bounds={original1.bounds}")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 2: bounds={original2.bounds}")
    print(f"  –ö–æ–ª–ª–∏–∑–∏—è –¥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞: {check_collision(original1, original2)}")
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
    rotated1 = rotate_polygon(original1, 90)
    print(f"\n–ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ–ª–∏–≥–æ–Ω–∞ 1 –Ω–∞ 90¬∞:")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 1: bounds={rotated1.bounds}")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 2: bounds={original2.bounds}")
    print(f"  –ö–æ–ª–ª–∏–∑–∏—è –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞: {check_collision(rotated1, original2)}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    visualize_polygons([original1, original2], "–î–æ –ø–æ–≤–æ—Ä–æ—Ç–∞")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
    visualize_polygons([rotated1, original2], "–ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞")
    
    return True

def test_bin_packing_collision():
    """–¢–µ—Å—Ç bin_packing –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–æ–ª–ª–∏–∑–∏–π"""
    print("\n=== –¢–µ—Å—Ç bin_packing –Ω–∞ –∫–æ–ª–ª–∏–∑–∏–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    base_poly = Polygon([(0, 0), (50, 0), (50, 30), (0, 30)])
    
    polygons_data = [
        (base_poly, "rect1.dxf", "—Å–µ—Ä—ã–π", "order1"),
        (base_poly, "rect2.dxf", "—Å–µ—Ä—ã–π", "order1"),
        (base_poly, "rect3.dxf", "—Å–µ—Ä—ã–π", "order1")
    ]
    
    sheet_size = (200, 100)  # 20x10 —Å–º –ª–∏—Å—Ç
    
    print(f"–†–∞–∑–º–µ—â–∞–µ–º {len(polygons_data)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ {sheet_size[0]}x{sheet_size[1]} –º–º")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º bin_packing
    placed, unplaced = bin_packing(polygons_data, sheet_size, verbose=True)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)}")
    print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
    
    if len(placed) > 1:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
        print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏:")
        collision_count = 0
        for i, placed1 in enumerate(placed):
            for j, placed2 in enumerate(placed):
                if i < j:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
                    poly1 = placed1[0]
                    poly2 = placed2[0]
                    collision = check_collision(poly1, poly2)
                    if collision:
                        collision_count += 1
                        print(f"  ‚ùå –ö–û–õ–õ–ò–ó–ò–Ø –º–µ–∂–¥—É –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏ {i+1} –∏ {j+1}")
                        print(f"    –ü–æ–ª–∏–≥–æ–Ω {i+1}: bounds={poly1.bounds}")
                        print(f"    –ü–æ–ª–∏–≥–æ–Ω {j+1}: bounds={poly2.bounds}")
                    else:
                        print(f"  ‚úÖ –ü–æ–ª–∏–≥–æ–Ω—ã {i+1} –∏ {j+1}: –∫–æ–ª–ª–∏–∑–∏–π –Ω–µ—Ç")
        
        if collision_count == 0:
            print(f"  üéâ –í—Å–µ {len(placed)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω—ã –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π!")
        else:
            print(f"  üö® –ù–∞–π–¥–µ–Ω–æ {collision_count} –∫–æ–ª–ª–∏–∑–∏–π!")
            
        # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        placed_polygons = [p[0] for p in placed]
        visualize_polygons(placed_polygons, f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ {len(placed)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
        
        return collision_count == 0
    else:
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π")
        return True

if __name__ == "__main__":
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è rotate_polygon ===")
    
    test1 = test_collision_detection()
    test2 = test_rotation_collision() 
    test3 = test_bin_packing_collision()
    
    print("\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    if test1 and test3:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–ª–ª–∏–∑–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ –ù–ï —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π rotate_polygon")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–ª–ª–∏–∑–∏–π!")
        print("–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ rotate_polygon")