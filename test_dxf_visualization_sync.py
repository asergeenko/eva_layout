#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º DXF.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–µ—Ç–∞–ª–∏ –≤ DXF —Ñ–∞–π–ª–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
"""

import tempfile
import os
from shapely.geometry import Polygon
import ezdxf
import matplotlib.pyplot as plt
from layout_optimizer import (
    bin_packing, save_dxf_layout_complete, plot_layout,
    apply_placement_transform, parse_dxf_complete
)

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    polygons = []
    
    # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 1
    rect1 = Polygon([(0, 0), (30, 0), (30, 20), (0, 20)])
    polygons.append((rect1, "rect1.dxf", "–∫—Ä–∞—Å–Ω—ã–π", "test_order"))
    
    # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 2 (–±—É–¥–µ—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç)
    rect2 = Polygon([(0, 0), (25, 0), (25, 15), (0, 15)])
    polygons.append((rect2, "rect2.dxf", "—Å–∏–Ω–∏–π", "test_order"))
    
    # L-–æ–±—Ä–∞–∑–Ω–∞—è —Ñ–∏–≥—É—Ä–∞
    l_shape = Polygon([(0, 0), (20, 0), (20, 10), (10, 10), (10, 20), (0, 20)])
    polygons.append((l_shape, "l_shape.dxf", "–∑–µ–ª–µ–Ω—ã–π", "test_order"))
    
    return polygons

def create_original_dxf_data(polygons):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö DXF —Ñ–∞–π–ª–æ–≤."""
    original_dxf_data_map = {}
    
    for polygon, filename, color, order_id in polygons:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ DXF
        original_dxf_data_map[filename] = {
            'combined_polygon': polygon,
            'original_entities': [],  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö entities
            'polygons': [polygon],
            'bounds': polygon.bounds
        }
    
    return original_dxf_data_map

def test_placement_transformation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ apply_placement_transform."""
    print("=== –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ apply_placement_transform ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω
    original = Polygon([(10, 5), (40, 5), (40, 25), (10, 25)])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    x_offset = 50
    y_offset = 30
    rotation_angle = 90
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
    transformed = apply_placement_transform(original, x_offset, y_offset, rotation_angle)
    
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: bounds={original.bounds}")
    print(f"–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: bounds={transformed.bounds}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    assert transformed.bounds != original.bounds, "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å bounds"
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è apply_placement_transform —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_dxf_visualization_sync():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DXF –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("\n=== –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DXF –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    polygons = create_test_data()
    original_dxf_data_map = create_original_dxf_data(polygons)
    sheet_size = (150, 100)  # —Å–º
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ {sheet_size[0]}x{sheet_size[1]} —Å–º")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    placed, unplaced = bin_packing(polygons, sheet_size, verbose=False)
    
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)}, –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
    
    if not placed:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_dxf:
        dxf_path = tmp_dxf.name
    
    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_png:
        png_path = tmp_png.name
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DXF
        save_dxf_layout_complete(placed, sheet_size, dxf_path, original_dxf_data_map)
        print(f"‚úÖ DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {dxf_path}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        plot_buf = plot_layout(placed, sheet_size)
        with open(png_path, 'wb') as f:
            f.write(plot_buf.getvalue())
        print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {png_path}")
        
        # –ß–∏—Ç–∞–µ–º DXF –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –≤ DXF ---")
        doc = ezdxf.readfile(dxf_path)
        msp = doc.modelspace()
        
        dxf_entities = list(msp)
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(dxf_entities)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DXF")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        sync_errors = 0
        
        for i, placed_item in enumerate(placed):
            if len(placed_item) >= 5:
                transformed_polygon, x_offset, y_offset, rotation_angle, file_name = placed_item[:5]
            else:
                continue
                
            print(f"\n–ü–æ–ª–∏–≥–æ–Ω {i+1} ({file_name}):")
            viz_bounds = transformed_polygon.bounds
            print(f"  –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è bounds: {viz_bounds}")
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DXF
            matching_entities = []
            for entity in dxf_entities:
                if hasattr(entity.dxf, 'layer') and file_name.replace('.dxf', '') in entity.dxf.layer:
                    matching_entities.append(entity)
            
            if matching_entities:
                print(f"  –ù–∞–π–¥–µ–Ω–æ {len(matching_entities)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DXF")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º bounds –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                entity = matching_entities[0]
                if entity.dxftype() == 'LWPOLYLINE':
                    points = list(entity.get_points())
                    if points:
                        xs = [p[0] for p in points]
                        ys = [p[1] for p in points]
                        dxf_bounds = (min(xs), min(ys), max(xs), max(ys))
                        print(f"  DXF bounds: {dxf_bounds}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (—Å –¥–æ–ø—É—Å–∫–æ–º –Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å)
                        tolerance = 1.0  # 1–º–º
                        bounds_match = all(
                            abs(viz_bounds[j] - dxf_bounds[j]) < tolerance 
                            for j in range(4)
                        )
                        
                        if bounds_match:
                            print(f"  ‚úÖ –ü–æ–∑–∏—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç (–¥–æ–ø—É—Å–∫ {tolerance}–º–º)")
                        else:
                            print(f"  ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ø–æ–∑–∏—Ü–∏–π!")
                            print(f"     –†–∞–∑–Ω–æ—Å—Ç—å: {[viz_bounds[j] - dxf_bounds[j] for j in range(4)]}")
                            sync_errors += 1
            else:
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DXF")
                sync_errors += 1
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if sync_errors == 0:
            print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –í—Å–µ {len(placed)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ DXF")
            return True
        else:
            print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ù–∞–π–¥–µ–Ω–æ {sync_errors} –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return False\n            \n    finally:\n        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n        for temp_file in [dxf_path, png_path]:\n            if os.path.exists(temp_file):\n                try:\n                    os.unlink(temp_file)\n                except:\n                    pass\n\ndef run_comprehensive_test():\n    \"\"\"–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤.\"\"\"\n    print(\"üîÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DXF –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\")\n    print(\"=\" * 60)\n    \n    # –¢–µ—Å—Ç 1: –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏\n    test1_result = test_placement_transformation()\n    \n    # –¢–µ—Å—Ç 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è DXF –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\n    test2_result = test_dxf_visualization_sync()\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\")\n    print(f\"‚Ä¢ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}\")\n    print(f\"‚Ä¢ –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ DXF/–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}\")\n    \n    overall_success = test1_result and test2_result\n    if overall_success:\n        print(\"\\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\")\n    else:\n        print(\"\\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.\")\n    \n    return overall_success\n\nif __name__ == \"__main__\":\n    success = run_comprehensive_test()\n    exit(0 if success else 1)