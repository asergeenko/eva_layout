#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
"""

import sys
sys.path.insert(0, '.')

import os
from layout_optimizer import parse_dxf_complete

def analyze_single_file():
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–µ—Ç–∞–ª—å–Ω–æ"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–î–ù–û–ì–û –§–ê–ô–õ–ê")
    print("=" * 50)
    
    file_path = "dxf_samples/–õ–æ–¥–∫–∞ –ê–ì–£–õ 270/2.dxf"
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {file_path}")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
    result = parse_dxf_complete(file_path, verbose=False)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
    print(f"  –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result['original_entities'])}")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {len(result['polygons'])}")
    print(f"  –ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–π: {result['bottom_layer_name']}")
    
    if result['combined_polygon']:
        bounds = result['combined_polygon'].bounds
        print(f"  Combined polygon —Ä–∞–∑–º–µ—Ä: {bounds[2]-bounds[0]:.1f}√ó{bounds[3]-bounds[1]:.1f}–º–º")
        print(f"  Combined polygon bounds: {bounds}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–ª–æ—è–º
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –≠–õ–ï–ú–ï–ù–¢–û–í –ü–û –°–õ–û–Ø–ú:")
    elements_by_layer = {}
    
    for entity_data in result['original_entities']:
        layer = entity_data['layer']
        entity_type = entity_data['type']
        
        if layer not in elements_by_layer:
            elements_by_layer[layer] = {}
        
        if entity_type not in elements_by_layer[layer]:
            elements_by_layer[layer][entity_type] = 0
        
        elements_by_layer[layer][entity_type] += 1
    
    for layer, types in elements_by_layer.items():
        total = sum(types.values())
        print(f"  {layer}: {total} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        for entity_type, count in types.items():
            print(f"    {entity_type}: {count}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º bounds –≤—Å–µ—Ö SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    print(f"\nüìè BOUNDS –í–°–ï–• SPLINE –≠–õ–ï–ú–ï–ù–¢–û–í:")
    all_spline_points = []
    spline_by_layer = {}
    
    for entity_data in result['original_entities']:
        if entity_data['type'] == 'SPLINE':
            layer = entity_data['layer']
            entity = entity_data['entity']
            
            if layer not in spline_by_layer:
                spline_by_layer[layer] = []
            
            if hasattr(entity, 'control_points') and entity.control_points:
                layer_points = []
                for cp in entity.control_points:
                    if hasattr(cp, 'x') and hasattr(cp, 'y'):
                        x, y = cp.x, cp.y
                    elif len(cp) >= 2:
                        x, y = float(cp[0]), float(cp[1])
                    else:
                        continue
                    
                    all_spline_points.append((x, y))
                    layer_points.append((x, y))
                
                spline_by_layer[layer].extend(layer_points)
    
    if all_spline_points:
        min_x = min(p[0] for p in all_spline_points)
        max_x = max(p[0] for p in all_spline_points)
        min_y = min(p[1] for p in all_spline_points)
        max_y = max(p[1] for p in all_spline_points)
        
        print(f"  –í—Å–µ SPLINE: {max_x-min_x:.1f}√ó{max_y-min_y:.1f}–º–º")
        print(f"  Bounds: ({min_x:.1f}, {min_y:.1f}, {max_x:.1f}, {max_y:.1f})")
    
    # Bounds –ø–æ —Å–ª–æ—è–º
    for layer, points in spline_by_layer.items():
        if points:
            min_x = min(p[0] for p in points)
            max_x = max(p[0] for p in points)
            min_y = min(p[1] for p in points)
            max_y = max(p[1] for p in points)
            
            print(f"  {layer}: {max_x-min_x:.1f}√ó{max_y-min_y:.1f}–º–º")
            print(f"    Bounds: ({min_x:.1f}, {min_y:.1f}, {max_x:.1f}, {max_y:.1f})")

if __name__ == "__main__":
    analyze_single_file()