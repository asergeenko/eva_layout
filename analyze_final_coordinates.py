#!/usr/bin/env python3

"""
–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ DXF —Ñ–∞–π–ª–∞
"""

import ezdxf

def analyze_dxf_coordinates():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ DXF —Ñ–∞–π–ª–µ"""
    print("=== –ê–ù–ê–õ–ò–ó –ö–û–û–†–î–ò–ù–ê–¢ DXF –§–ê–ô–õ–ê ===")
    
    try:
        doc = ezdxf.readfile("200_140_1_black.dxf")
        msp = doc.modelspace()
        
        # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        entity_counts = {}
        coordinate_ranges = {
            'x_min': float('inf'), 'x_max': float('-inf'),
            'y_min': float('inf'), 'y_max': float('-inf')
        }
        
        in_bounds_count = 0
        out_of_bounds_count = 0
        sheet_bounds = (0, 0, 1400, 2000)  # –ª–∏—Å—Ç 140x200 —Å–º
        
        for entity in msp:
            entity_type = entity.dxftype()
            entity_counts[entity_type] = entity_counts.get(entity_type, 0) + 1
            
            coords = []
            
            if entity_type == 'SPLINE':
                if hasattr(entity, 'control_points') and entity.control_points:
                    for cp in entity.control_points:
                        if hasattr(cp, 'x') and hasattr(cp, 'y'):
                            coords.append((cp.x, cp.y))
                        elif len(cp) >= 2:
                            coords.append((float(cp[0]), float(cp[1])))
                            
            elif entity_type == 'IMAGE':
                if hasattr(entity.dxf, 'insert'):
                    pos = entity.dxf.insert
                    coords.append((pos[0], pos[1]))
                    
            elif entity_type == 'LWPOLYLINE':
                for point in entity.get_points():
                    coords.append((point[0], point[1]))
                    
            elif entity_type == 'LINE':
                coords.append((entity.dxf.start.x, entity.dxf.start.y))
                coords.append((entity.dxf.end.x, entity.dxf.end.y))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            for x, y in coords:
                coordinate_ranges['x_min'] = min(coordinate_ranges['x_min'], x)
                coordinate_ranges['x_max'] = max(coordinate_ranges['x_max'], x)
                coordinate_ranges['y_min'] = min(coordinate_ranges['y_min'], y)
                coordinate_ranges['y_max'] = max(coordinate_ranges['y_max'], y)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏ –ª–∏—Å—Ç–∞
                if (sheet_bounds[0] <= x <= sheet_bounds[2] and 
                    sheet_bounds[1] <= y <= sheet_bounds[3]):
                    in_bounds_count += 1
                else:
                    out_of_bounds_count += 1
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π:")
        for entity_type, count in sorted(entity_counts.items()):
            print(f"  {entity_type}: {count}")
        
        print("\nüìè –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
        print(f"  X: [{coordinate_ranges['x_min']:.1f}, {coordinate_ranges['x_max']:.1f}]")
        print(f"  Y: [{coordinate_ranges['y_min']:.1f}, {coordinate_ranges['y_max']:.1f}]")
        
        print(f"\nüìê –†–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–∞: {sheet_bounds[2]}x{sheet_bounds[3]} –º–º")
        
        print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
        print(f"  –¢–æ—á–µ–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞: {in_bounds_count}")
        print(f"  –¢–æ—á–µ–∫ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ª–∏—Å—Ç–∞: {out_of_bounds_count}")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if out_of_bounds_count == 0:
            print("üéâ –û–¢–õ–ò–ß–ù–û: –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞!")
        elif out_of_bounds_count < in_bounds_count * 0.1:
            print("‚úÖ –•–û–†–û–®–û: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò: –ú–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ª–∏—Å—Ç–∞")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IMAGE –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        print(f"\nüñºÔ∏è –ê–Ω–∞–ª–∏–∑ IMAGE —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        image_in_bounds = 0
        image_total = 0
        
        for entity in msp:
            if entity.dxftype() == 'IMAGE':
                image_total += 1
                if hasattr(entity.dxf, 'insert'):
                    pos = entity.dxf.insert
                    if (sheet_bounds[0] <= pos[0] <= sheet_bounds[2] and 
                        sheet_bounds[1] <= pos[1] <= sheet_bounds[3]):
                        image_in_bounds += 1
                        status = "‚úÖ"
                    else:
                        status = "‚ùå"
                    print(f"  IMAGE {image_total}: {status} ({pos[0]:.1f}, {pos[1]:.1f})")
        
        if image_total > 0:
            print(f"\n  IMAGE –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Å—Ç–∞: {image_in_bounds}/{image_total}")
            if image_in_bounds == image_total:
                print("üéâ –í—Å–µ IMAGE —ç–ª–µ–º–µ–Ω—Ç—ã (—Ç–µ–∫—Å—Ç/—è—Ä–ª—ã–∫–∏) –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    analyze_dxf_coordinates()