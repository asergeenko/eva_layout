#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–æ–≤—Ä–æ–≤.
–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–æ–≤—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.
"""

from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete, rotate_polygon
from shapely.geometry import Polygon
import tempfile
import os

def test_rotation_consistency():
    """–¢–µ—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –º–µ–∂–¥—É bin_packing –∏ save_dxf_layout_complete"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–≤–µ—Ä)
    original_polygon = Polygon([(0, 0), (100, 0), (100, 50), (0, 50)])
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–≤–µ—Ä: bounds={original_polygon.bounds}")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç bin_packing - –∫–æ–≤–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 90¬∞
    angle = 90
    x_offset = 200  # —Å–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    y_offset = 100
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç bin_packing)
    rotated_polygon = rotate_polygon(original_polygon, angle)
    print(f"–ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞: bounds={rotated_polygon.bounds}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç bin_packing)
    from layout_optimizer import translate_polygon
    final_polygon = translate_polygon(rotated_polygon, x_offset, y_offset)
    print(f"–ü–æ—Å–ª–µ —Å–º–µ—â–µ–Ω–∏—è: bounds={final_polygon.bounds}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è DXF
    placed_elements = [(final_polygon, x_offset, y_offset, angle, "test_carpet.dxf", "—Å–µ—Ä—ã–π")]
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö DXF –¥–∞–Ω–Ω—ã—Ö
    original_dxf_data = {
        'combined_polygon': original_polygon,
        'original_entities': []  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    }
    
    original_dxf_data_map = {"test_carpet.dxf": original_dxf_data}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DXF
    with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        save_dxf_layout_complete(
            placed_elements, 
            (300, 200), 
            output_path, 
            original_dxf_data_map
        )
        print(f"‚úÖ DXF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        from layout_optimizer import parse_dxf_complete
        result = parse_dxf_complete(output_path, verbose=False)
        
        if result['polygons'] and len(result['polygons']) >= 2:
            # –ü–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω - –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞, –≤—Ç–æ—Ä–æ–π - –Ω–∞—à –∫–æ–≤–µ—Ä
            carpet_polygon = result['polygons'][1]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ª–∏—Å—Ç–∞
            result_bounds = carpet_polygon.bounds
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è DXF (–∫–æ–≤–µ—Ä): bounds={result_bounds}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
            expected_bounds = final_polygon.bounds
            tolerance = 2.0  # 2–º–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —É—á–µ—Ç–∞ DXF –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            
            bounds_match = (
                abs(result_bounds[0] - expected_bounds[0]) < tolerance and
                abs(result_bounds[1] - expected_bounds[1]) < tolerance and
                abs(result_bounds[2] - expected_bounds[2]) < tolerance and
                abs(result_bounds[3] - expected_bounds[3]) < tolerance
            )
            
            if bounds_match:
                print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–≤—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                return True
            else:
                print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ü–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                print(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_bounds}")
                print(f"  –ü–æ–ª—É—á–µ–Ω–æ: {result_bounds}")
                print(f"  –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏: dx={abs(result_bounds[0] - expected_bounds[0]):.2f}, dy={abs(result_bounds[1] - expected_bounds[1]):.2f}")
                return False
        else:
            print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ DXF")
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(result['polygons']) if result['polygons'] else 0}")
            return False
            
    finally:
        if os.path.exists(output_path):
            os.unlink(output_path)

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–≤—Ä–æ–≤ ===")
    success = test_rotation_consistency()
    print("=== –†–µ–∑—É–ª—å—Ç–∞—Ç ===")
    if success:
        print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–æ–≤—Ä–æ–≤ –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
    else:
        print("üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–æ–≤—Ä–æ–≤ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê!")