#!/usr/bin/env python3

import sys
import os
sys.path.append('/home/sasha/proj/2025/eva_layout')

from layout_optimizer import parse_dxf_complete, bin_packing
import ezdxf
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
import math

def analyze_coordinate_mismatch(dxf_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ–∂–¥—É:
    1. –ü–æ–ª–∏–≥–æ–Ω–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (visualization)
    2. SPLINE —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º DXF —Ñ–∞–π–ª–µ
    """
    
    print(f"üîç –ê–ù–ê–õ–ò–ó –ö–û–û–†–î–ò–ù–ê–¢–ù–û–ì–û –†–ê–°–°–û–ì–õ–ê–°–û–í–ê–ù–ò–Ø")
    print(f"üìÅ DXF —Ñ–∞–π–ª: {dxf_path}")
    
    if not os.path.exists(dxf_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {dxf_path}")
        return False
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º DXF —Ñ–∞–π–ª
        doc = ezdxf.readfile(dxf_path)
        msp = doc.modelspace()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–ª–æ—è–º
        elements_by_layer = {}
        
        for entity in msp:
            layer = entity.dxf.layer if hasattr(entity.dxf, 'layer') else 'DEFAULT'
            
            if layer not in elements_by_layer:
                elements_by_layer[layer] = []
            
            if entity.dxftype() == 'SPLINE':
                elements_by_layer[layer].append({
                    'type': 'SPLINE',
                    'entity': entity,
                    'color': entity.dxf.color if hasattr(entity.dxf, 'color') else 7
                })
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–∏:")
        for layer, elements in elements_by_layer.items():
            print(f"   üé® {layer}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω–µ—à–Ω–∏–µ (–∫—Ä–∞—Å–Ω—ã–µ) —Å–ª–æ–∏ - –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
        red_layers = []
        for layer, elements in elements_by_layer.items():
            for elem in elements:
                if elem['color'] == 1:  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
                    red_layers.append(layer)
                    break
        
        print(f"\nüî¥ –ö—Ä–∞—Å–Ω—ã–µ —Å–ª–æ–∏ (–≤–Ω–µ—à–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã): {red_layers}")
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∞—Å–Ω–æ–≥–æ —Å–ª–æ—è —Å—Ç—Ä–æ–∏–º –ø–æ–ª–∏–≥–æ–Ω –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å boundary
        for layer in red_layers:
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–ª–æ—è '{layer}':")
            
            splines = [elem for elem in elements_by_layer[layer] if elem['type'] == 'SPLINE']
            print(f"   üìê SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(splines)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∏–∑ SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            all_points = []
            spline_bounds = {'min_x': float('inf'), 'max_x': float('-inf'), 
                           'min_y': float('inf'), 'max_y': float('-inf')}
            
            for spline_data in splines:
                spline = spline_data['entity']
                if hasattr(spline, 'control_points') and spline.control_points:
                    for cp in spline.control_points:
                        if hasattr(cp, 'x') and hasattr(cp, 'y'):
                            x, y = cp.x, cp.y
                        elif len(cp) >= 2:
                            x, y = float(cp[0]), float(cp[1])
                        else:
                            continue
                            
                        all_points.append((x, y))
                        spline_bounds['min_x'] = min(spline_bounds['min_x'], x)
                        spline_bounds['max_x'] = max(spline_bounds['max_x'], x)
                        spline_bounds['min_y'] = min(spline_bounds['min_y'], y)
                        spline_bounds['max_y'] = max(spline_bounds['max_y'], y)
            
            if all_points:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∏ —Ä–∞–∑–º–µ—Ä—ã –ø–æ SPLINE —Ç–æ—á–∫–∞–º
                spline_center_x = (spline_bounds['min_x'] + spline_bounds['max_x']) / 2
                spline_center_y = (spline_bounds['min_y'] + spline_bounds['max_y']) / 2
                spline_width = spline_bounds['max_x'] - spline_bounds['min_x']
                spline_height = spline_bounds['max_y'] - spline_bounds['min_y']
                
                print(f"   üìä SPLINE —Ü–µ–Ω—Ç—Ä: ({spline_center_x:.1f}, {spline_center_y:.1f})")
                print(f"   üìè SPLINE —Ä–∞–∑–º–µ—Ä: {spline_width:.1f} x {spline_height:.1f} –º–º")
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ visualization
                print(f"   üéØ –≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ visualization –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DXF: {e}")
        return False
    
    return True

def recreate_visualization_with_actual_coordinates():
    """
    –°–æ–∑–¥–∞–µ–º visualization —Å —Ç–µ–º–∏ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ DXF
    """
    
    print(f"\nüé® –°–û–ó–î–ê–ù–ò–ï –¢–û–ß–ù–û–ô –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º bin_packing
    test_files = [
        'dxf_samples/SUBARU FORESTER 3 –¥–æ—Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥/1.dxf',
        'dxf_samples/TOYOTA FORTUNER/2.dxf', 
        'dxf_samples/SUZUKI XBEE/1.dxf',
        'dxf_samples/2.dxf',
        'dxf_samples/TOYOTA FORTUNER/1.dxf'
    ]
    
    polygons_for_packing = []
    original_dxf_data_map = {}
    
    for file_path in test_files:
        if os.path.exists(file_path):
            result = parse_dxf_complete(file_path, verbose=False)
            polygon = result.get('combined_polygon')
            
            if polygon:
                polygons_for_packing.append((polygon, file_path, "black", 1))
                original_dxf_data_map[file_path] = result
    
    if len(polygons_for_packing) >= 2:
        placed_elements, unplaced_elements = bin_packing(polygons_for_packing, (200, 140))
        
        print(f"   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(placed_elements)}")
        
        # –°–æ–∑–¥–∞–µ–º visualization —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ SPLINE –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        fig, ax = plt.subplots(figsize=(16, 12))
        
        for i, element in enumerate(placed_elements):
            transformed_polygon, x_offset, y_offset, rotation_angle, file_name, color, order_id = element
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            original_data_key = None
            file_basename = os.path.basename(file_name) if isinstance(file_name, str) else str(file_name)
            
            for key in original_dxf_data_map.keys():
                if os.path.basename(key) == file_basename:
                    original_data_key = key
                    break
            
            if not original_data_key:
                continue
                
            original_data = original_dxf_data_map[original_data_key]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –∏ –¥–ª—è SPLINE —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            original_polygon = original_data['combined_polygon']
            orig_bounds = original_polygon.bounds
            final_bounds = transformed_polygon.bounds
            
            # –¶–µ–Ω—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            orig_center_x = (orig_bounds[0] + orig_bounds[2]) / 2
            orig_center_y = (orig_bounds[1] + orig_bounds[3]) / 2
            final_center_x = (final_bounds[0] + final_bounds[2]) / 2
            final_center_y = (final_bounds[1] + final_bounds[3]) / 2
            
            print(f"   üîÑ –≠–ª–µ–º–µ–Ω—Ç {i+1}: {file_basename}")
            print(f"      üìç –ò—Å—Ö–æ–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞: ({orig_center_x:.1f}, {orig_center_y:.1f})")
            print(f"      üìç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞: ({final_center_x:.1f}, {final_center_y:.1f})")
            
            # –°—Ç—Ä–æ–∏–º –ø–æ–ª–∏–≥–æ–Ω –ò–ó –¢–†–ê–ù–°–§–û–†–ú–ò–†–û–í–ê–ù–ù–´–• SPLINE –ö–û–û–†–î–ò–ù–ê–¢
            spline_polygon_points = []
            
            for entity_data in original_data['original_entities']:
                if entity_data['type'] == 'SPLINE' and entity_data.get('color') == 1:  # –¢–æ–ª—å–∫–æ –∫—Ä–∞—Å–Ω—ã–µ SPLINE
                    entity = entity_data['entity']
                    if hasattr(entity, 'control_points') and entity.control_points:
                        for cp in entity.control_points:
                            if hasattr(cp, 'x') and hasattr(cp, 'y'):
                                x, y = cp.x, cp.y
                            elif len(cp) >= 2:
                                x, y = float(cp[0]), float(cp[1])
                            else:
                                continue
                            
                            # –¢–û–ß–ù–û –¢–ê –ñ–ï –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø, —á—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ SPLINE –≤ DXF
                            # 1. –ü–µ—Ä–µ–Ω–æ—Å –≤ –Ω–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                            tx = x - orig_center_x
                            ty = y - orig_center_y
                            
                            # 2. –ü–æ–≤–æ—Ä–æ—Ç
                            if rotation_angle != 0:
                                angle_rad = math.radians(rotation_angle)
                                cos_angle = math.cos(angle_rad)
                                sin_angle = math.sin(angle_rad)
                                
                                rotated_x = tx * cos_angle - ty * sin_angle
                                rotated_y = tx * sin_angle + ty * cos_angle
                            else:
                                rotated_x = tx
                                rotated_y = ty
                            
                            # 3. –ü–µ—Ä–µ–Ω–æ—Å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                            final_x = rotated_x + final_center_x
                            final_y = rotated_y + final_center_y
                            
                            spline_polygon_points.append((final_x, final_y))
            
            if spline_polygon_points and len(spline_polygon_points) >= 3:
                try:
                    spline_polygon = Polygon(spline_polygon_points)
                    if spline_polygon.is_valid:
                        # –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ SPLINE –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                        x_coords, y_coords = spline_polygon.exterior.xy
                        ax.plot(x_coords, y_coords, 'r-', linewidth=2, alpha=0.8)
                        ax.fill(x_coords, y_coords, color='red', alpha=0.3)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                        centroid = spline_polygon.centroid
                        ax.text(centroid.x, centroid.y, f"SPLINE {i+1}", 
                               ha='center', va='center', fontsize=8, fontweight='bold')
                        
                        print(f"      ‚úÖ SPLINE –ø–æ–ª–∏–≥–æ–Ω —Å–æ–∑–¥–∞–Ω –∏–∑ {len(spline_polygon_points)} —Ç–æ—á–µ–∫")
                    else:
                        print(f"      ‚ùå SPLINE –ø–æ–ª–∏–≥–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SPLINE –ø–æ–ª–∏–≥–æ–Ω–∞: {e}")
            else:
                print(f"      ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SPLINE —Ç–æ—á–µ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞")
            
            # –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω (–ø—É–Ω–∫—Ç–∏—Ä–æ–º)
            orig_x, orig_y = transformed_polygon.exterior.xy
            ax.plot(orig_x, orig_y, '--', color='blue', linewidth=1, alpha=0.5)
        
        ax.set_xlim(0, 1400)
        ax.set_ylim(0, 2000)
        ax.set_xlabel('–®–∏—Ä–∏–Ω–∞ (–º–º)')
        ax.set_ylabel('–í—ã—Å–æ—Ç–∞ (–º–º)')
        ax.set_title('–¢–û–ß–ù–ê–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø: –ö—Ä–∞—Å–Ω—ã–µ = SPLINE –≥—Ä–∞–Ω–∏—Ü—ã, –°–∏–Ω–∏–π –ø—É–Ω–∫—Ç–∏—Ä = polygon –≥—Ä–∞–Ω–∏—Ü—ã')
        ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('accurate_visualization.png', dpi=150, bbox_inches='tight')
        print(f"\nüíæ –¢–æ—á–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: accurate_visualization.png")
        
        return True
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –ú–ï–ñ–î–£ VISUALIZATION –ò DXF")
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∏—Ç–æ–≥–æ–≤–æ–º DXF
    dxf_success = analyze_coordinate_mismatch('200_140_9_black.dxf')
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    viz_success = recreate_visualization_with_actual_coordinates()
    
    if dxf_success and viz_success:
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ accurate_visualization.png - –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å autodesk.png")
        print(f"üîß –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ")

if __name__ == "__main__":
    main()