from pathlib import Path

from dxf_utils import parse_dxf_complete
from layout_optimizer import Carpet, bin_packing_with_inventory


def test_trimaran():
    """
    –¢–µ—Å—Ç –¥–ª—è –¢—Ä–∏–º–∞—Ä–∞–Ω 360: —Ñ–∞–π–ª—ã —Å –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã–º–∏ SPLINE –∫–æ–Ω—Ç—É—Ä–∞–º–∏.
    –ü—Ä–æ–±–ª–µ–º–∞: —Ñ–∞–π–ª—ã 1.dxf –∏ 2.dxf —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ SPLINE, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–∑—É—é—Ç
    –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã–µ –∫–æ–Ω—Ç—É—Ä—ã (—Ç–µ–∫—Å—Ç + –∫–æ–Ω—Ç—É—Ä, –Ω–æ –∫–æ–Ω—Ç—É—Ä —Ä–∞–∑–æ–º–∫–Ω—É—Ç).
    –†–µ—à–µ–Ω–∏–µ: –ø–∞—Ä—Å–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –¢—Ä–∏–º–∞—Ä–∞–Ω
    polygons = []
    warnings = []
    base_path = Path('data/–õ–æ–¥–∫–∞ –ó–≤–µ–∑–¥–∞ –¢—Ä–∏–º–∞—Ä–∞–Ω 360')

    for dxf_file in sorted(base_path.glob('*.dxf')):
        data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)

        if data and data.get('combined_polygon'):
            poly = data['combined_polygon']
            bounds = poly.bounds
            width = bounds[2] - bounds[0]
            height = bounds[3] - bounds[1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ polygon –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∫ (0,0)
            assert bounds[0] < 1, f"{dxf_file.name}: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ~0, –Ω–æ {bounds[0]}"
            assert bounds[1] < 1, f"{dxf_file.name}: Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ~0, –Ω–æ {bounds[1]}"

            print(f"{dxf_file.name}: ‚úÖ size={width:.0f}x{height:.0f} mm, area={poly.area:.0f} mm¬≤")
            polygons.append(Carpet(poly, dxf_file.name, "—á—ë—Ä–Ω—ã–π", f"trimaran_{dxf_file.stem}", 1))
        else:
            # –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            warning = data.get('parse_warning', 'Unknown error')
            warnings.append(f"{dxf_file.name}: {warning}")
            print(f"{dxf_file.name}: ‚ö†Ô∏è  {warning}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
    print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(list(base_path.glob('*.dxf')))}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {len(polygons)}")
    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")

    for warning in warnings:
        print(f"   - {warning}")

    # –î–ª—è —Ñ–∞–π–ª–æ–≤ Trimaran –æ–∂–∏–¥–∞–µ–º —á—Ç–æ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã–µ –∫–æ–Ω—Ç—É—Ä—ã)
    assert len(warnings) == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ç—É—Ä–∞—Ö, –ø–æ–ª—É—á–µ–Ω–æ {len(warnings)}"
    assert len(polygons) == 0, f"–§–∞–π–ª—ã —Å –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤"

    print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –§–∞–π–ª—ã —Å –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

    return {
        'files_total': len(list(base_path.glob('*.dxf'))),
        'files_parsed': len(polygons),
        'warnings': len(warnings),
    }
