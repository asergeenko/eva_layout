from pathlib import Path
import time

from dxf_utils import parse_dxf_complete
from layout_optimizer import Carpet, bin_packing_with_inventory


def test_tetris_best_strategy():
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = [{
        "name": f"–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
        "width": 144,
        "height": 200,
        "color": "—á—ë—Ä–Ω—ã–π",
        "count": 1,
        "used": 0
    }]

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1
    #########################################
    priority1_polygons = []
    paths = [Path(f'dxf_samples/SKODA KODIAQ/{i}.dxf') for i in (1,1,1,4)]
    for i, dxf_file in enumerate(paths):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º verbose=False —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Streamlit –≤—ã–∑–æ–≤–æ–≤
            polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
            if polygon_data and polygon_data.get("combined_polygon"):
                base_polygon = polygon_data["combined_polygon"]
                priority1_polygons.append(Carpet(base_polygon, dxf_file.name, "—á—ë—Ä–Ω—ã–π", f"group_{i}", 1))

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
            return []
    #########################################
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(priority1_polygons)}")

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    if not priority1_polygons:
        print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    placed_layouts, unplaced = bin_packing_with_inventory(
        priority1_polygons,
        available_sheets,
        verbose=True,
    )

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø ===")

    actual_placed_count = len(priority1_polygons) - len(unplaced)

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –∫–æ–≤—Ä–∏–∫–æ–≤
    total_carpet_area_mm2 = sum(carpet.polygon.area for carpet in priority1_polygons)
    # FIXED: Convert unplaced to set of carpet_ids for proper comparison
    unplaced_ids = set(u.carpet_id for u in unplaced)
    placed_carpet_area_mm2 = sum(
        carpet.polygon.area for carpet in priority1_polygons
        if carpet.carpet_id not in unplaced_ids
    )

    # –ü–ª–æ—â–∞–¥—å –ª–∏—Å—Ç–æ–≤
    sheet_area_mm2 = (available_sheets[0]['width'] * 10) * (available_sheets[0]['height'] * 10)
    used_sheets_area_mm2 = len(placed_layouts) * sheet_area_mm2
    theoretical_min_sheets = total_carpet_area_mm2 / sheet_area_mm2

    # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    material_utilization = (placed_carpet_area_mm2 / used_sheets_area_mm2) * 100 if used_sheets_area_mm2 > 0 else 0

    print(
        f"üìä –†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {actual_placed_count}/{len(priority1_polygons)} ({actual_placed_count / len(priority1_polygons) * 100:.1f}%)")
    print(f"üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–≤—Ä–∏–∫–æ–≤: {total_carpet_area_mm2 / 100:.0f} —Å–º¬≤")
    print(f"üìê –ü–ª–æ—â–∞–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {used_sheets_area_mm2 / 100:.0f} —Å–º¬≤")
    print(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_utilization:.1f}%")
    print(f"üìä –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º: {theoretical_min_sheets:.2f} –ª–∏—Å—Ç–∞")
    print(f"‚ùå –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")

    if placed_layouts:
        print(f"\nüìÑ –î–ï–¢–ê–õ–ò –ü–û –õ–ò–°–¢–ê–ú:")
        total_sheet_usage = 0
        for i, layout in enumerate(placed_layouts, 1):
            carpet_count = len(layout.placed_polygons)
            usage = layout.usage_percent
            total_sheet_usage += usage
            print(f"   –õ–∏—Å—Ç {i}: {carpet_count} –∫–æ–≤—Ä–∏–∫–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")

        avg_sheet_usage = total_sheet_usage / len(placed_layouts)
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤: {avg_sheet_usage:.1f}%")

    assert len(unplaced) == 0, f"–í—Å–µ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω—ã, –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {len(unplaced)}"

    return {
        'sheets_used': len(placed_layouts),
        'carpets_placed': actual_placed_count,
        'carpets_total': len(priority1_polygons),
        'material_utilization': material_utilization,
    }