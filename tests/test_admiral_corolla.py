from pathlib import Path

from dxf_utils import parse_dxf_complete
from layout_optimizer import Carpet, bin_packing_with_inventory


def test_admiral_corolla():
    """
    –¢–µ—Å—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ Admiral + Corolla: —Ä–∞–∑–Ω—ã–µ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ.
    –ü—Ä–æ–±–ª–µ–º–∞: Corolla –º–æ–∂–µ—Ç –∑–∞–ø–∏—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–ø—Ä–∞–≤–∞, –Ω–µ –ø—Ä–∏–∂–∏–º–∞—è—Å—å –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é.
    –¶–µ–ª—å: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Å –º–∏–Ω–∏–º—É–º–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
    """
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã - —Å–µ—Ä—ã–µ
    available_sheets = [{
        "name": "–°–µ—Ä—ã–π –ª–∏—Å—Ç",
        "width": 140,
        "height": 200,
        "color": "—Å–µ—Ä—ã–π",
        "count": 1,
        "used": 0
    }]

    priority1_polygons = []

    # 1 Admiral
    dxf_file = Path('data/–õ–æ–¥–∫–∞ ADMIRAL 340/1.dxf')
    try:
        polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
        if polygon_data and polygon_data.get("combined_polygon"):
            priority1_polygons.append(
                Carpet(polygon_data["combined_polygon"], dxf_file.name, "—Å–µ—Ä—ã–π", "admiral_1", 1)
            )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
        return []

    # 2 Corolla (—Ä–∞–∑–Ω—ã–µ order_id)
    dxf_file = Path('data/TOYOTA COROLLA 9/2.dxf')
    try:
        polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
        if polygon_data and polygon_data.get("combined_polygon"):
            base_polygon = polygon_data["combined_polygon"]
            for i in range(1, 3):
                priority1_polygons.append(
                    Carpet(base_polygon, f"{dxf_file.name}_–∫–æ–ø–∏—è_{i}", "—Å–µ—Ä—ã–π", f"corolla_{i}", 1)
                )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
        return []

    placed_layouts, unplaced = bin_packing_with_inventory(
        priority1_polygons,
        available_sheets,
        verbose=True,
    )

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(priority1_polygons) - len(unplaced)}/{len(priority1_polygons)}")
    print(f"üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")

    if placed_layouts:
        print(f"\nüìÑ –î–ï–¢–ê–õ–ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
        for i, poly in enumerate(placed_layouts[0].placed_polygons, 1):
            bounds = poly.polygon.bounds
            left_edge = bounds[0]
            print(f"   {i}. {poly.order_id}: X=[{bounds[0]:.1f}, {bounds[2]:.1f}], angle={poly.angle}¬∞, left_edge={left_edge:.1f}mm")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–≤–µ—Ä –ø—Ä–∏–∂–∞—Ç –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é (X < 10mm)
        left_edges = [p.polygon.bounds[0] for p in placed_layouts[0].placed_polygons]
        min_left_edge = min(left_edges)
        print(f"\n   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π left_edge: {min_left_edge:.1f}mm")

        if min_left_edge > 10:
            print(f"   ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–∏ –æ–¥–∏–Ω –∫–æ–≤–µ—Ä –Ω–µ –ø—Ä–∏–∂–∞—Ç –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é!")

        usage = placed_layouts[0].usage_percent
        print(f"   –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞: {usage:.1f}%")

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert len(unplaced) == 0, f"–í—Å–µ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω—ã, –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {len(unplaced)}"
    assert len(placed_layouts) == 1, f"–ù—É–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ 1 –ª–∏—Å—Ç–µ: {len(placed_layouts)}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–æ–≤–µ—Ä –ø—Ä–∏–∂–∞—Ç—ã–π –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    if placed_layouts:
        left_edges = [p.polygon.bounds[0] for p in placed_layouts[0].placed_polygons]
        min_left_edge = min(left_edges)
        assert min_left_edge < 10, f"–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–∂–∞—Ç –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é (X<10mm), –Ω–æ min_left={min_left_edge:.1f}mm"

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º
        usage = placed_layouts[0].usage_percent
        assert usage >= 45, f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 45%, –Ω–æ {usage:.1f}%"

    print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ø–ª–æ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∂–∞—Ç–æ—Å—Ç—å—é –∫ –∫—Ä–∞—è–º")

    return {
        'sheets_used': len(placed_layouts),
        'carpets_placed': len(priority1_polygons) - len(unplaced),
        'carpets_total': len(priority1_polygons),
    }
