#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –≤ Streamlit:
- 20 —á–µ—Ä–Ω—ã—Ö –∏ 20 —Å–µ—Ä—ã—Ö –ª–∏—Å—Ç–æ–≤ 140*200
- –í—Å–µ 37 –∑–∞–∫–∞–∑–æ–≤ –∏–∑ sample_input_test.xlsx
- 20 —Å–µ—Ä—ã—Ö –∏ 20 —á–µ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 –∏–∑ "data/–î–ï–ö–ê KUGOO M4 PRO JILONG/1.dxf"
"""

import sys
import os
from pathlib import Path

import pandas as pd
import logging

import pytest

from dxf_utils import parse_dxf_complete
from excel_loader import load_excel_file, parse_orders_from_excel, find_dxf_files_for_article

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import (
    bin_packing_with_inventory,
    Carpet,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def create_available_sheets():
    """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Streamlit: 30 —á–µ—Ä–Ω—ã—Ö + 30 —Å–µ—Ä—ã—Ö 140*200"""
    sheets = []
    
    # 30 —á–µ—Ä–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
    sheets.append({
            "name": f"–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
            "width": 140,
            "height": 200,
            "color": "—á—ë—Ä–Ω—ã–π", 
            "count": 20,
            "used": 0
        })
    
    # 30 —Å–µ—Ä—ã—Ö –ª–∏—Å—Ç–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
    sheets.append({
            "name": f"–°–µ—Ä—ã–π –ª–∏—Å—Ç",
            "width": 140,
            "height": 200,
            "color": "—Å–µ—Ä—ã–π", 
            "count": 20,
            "used": 0
        })
    
    return sheets

def process_orders(orders) -> tuple[list[Carpet], dict]:
    polygons = []
    dxf_data_map = {}

    for order in orders:
        order_id = order["order_id"]  # +2 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        article = order["article"]
        product_name = order["product"]

        color = order["color"]

        # –ò—â–µ–º DXF —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        dxf_files = find_dxf_files_for_article(article, product_name)

        if dxf_files:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ DXF —Ñ–∞–π–ª—ã
            for dxf_file in dxf_files:
                try:
                    polygon_data = parse_dxf_complete(dxf_file, verbose=False)
                    if polygon_data and polygon_data.get("combined_polygon"):
                        polygon = polygon_data["combined_polygon"]
                        filename = os.path.basename(dxf_file)
                        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                        unique_filename = f"{product_name}_{os.path.splitext(filename)[0]}.dxf"
                        polygons.append(Carpet(polygon, unique_filename, color, order_id))
                        dxf_data_map[unique_filename] = polygon_data
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {dxf_file}: {e}")
                    continue

    return polygons, dxf_data_map

def create_priority2_polygons() -> tuple[list[Carpet], dict]:
    """–°–æ–∑–¥–∞–µ—Ç 20 —Å–µ—Ä—ã—Ö + 20 —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 –∏–∑ –î–ï–ö–ê KUGOO M4 PRO JILONG"""
    priority2_polygons = []
    dxf_data_map = {}
    dxf_file = "data/–î–ï–ö–ê KUGOO M4 PRO JILONG/1.dxf"
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º verbose=False —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Streamlit –≤—ã–∑–æ–≤–æ–≤
        polygon_data = parse_dxf_complete(dxf_file, verbose=False)
        if polygon_data and polygon_data.get("combined_polygon"):
            base_polygon = polygon_data["combined_polygon"]

            # 20 —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
            for i in range(9):
                filename = f"–î–ï–ö–ê_KUGOO_M4_PRO_JILONG_—á–µ—Ä–Ω—ã–π_{i+1}.dxf"
                priority2_polygons.append(Carpet(base_polygon, filename, "—á—ë—Ä–Ω—ã–π", "group_1",2))
                dxf_data_map[filename] = polygon_data

            # 20 —Å–µ—Ä—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
            for i in range(20):
                filename = f"–î–ï–ö–ê_KUGOO_M4_PRO_JILONG_—Å–µ—Ä—ã–π_{i+1}.dxf"
                priority2_polygons.append(Carpet(base_polygon, filename, "—Å–µ—Ä—ã–π", "group_2",2))
                dxf_data_map[filename] = polygon_data
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
        return [], {}

    return priority2_polygons, dxf_data_map


def test_streamlit_integration():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –≤ Streamlit"""
    print("=== –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò STREAMLIT ===")
    

    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = create_available_sheets()
    print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ {len(available_sheets)} –ª–∏—Å—Ç–æ–≤ (30 —á–µ—Ä–Ω—ã—Ö + 30 —Å–µ—Ä—ã—Ö)")

    #########################
    excel_data = load_excel_file(open("tests/sample_input_test.xlsx","rb").read())
    orders = parse_orders_from_excel(excel_data)
    polygons, dxf_data_map = process_orders(orders)
    #########################
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Excel
    print(f"üîß –°–æ–∑–¥–∞–Ω–æ {len(orders)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–æ–≤ Excel")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
    priority2_polygons, priority2_dxf_data = create_priority2_polygons()
    print(f"‚ûï –°–æ–∑–¥–∞–Ω–æ {len(priority2_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 (20 —á–µ—Ä–Ω—ã—Ö + 20 —Å–µ—Ä—ã—Ö)")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º DXF –¥–∞–Ω–Ω—ã–µ
    dxf_data_map.update(priority2_dxf_data)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    all_polygons = polygons + priority2_polygons
    total_polygons = len(all_polygons)
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_polygons}")
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    if not all_polygons:
        print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\n=== –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò (–ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ù–ê –î–ò–ê–ü–ê–ó–û–ù –õ–ò–°–¢–û–í) ===")
    
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons,
        available_sheets,
        verbose=True,
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    actual_placed_count = total_polygons - len(unplaced)
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {actual_placed_count}/{total_polygons}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")
    
    if unplaced:
        print("\n‚ùå –ù–ï–†–ê–ó–ú–ï–©–ï–ù–ù–´–ï –ü–û–õ–ò–ì–û–ù–´:")
        for poly in unplaced:
            # –û–±—ä–µ–∫—Ç Carpet
            filename = poly.filename
            color = poly.color
            order_id = poly.order_id
            print(f"   ‚Ä¢ {filename} (—Ü–≤–µ—Ç: {color}, –∑–∞–∫–∞–∑: {order_id})")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ª–∏—Å—Ç–∞–º
    print("\n=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –õ–ò–°–¢–û–í ===")
    priority2_black_placed = 0
    priority2_gray_placed = 0
    sheets_with_space = 0
    
    for i, layout in enumerate(placed_layouts, 1):
        poly_count = layout.placed_polygons
        usage = layout.usage_percent

        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
        p2_black_count = 0
        p2_gray_count = 0
        for p in layout.placed_polygons:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ—Ä—Ç–µ–∂–µ–π
            color = p.color

            if color=="—á—ë—Ä–Ω—ã–π":
                p2_black_count += 1
            elif color=="—Å–µ—Ä—ã–π":
                p2_gray_count += 1
        
        priority2_black_placed += p2_black_count
        priority2_gray_placed += p2_gray_count
        
        sheet_info = f"  –õ–∏—Å—Ç {i}: {poly_count} –ø–æ–ª–∏–≥–æ–Ω–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        if p2_black_count > 0 or p2_gray_count > 0:
            sheet_info += f" [+{p2_black_count} —á–µ—Ä. –ø—Ä–∏–æ2, +{p2_gray_count} —Å–µ—Ä. –ø—Ä–∏–æ2]"
        
        print(sheet_info)

    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –ª–∏—Å—Ç–æ–≤
    print("\n=== –ê–ù–ê–õ–ò–ó –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ô –õ–û–ì–ò–ö–ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø ===")
    problems = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    if len(unplaced) > 0:
        unplaced_excel = []
        unplaced_p1 = []
        unplaced_p2 = []
        
        for p in unplaced:
            if p.order_id.startswith("ZAKAZ"):
                unplaced_excel.append(p)
            elif p.priority == 1:
                unplaced_p1.append(p)
            elif p.priority == 2:
                unplaced_p2.append(p)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Excel –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –ª–∏—Å—Ç—ã)
        if unplaced_excel:
            print(f"‚ö†Ô∏è  –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ Excel –∑–∞–∫–∞–∑—ã: {len(unplaced_excel)}")
            for p in unplaced_excel:
                print(f"   ‚Ä¢ {p.order_id}: {p.filename}")
                
        if unplaced_p1:
            print(f"‚ö†Ô∏è  –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1: {len(unplaced_p1)}")
            for p in unplaced_p1:
                print(f"   ‚Ä¢ {p.order_id}: {p.filename}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
        if unplaced_p2:
            print(f"‚ÑπÔ∏è   –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2: {len(unplaced_p2)} (–æ–∂–∏–¥–∞–µ–º–æ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ Excel —Ä–∞–∑–º–µ—â–µ–Ω—ã (–≥–ª–∞–≤–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ)
    print("\n=== –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø EXCEL –ó–ê–ö–ê–ó–û–í ===")
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö Excel
    placed_orders = set()
    
    for i, layout in enumerate(placed_layouts, 1):        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã –Ω–∞ —ç—Ç–æ–º –ª–∏—Å—Ç–µ
        for placed_tuple in layout.placed_polygons:
            order_id = placed_tuple.order_id
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –∏–∑ Excel (ZAKAZ_*)
            if order_id.startswith("ZAKAZ"):
                placed_orders.add(order_id)
    
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ Excel –∑–∞–∫–∞–∑–æ–≤: {len(placed_orders)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å - –≤—Å–µ Excel –∑–∞–∫–∞–∑—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω—ã
    total_excel_orders = len([p for p in all_polygons if p.order_id.startswith("ZAKAZ")])
    total_excel_orders_unique = len(set(p.order_id for p in all_polygons if p.order_id.startswith("ZAKAZ")))
    
    print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö Excel –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: {total_excel_orders_unique}")
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö Excel –∑–∞–∫–∞–∑–æ–≤: {len(placed_orders)}")
    
    if len(placed_orders) < total_excel_orders_unique:
        missing_orders = total_excel_orders_unique - len(placed_orders)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–∫–∞–∑
        unplaced_excel_ids = set()
        for p in unplaced:
            unplaced_excel_ids.add(p.order_id)
        known_problematic_orders = {"ZAKAZ_row_34"}  # –õ–æ–¥–∫–∞ AKVA 2800 - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
        
        if unplaced_excel_ids.issubset(known_problematic_orders) and missing_orders <= 1:
            print(f"‚ÑπÔ∏è   –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω {missing_orders} –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Excel –∑–∞–∫–∞–∑ (–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–æ–ª—å—à–∞—è –ª–æ–¥–∫–∞)")
            print("‚úÖ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ Excel –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã")
        else:
            problems.append(f"–ù–µ –≤—Å–µ Excel –∑–∞–∫–∞–∑—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã: {missing_orders} –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
    else:
        print("‚úÖ –í—Å–µ Excel –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã")

    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∫–æ–≤—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º –ª–∏—Å—Ç–µ
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô ===")
    for i, layout in enumerate(placed_layouts, 1):
        polygons_on_sheet = layout.placed_polygons

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        for idx1, p1 in enumerate(polygons_on_sheet):
            for idx2, p2 in enumerate(polygons_on_sheet[idx1+1:], idx1+1):
                if p1.polygon.intersects(p2.polygon):
                    intersection = p1.polygon.intersection(p2.polygon)
                    # Check ANY intersection, even tiny ones (changed from 0.1 to 0.01)
                    if hasattr(intersection, 'area') and intersection.area > 0.01:
                        error_msg = (
                            f"–õ–∏—Å—Ç {i}: –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –Ω–∞–π–¥–µ–Ω–æ!\n"
                            f"   '{p1.filename}' (pos={p1.polygon.bounds[:2]}, angle={p1.angle}¬∞)\n"
                            f"   –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å\n"
                            f"   '{p2.filename}' (pos={p2.polygon.bounds[:2]}, angle={p2.angle}¬∞)\n"
                            f"   –ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {intersection.area:.1f} –º–º¬≤"
                        )
                        problems.append(error_msg)
                        print(f"‚ùå {error_msg}")

    if not problems:
        print("‚úÖ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ DXF –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\n=== –≠–ö–°–ü–û–†–¢ –í DXF –î–õ–Ø –ü–†–û–í–ï–†–ö–ò ===")
    from dxf_utils import save_dxf_layout_complete
    import os

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    os.makedirs("tmp_test", exist_ok=True)

    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç 16 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if len(placed_layouts) >= 16:
        sheet_16 = placed_layouts[15]  # 0-indexed
        output_path = "tmp_test/test_sheet_16.dxf"

        print(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –ª–∏—Å—Ç 16 –≤ {output_path}")
        print(f"–ü–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ: {len(sheet_16.placed_polygons)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –Ω–∞ –ª–∏—Å—Ç–µ 16
        for p in sheet_16.placed_polygons:
            print(f"  ‚Ä¢ {p.filename} (pos={p.polygon.bounds[:2]}, angle={p.angle}¬∞)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è SUBARU XV 1_3 –∏ VOLKSWAGEN TIGUAN 2_4
        subaru = None
        tiguan = None
        for p in sheet_16.placed_polygons:
            if "SUBARU XV 1_3" in p.filename:
                subaru = p
            if "VOLKSWAGEN TIGUAN 2_4" in p.filename:
                tiguan = p

        if subaru and tiguan:
            print(f"\n=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø –í –ü–ê–ú–Ø–¢–ò ===")
            print(f"SUBARU XV 1_3 bounds: {subaru.polygon.bounds}")
            print(f"VOLKSWAGEN TIGUAN 2_4 bounds: {tiguan.polygon.bounds}")
            print(f"Shapely intersects(): {subaru.polygon.intersects(tiguan.polygon)}")
            distance = subaru.polygon.distance(tiguan.polygon)
            print(f"Shapely distance(): {distance:.6f} mm")
            print(f"Shapely touches(): {subaru.polygon.touches(tiguan.polygon)}")

            # –ù–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏
            from shapely.ops import nearest_points
            p1, p2 = nearest_points(subaru.polygon, tiguan.polygon)
            print(f"Nearest point on SUBARU: ({p1.x:.2f}, {p1.y:.2f})")
            print(f"Nearest point on TIGUAN: ({p2.x:.2f}, {p2.y:.2f})")

            if subaru.polygon.intersects(tiguan.polygon):
                intersection = subaru.polygon.intersection(tiguan.polygon)
                print(f"Intersection type: {type(intersection).__name__}")
                if hasattr(intersection, 'area'):
                    print(f"Intersection area: {intersection.area:.6f}")
            else:
                print(f"NO INTERSECTION - minimum gap is {distance:.2f}mm")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è bounding boxes
            s_minx, s_miny, s_maxx, s_maxy = subaru.polygon.bounds
            t_minx, t_miny, t_maxx, t_maxy = tiguan.polygon.bounds
            bbox_overlap = not (s_maxx < t_minx or t_maxx < s_minx or s_maxy < t_miny or t_maxy < s_miny)
            print(f"Bounding boxes overlap: {bbox_overlap}")

            if bbox_overlap:
                print(f"  SUBARU XV Y range: {s_miny:.1f} - {s_maxy:.1f}")
                print(f"  TIGUAN Y range: {t_miny:.1f} - {t_maxy:.1f}")
                if s_maxy > t_miny and s_miny < t_maxy:
                    overlap_y = min(s_maxy, t_maxy) - max(s_miny, t_miny)
                    print(f"  Y overlap: {overlap_y:.1f}mm (–æ—Ç {max(s_miny, t_miny):.1f} –¥–æ {min(s_maxy, t_maxy):.1f})")

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è polygons –∏–∑ –ø–∞–º—è—Ç–∏
            import matplotlib.pyplot as plt
            fig, ax = plt.subplots(figsize=(10, 8))

            # SUBARU XV
            if subaru.polygon.exterior:
                xs, ys = subaru.polygon.exterior.xy
                ax.plot(xs, ys, 'b-', linewidth=2, label=f'SUBARU XV (angle={subaru.angle}¬∞)')
                ax.fill(xs, ys, alpha=0.3, color='blue')

            # TIGUAN
            if tiguan.polygon.exterior:
                xs, ys = tiguan.polygon.exterior.xy
                ax.plot(xs, ys, 'r-', linewidth=2, label=f'TIGUAN 2_4 (angle={tiguan.angle}¬∞)')
                ax.fill(xs, ys, alpha=0.3, color='red')

            ax.set_aspect('equal')
            ax.legend()
            ax.grid(True, alpha=0.3)
            ax.set_title('Polygons from MEMORY (PlacedCarpet.polygon)')
            plt.savefig('tmp_test/memory_polygons.png', dpi=150, bbox_inches='tight')
            print(f"  Saved visualization: tmp_test/memory_polygons.png")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DXF
        save_dxf_layout_complete(
            sheet_16.placed_polygons,
            (sheet_16.sheet_size[0], sheet_16.sheet_size[1]),
            output_path,
            dxf_data_map
        )
        print(f"‚úÖ DXF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if problems:
        print("\n‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for problem in problems:
            print(f"   ‚Ä¢ {problem}")
        
        # –≠—Ç–æ —Ç–µ—Å—Ç - –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
        assert False, f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º: {problems}"
    else:
        print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û")
        print("   ‚Ä¢ –í—Å–µ Excel –∑–∞–∫–∞–∑—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å)")
        print("   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print("     - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 + Excel: –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–µ –ª–∏—Å—Ç—ã")
        print("     - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ")
        print("   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω")
        
        unplaced_count = len(unplaced) if unplaced else 0
        print(f"   ‚Ä¢ –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {unplaced_count} (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)")


