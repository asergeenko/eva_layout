#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –≤ Streamlit:
- 20 —á–µ—Ä–Ω—ã—Ö –∏ 20 —Å–µ—Ä—ã—Ö –ª–∏—Å—Ç–æ–≤ 140*200
- –í—Å–µ 37 –∑–∞–∫–∞–∑–æ–≤ –∏–∑ sample_input_test.xlsx
- 20 —Å–µ—Ä—ã—Ö –∏ 20 —á–µ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 –∏–∑ "dxf_samples/–î–ï–ö–ê KUGOO M4 PRO JILONG/1.dxf"
"""

import sys
import os
import pandas as pd
import logging
from excel_loader import load_excel_file, parse_orders_from_excel, find_dxf_files_for_article

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import (
    bin_packing_with_inventory,
    parse_dxf_complete,
    Carpet,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def create_available_sheets():
    """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Streamlit: 20 —á–µ—Ä–Ω—ã—Ö + 20 —Å–µ—Ä—ã—Ö 140*200"""
    sheets = []
    
    # 20 —á–µ—Ä–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
    sheets.append({
            "name": f"–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
            "width": 140,
            "height": 200,
            "color": "—á—ë—Ä–Ω—ã–π", 
            "count": 20,
            "used": 0
        })
    
    # 20 —Å–µ—Ä—ã—Ö –ª–∏—Å—Ç–æ–≤
    sheets.append({
            "name": f"–°–µ—Ä—ã–π –ª–∏—Å—Ç",
            "width": 140,
            "height": 200,
            "color": "—Å–µ—Ä—ã–π", 
            "count": 20,
            "used": 0
        })
    
    return sheets

def process_orders(orders) -> list[Carpet]:
    polygons = []
    
    for order in orders:
    #for idx, row in df.iterrows():
        order_id = order["order_id"]  # +2 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        article = order["article"]
        product_name = order["product"]
        
        color = order["color"]

        # –ò—â–µ–º DXF —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        dxf_files = find_dxf_files_for_article(article, product_name)

        if dxf_files:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ DXF —Ñ–∞–π–ª—ã
            for dxf_file in dxf_files:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º verbose=False —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Streamlit –≤—ã–∑–æ–≤–æ–≤
                    polygon_data = parse_dxf_complete(dxf_file, verbose=False)
                    if polygon_data and polygon_data.get("combined_polygon"):
                        polygon = polygon_data["combined_polygon"]
                        filename = os.path.basename(dxf_file)
                        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                        unique_filename = f"{product_name}_{os.path.splitext(filename)[0]}.dxf"
                        polygons.append(Carpet(polygon, unique_filename, color, order_id))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {dxf_file}: {e}")
                    continue
    
    return polygons

def create_priority2_polygons():
    """–°–æ–∑–¥–∞–µ—Ç 20 —Å–µ—Ä—ã—Ö + 20 —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 –∏–∑ –î–ï–ö–ê KUGOO M4 PRO JILONG"""
    priority2_polygons = []
    dxf_file = "dxf_samples/–î–ï–ö–ê KUGOO M4 PRO JILONG/1.dxf"
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º verbose=False —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Streamlit –≤—ã–∑–æ–≤–æ–≤
        polygon_data = parse_dxf_complete(dxf_file, verbose=False)
        if polygon_data and polygon_data.get("combined_polygon"):
            base_polygon = polygon_data["combined_polygon"]

            # 20 —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
            for i in range(20):
                filename = f"–î–ï–ö–ê_KUGOO_M4_PRO_JILONG_—á–µ—Ä–Ω—ã–π_{i+1}.dxf"
                priority2_polygons.append(Carpet(base_polygon, filename, "—á—ë—Ä–Ω—ã–π", "group_1",2))

            # 20 —Å–µ—Ä—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
            for i in range(20):
                filename = f"–î–ï–ö–ê_KUGOO_M4_PRO_JILONG_—Å–µ—Ä—ã–π_{i+1}.dxf"
                priority2_polygons.append(Carpet(base_polygon, filename, "—Å–µ—Ä—ã–π", "group_2",2))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
        return []
    
    return priority2_polygons

def test_streamlit_integration():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –≤ Streamlit"""
    print("=== –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò STREAMLIT ===")
    

    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = create_available_sheets()
    print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ {len(available_sheets)} –ª–∏—Å—Ç–æ–≤ (20 —á–µ—Ä–Ω—ã—Ö + 20 —Å–µ—Ä—ã—Ö)")

    #########################
    excel_data = load_excel_file(open("tests/sample_input_test.xlsx","rb").read())
    orders = parse_orders_from_excel(excel_data)
    polygons = process_orders(orders)
    #########################
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Excel
    print(f"üîß –°–æ–∑–¥–∞–Ω–æ {len(orders)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–æ–≤ Excel")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
    priority2_polygons = create_priority2_polygons()
    print(f"‚ûï –°–æ–∑–¥–∞–Ω–æ {len(priority2_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 (20 —á–µ—Ä–Ω—ã—Ö + 20 —Å–µ—Ä—ã—Ö)")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    all_polygons = polygons + priority2_polygons
    total_polygons = len(all_polygons)
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_polygons}")
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    if not all_polygons:
        print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\n=== –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===")
    MAX_SHEET_RANGE_PER_ORDER = 5
    
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons,
        available_sheets,
        verbose=True,
        max_sheet_range_per_order=MAX_SHEET_RANGE_PER_ORDER,
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    actual_placed_count = total_polygons - len(unplaced)
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {actual_placed_count}/{total_polygons}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")
    
    if unplaced:
        print("\n‚ùå –ù–ï–†–ê–ó–ú–ï–©–ï–ù–ù–´–ï –ü–û–õ–ò–ì–û–ù–´:")
        for poly in unplaced:
            if hasattr(poly, 'filename'):
                # –û–±—ä–µ–∫—Ç Carpet
                filename = poly.filename
                color = poly.color
                order_id = poly.order_id
            elif len(poly) > 1:
                # –ö–æ—Ä—Ç–µ–∂
                filename = poly[1] if len(poly) > 1 else "unknown"
                color = poly[2] if len(poly) > 2 else "unknown"
                order_id = poly[3] if len(poly) > 3 else "unknown"
            else:
                filename = "unknown"
                color = "unknown"
                order_id = "unknown"
            print(f"   ‚Ä¢ {filename} (—Ü–≤–µ—Ç: {color}, –∑–∞–∫–∞–∑: {order_id})")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ª–∏—Å—Ç–∞–º
    print("\n=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –õ–ò–°–¢–û–í ===")
    priority2_black_placed = 0
    priority2_gray_placed = 0
    sheets_with_space = 0
    
    for i, layout in enumerate(placed_layouts, 1):
        poly_count = len(layout['placed_polygons'])
        usage = layout.get('usage_percent', 0)

        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
        p2_black_count = 0
        p2_gray_count = 0
        for p in layout['placed_polygons']:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ—Ä—Ç–µ–∂–µ–π
            color = None
            if len(p) >= 7:
                # Extended format: (polygon, x, y, angle, file_name, color, order_id)
                color = str(p[5])
            elif len(p) > 3:
                # Standard format: (polygon, file_name, color, order_id)
                color = str(p[2])
            
            if color=="—á—ë—Ä–Ω—ã–π":
                p2_black_count += 1
            elif color=="—Å–µ—Ä—ã–π":
                p2_gray_count += 1
        
        priority2_black_placed += p2_black_count
        priority2_gray_placed += p2_gray_count
        
        sheet_info = f"  –õ–∏—Å—Ç {i}: {poly_count} –ø–æ–ª–∏–≥–æ–Ω–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"
        
        if p2_black_count > 0 or p2_gray_count > 0:
            sheet_info += f" [+{p2_black_count} —á–µ—Ä. –ø—Ä–∏–æ2, +{p2_gray_count} —Å–µ—Ä. –ø—Ä–∏–æ2]"
        
        print(sheet_info)

    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    print("\n=== –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ò –ü–†–û–í–ï–†–ö–ê MAX_SHEET_RANGE_PER_ORDER ===")
    problems = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    if len(unplaced) > 0:
        unplaced_excel = []
        unplaced_p1 = []
        unplaced_p2 = []
        
        for p in unplaced:
            if p.order_id.startswith("ZAKAZ"):
                unplaced_excel.append(p)
            elif p.priority == 1:
                unplaced_p1.append(p)
            elif p.priority == 2:
                unplaced_p2.append(p)
        
        # –î–æ–ø—É—Å–∫–∞–µ–º –¥–æ 5 –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (—Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π MAX_SHEET_RANGE_PER_ORDER)
        if len(unplaced_excel) > 1:
            problems.append(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ Excel: {len(unplaced_excel)}")
        if unplaced_p1:
            problems.append(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1: {len(unplaced_p1)}")
        if unplaced_p2:
            problems.append(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ —Å–µ—Ä—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2: {len(unplaced_p2)}")

    # –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°–æ–±–ª—é–¥–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è MAX_SHEET_RANGE_PER_ORDER
    print("\n=== –ü–†–û–í–ï–†–ö–ê –°–û–ë–õ–Æ–î–ï–ù–ò–Ø MAX_SHEET_RANGE_PER_ORDER ===")
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –Ω–∞ –∫–∞–∫–∏—Ö –ª–∏—Å—Ç–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
    order_sheets = {}  # order_id -> —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ª–∏—Å—Ç–æ–≤
    
    for i, layout in enumerate(placed_layouts, 1):
        sheet_number = layout.get('sheet_number', i)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã –Ω–∞ —ç—Ç–æ–º –ª–∏—Å—Ç–µ
        for placed_tuple in layout['placed_polygons']:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º order_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
            if len(placed_tuple) >= 7:
                # Extended format: (polygon, x, y, angle, file_name, color, order_id)
                order_id = placed_tuple[6]
            elif len(placed_tuple) >= 4:
                # Standard format: (polygon, file_name, color, order_id)  
                order_id = placed_tuple[3]
            else:
                order_id = "unknown"
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –∏–∑ Excel (ZAKAZ_*)
            if order_id.startswith("ZAKAZ"):
                if order_id not in order_sheets:
                    order_sheets[order_id] = set()
                order_sheets[order_id].add(sheet_number)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    range_violations = []
    
    for order_id, sheets in order_sheets.items():
        if len(sheets) > 0:
            sheet_list = sorted(list(sheets))
            min_sheet = min(sheet_list)
            max_sheet = max(sheet_list)
            sheet_range = max_sheet - min_sheet + 1
            
            print(f"–ó–∞–∫–∞–∑ {order_id}: –ª–∏—Å—Ç—ã {sheet_list}, –¥–∏–∞–ø–∞–∑–æ–Ω {min_sheet}-{max_sheet} (—Ä–∞–∑–º–µ—Ä: {sheet_range})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            if sheet_range > MAX_SHEET_RANGE_PER_ORDER:
                range_violations.append((order_id, sheet_list, sheet_range))
                problems.append(f"–ó–∞–∫–∞–∑ {order_id} –Ω–∞—Ä—É—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ MAX_SHEET_RANGE_PER_ORDER: "
                              f"–¥–∏–∞–ø–∞–∑–æ–Ω {sheet_range} > {MAX_SHEET_RANGE_PER_ORDER}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ª–∏—Å—Ç–æ–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã, –≤–∞–∂–µ–Ω —Ç–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            # –ü–æ—ç—Ç–æ–º—É –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–∂–Ω–æ—Å—Ç—å –ª–∏—Å—Ç–æ–≤

    if range_violations:
        print(f"\n‚ùå –ù–ê–†–£–®–ï–ù–ò–Ø MAX_SHEET_RANGE_PER_ORDER:")
        for order_id, sheets, actual_range in range_violations:
            print(f"   ‚Ä¢ {order_id}: –ª–∏—Å—Ç—ã {sheets}, –¥–∏–∞–ø–∞–∑–æ–Ω {actual_range} > {MAX_SHEET_RANGE_PER_ORDER}")
    else:
        print(f"\n‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ–±–ª—é–¥–∞—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ MAX_SHEET_RANGE_PER_ORDER = {MAX_SHEET_RANGE_PER_ORDER}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if problems:
        print("\n‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for problem in problems:
            print(f"   ‚Ä¢ {problem}")
        
        # –≠—Ç–æ —Ç–µ—Å—Ç - –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
        assert False, f"–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º: {problems}"
    else:
        print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û")
        print("   ‚Ä¢ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã")
        print("   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤")
        print(f"   ‚Ä¢ –í—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ–±–ª—é–¥–∞—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ MAX_SHEET_RANGE_PER_ORDER = {MAX_SHEET_RANGE_PER_ORDER}")