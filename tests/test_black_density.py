#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —á–µ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –º–∞–∫—Å–∏–º—É–º –Ω–∞ 17 –ª–∏—Å—Ç–∞—Ö,
–ø—Ä–∏—á–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ª–∏—Å—Ç–µ –º–∞–∫—Å–∏–º—É–º 1 –∫–æ–≤–µ—Ä.
"""

import sys
import os
from pathlib import Path

import pandas as pd
import logging

import pytest

from dxf_utils import parse_dxf_complete
from excel_loader import load_excel_file, parse_orders_from_excel, find_dxf_files_for_article

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import (
    bin_packing_with_inventory,
    Carpet,
)


def test_black_density():
    """
    –¢–µ—Å—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —á–µ—Ä–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç sample_input_test.xlsx
    - –¢–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    - –õ–∏—Å—Ç—ã 140x200 —á–µ—Ä–Ω—ã–µ
    - –î–æ–ª–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è –º–∞–∫—Å–∏–º—É–º –Ω–∞ 17 –ª–∏—Å—Ç–∞—Ö
    - –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ª–∏—Å—Ç–µ –º–∞–∫—Å–∏–º—É–º 1 –∫–æ–≤–µ—Ä
    """
    print("=== –¢–ï–°–¢ –ü–õ–û–¢–ù–û–°–¢–ò –ß–ï–†–ù–´–• –ö–û–í–†–û–í ===")

    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ 140x200
    available_sheets = [{
        "name": "–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
        "width": 140,
        "height": 200,
        "color": "—á—ë—Ä–Ω—ã–π",
        "count": 20,
        "used": 0
    }]

    print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: 20 —á–µ—Ä–Ω—ã—Ö 140x200")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Excel
    excel_data = load_excel_file(open("tests/sample_input_test.xlsx", "rb").read())
    orders = parse_orders_from_excel(excel_data)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ
    polygons = []
    for order in orders:
        order_id = order["order_id"]
        article = order["article"]
        product_name = order["product"]
        color = order["color"]

        # –¢–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if color != "—á—ë—Ä–Ω—ã–π":
            continue

        # –ò—â–µ–º DXF —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        dxf_files = find_dxf_files_for_article(article, product_name)

        if dxf_files:
            for dxf_file in dxf_files:
                try:
                    polygon_data = parse_dxf_complete(dxf_file, verbose=False)
                    if polygon_data and polygon_data.get("combined_polygon"):
                        polygon = polygon_data["combined_polygon"]
                        filename = os.path.basename(dxf_file)
                        unique_filename = f"{product_name}_{os.path.splitext(filename)[0]}.dxf"
                        polygons.append(Carpet(polygon, unique_filename, color, order_id, 1))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {dxf_file}: {e}")
                    continue

    total_polygons = len(polygons)
    print(f"üìä –í—Å–µ–≥–æ —á–µ—Ä–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_polygons}")

    if not polygons:
        print("‚ùå –ù–µ—Ç —á–µ—Ä–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        assert False, "–ù–µ—Ç —á–µ—Ä–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"

    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\n=== –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===")

    placed_layouts, unplaced = bin_packing_with_inventory(
        polygons,
        available_sheets,
        verbose=False,
    )

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    actual_placed_count = total_polygons - len(unplaced)
    print(f"üìä –†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {actual_placed_count}/{total_polygons} ({actual_placed_count / total_polygons * 100:.1f}%)")
    print(f"üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"‚ùå –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ª–∏—Å—Ç–∞–º
    print("\nüìÑ –î–ï–¢–ê–õ–ò –ü–û –õ–ò–°–¢–ê–ú:")
    total_sheet_usage = 0
    for i, layout in enumerate(placed_layouts, 1):
        carpet_count = len(layout.placed_polygons)
        usage = layout.usage_percent
        total_sheet_usage += usage
        print(f"   –õ–∏—Å—Ç {i}: {carpet_count} –∫–æ–≤—Ä–∏–∫–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")

    if placed_layouts:
        avg_sheet_usage = total_sheet_usage / len(placed_layouts)
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤: {avg_sheet_usage:.1f}%")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –¢–†–ï–ë–û–í–ê–ù–ò–ô:")

    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 1: –í—Å–µ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω—ã
    if len(unplaced) > 0:
        print(f"   ‚ùå –ï—Å—Ç—å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∫–æ–≤—Ä—ã: {len(unplaced)}")
        print("   –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ:")
        for poly in unplaced:
            print(f"      ‚Ä¢ {poly.filename} (–∑–∞–∫–∞–∑: {poly.order_id})")
        assert False, f"–ï—Å—Ç—å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∫–æ–≤—Ä—ã: {len(unplaced)}"
    else:
        print(f"   ‚úÖ –í—Å–µ –∫–æ–≤—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã")

    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2: –ú–∞–∫—Å–∏–º—É–º 17 –ª–∏—Å—Ç–æ–≤
    if len(placed_layouts) > 17:
        print(f"   ‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)} > 17")
        assert False, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)} > 17"
    else:
        print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)} <= 17")

    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3: –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ª–∏—Å—Ç–µ –Ω–∏–∑–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (< 20%)
    # –≠—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ö–æ—Ä–æ—à–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ - –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω
    if placed_layouts:
        last_sheet_carpets = len(placed_layouts[-1].placed_polygons)
        last_sheet_usage = placed_layouts[-1].usage_percent
        if last_sheet_usage > 20:
            print(f"   ‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–∏—Å—Ç–∞ {last_sheet_usage:.1f}% > 20%")
            assert False, f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç —Å–ª–∏—à–∫–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω: {last_sheet_usage:.1f}% > 20%"
        else:
            print(f"   ‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–∏—Å—Ç–∞ {last_sheet_usage:.1f}% <= 20% ({last_sheet_carpets} –∫–æ–≤—Ä–æ–≤)")

    print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–æ {actual_placed_count} –∫–æ–≤—Ä–æ–≤")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(placed_layouts)} –ª–∏—Å—Ç–æ–≤ (–º–∞–∫—Å 17)")
    print(f"   ‚Ä¢ –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ª–∏—Å—Ç–µ {last_sheet_carpets} –∫–æ–≤–µ—Ä (–º–∞–∫—Å 1)")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {avg_sheet_usage:.1f}%")
