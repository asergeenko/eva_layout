from pathlib import Path
import time

from dxf_utils import parse_dxf_complete
from layout_optimizer import Carpet, bin_packing_with_inventory


def test_placement_efficiency():
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = [{
            "name": f"–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
            "width": 144,
            "height": 200,
            "color": "—á—ë—Ä–Ω—ã–π",
            "count": 20,
            "used": 0
        }]


    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1
    #########################################
    models = ["AUDI Q7 (4L) 1", "BMW X5 E53 1 –∏ —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥", "BMW X5 G05-G18 4 –∏ —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥"]
    priority1_polygons = []
    for group_id, group in enumerate(models, 1):
        path = Path('dxf_samples') / group
        files = path.rglob("*.dxf", case_sensitive=False)
        for dxf_file in files:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º verbose=False —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Streamlit –≤—ã–∑–æ–≤–æ–≤
                polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
                if polygon_data and polygon_data.get("combined_polygon"):
                    base_polygon = polygon_data["combined_polygon"]
                    priority1_polygons.append(Carpet(base_polygon, dxf_file.name, "—á—ë—Ä–Ω—ã–π", f"group_{group_id}", 1))

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
                return []
    #########################################
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(priority1_polygons)}")

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    if not priority1_polygons:
        print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return


    placed_layouts, unplaced = bin_packing_with_inventory(
        priority1_polygons,
        available_sheets,
        verbose=True,
    )

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø ===")
    
    start_time = time.time()
    actual_placed_count = len(priority1_polygons) - len(unplaced)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –∫–æ–≤—Ä–∏–∫–æ–≤
    total_carpet_area_mm2 = sum(carpet.polygon.area for carpet in priority1_polygons)
    # FIXED: Convert unplaced to set of identifiers for proper comparison
    unplaced_ids = set((u.filename, u.color, u.order_id) for u in unplaced)
    placed_carpet_area_mm2 = sum(
        carpet.polygon.area for carpet in priority1_polygons 
        if (carpet.filename, carpet.color, carpet.order_id) not in unplaced_ids
    )
    
    # –ü–ª–æ—â–∞–¥—å –ª–∏—Å—Ç–æ–≤
    sheet_area_mm2 = (available_sheets[0]['width'] * 10) * (available_sheets[0]['height'] * 10)
    used_sheets_area_mm2 = len(placed_layouts) * sheet_area_mm2
    theoretical_min_sheets = total_carpet_area_mm2 / sheet_area_mm2
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    material_utilization = (placed_carpet_area_mm2 / used_sheets_area_mm2) * 100 if used_sheets_area_mm2 > 0 else 0
    
    print(f"üìä –†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {actual_placed_count}/{len(priority1_polygons)} ({actual_placed_count/len(priority1_polygons)*100:.1f}%)")
    print(f"üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–≤—Ä–∏–∫–æ–≤: {total_carpet_area_mm2/100:.0f} —Å–º¬≤")
    print(f"üìê –ü–ª–æ—â–∞–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {used_sheets_area_mm2/100:.0f} —Å–º¬≤") 
    print(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_utilization:.1f}%")
    print(f"üìä –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º: {theoretical_min_sheets:.2f} –ª–∏—Å—Ç–∞")
    print(f"‚ùå –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")
    
    if placed_layouts:
        print(f"\nüìÑ –î–ï–¢–ê–õ–ò –ü–û –õ–ò–°–¢–ê–ú:")
        total_sheet_usage = 0
        for i, layout in enumerate(placed_layouts, 1):
            carpet_count = len(layout.placed_polygons)
            usage = layout.usage_percent
            total_sheet_usage += usage
            print(f"   –õ–∏—Å—Ç {i}: {carpet_count} –∫–æ–≤—Ä–∏–∫–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
        
        avg_sheet_usage = total_sheet_usage / len(placed_layouts)
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤: {avg_sheet_usage:.1f}%")
    
    # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    print(f"\nüéØ –û–¶–ï–ù–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
    if len(placed_layouts) <= 2 and len(unplaced) == 0:
        print("   ‚úÖ –û–¢–õ–ò–ß–ù–û! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ‚â§2 –ª–∏—Å—Ç–∞, –≤—Å–µ –∫–æ–≤—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã")
        efficiency_score = "A+"
    elif len(placed_layouts) <= 2:
        print("   ‚ö†Ô∏è  –•–û–†–û–®–û! ‚â§2 –ª–∏—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∫–æ–≤—Ä—ã")  
        efficiency_score = "B+"
    elif material_utilization >= 60:
        print("   ‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! >2 –ª–∏—Å—Ç–æ–≤, –Ω–æ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        efficiency_score = "B"
    elif material_utilization >= 40:
        print("   ‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! >2 –ª–∏—Å—Ç–æ–≤ –∏ —Å—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        efficiency_score = "C"
    else:
        print("   ‚ùå –ü–õ–û–•–û! >2 –ª–∏—Å—Ç–æ–≤ –∏ –Ω–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        efficiency_score = "D"
    
    print(f"   –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {efficiency_score}")
    
    # –°—Ç—Ä–æ–≥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ‚â§2 –ª–∏—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ‚â•78% (—Ü–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞)
    target_utilization = 78.1  # –∫–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –≤ benchmark
    
    print(f"\nüèÜ –¶–ï–õ–¨ –ö–õ–ò–ï–ù–¢–ê:")
    print(f"   –õ–∏—Å—Ç–æ–≤: ‚â§2 (—Ç–µ–∫—É—â–∏–π: {len(placed_layouts)})")  
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ‚â•{target_utilization:.1f}% (—Ç–µ–∫—É—â–∏–π: {material_utilization:.1f}%)")
    
    client_goal_achieved = (len(placed_layouts) <= 2 and 
                          len(unplaced) == 0 and 
                          material_utilization >= target_utilization)
    
    if client_goal_achieved:
        print("   ‚úÖ –¶–ï–õ–¨ –ö–õ–ò–ï–ù–¢–ê –î–û–°–¢–ò–ì–ù–£–¢–ê!")
    else:
        print("   ‚ùå –¶–ï–õ–¨ –ö–õ–ò–ï–ù–¢–ê –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–ê")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –±–∞–∑–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º
    baseline_material_utilization = 45.0  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    assert material_utilization > baseline_material_utilization, f"–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ >45%, –ø–æ–ª—É—á–∏–ª–∏ {material_utilization:.1f}%"
    assert len(unplaced) == 0, f"–í—Å–µ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω—ã, –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {len(unplaced)}"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–¥–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ 2 –ª–∏—Å—Ç–∞—Ö —Å —Ö–æ—Ä–æ—à–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é - –æ—Ç–ª–∏—á–Ω–æ
    two_sheet_goal_achieved = (len(placed_layouts) <= 2 and material_utilization >= 78.1)
    if two_sheet_goal_achieved:
        print("üèÜ –ë–û–ù–£–°: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ 2 –ª–∏—Å—Ç–∞—Ö!")
    else:
        print(f"üìà –ü–†–û–ì–†–ï–°–°: –ü–ª–æ—Ç–Ω–æ—Å—Ç—å {material_utilization:.1f}% > –±–∞–∑–æ–≤–æ–≥–æ {baseline_material_utilization}%")
    
    return {
        'sheets_used': len(placed_layouts),
        'carpets_placed': actual_placed_count,
        'carpets_total': len(priority1_polygons), 
        'material_utilization': material_utilization,
        'efficiency_score': efficiency_score,
        'client_goal_achieved': client_goal_achieved
    }