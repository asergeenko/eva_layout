from pathlib import Path

from layout_optimizer import parse_dxf_complete, Carpet, bin_packing_with_inventory


def test_placement_efficiency():
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = [{
            "name": f"–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
            "width": 144,
            "height": 200,
            "color": "—á—ë—Ä–Ω—ã–π",
            "count": 20,
            "used": 0
        }]


    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1
    #########################################
    models = ["AUDI Q7 (4L) 1", "BMW X5 E53 1 –∏ —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥", "BMW X5 G05-G18 4 –∏ —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥"]
    priority1_polygons = []
    for group_id, group in enumerate(models, 1):
        path = Path('dxf_samples') / group
        files = path.rglob("*.dxf", case_sensitive=False)
        for dxf_file in files:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º verbose=False —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Streamlit –≤—ã–∑–æ–≤–æ–≤
                polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
                if polygon_data and polygon_data.get("combined_polygon"):
                    base_polygon = polygon_data["combined_polygon"]
                    priority1_polygons.append(Carpet(base_polygon, dxf_file.name, "—á—ë—Ä–Ω—ã–π", f"group_{group_id}", 1))

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
                return []
    #########################################
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(priority1_polygons)}")

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    if not priority1_polygons:
        print("‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return


    placed_layouts, unplaced = bin_packing_with_inventory(
        priority1_polygons,
        available_sheets,
        verbose=True,
    )

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    actual_placed_count = len(priority1_polygons) - len(unplaced)
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {actual_placed_count}/{len(priority1_polygons)}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")

    assert len(placed_layouts) <= 3
    return None