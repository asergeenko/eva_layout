from pathlib import Path

from dxf_utils import parse_dxf_complete
from layout_optimizer import Carpet, bin_packing_with_inventory


def test_admiral():
    """
    –¢–µ—Å—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ Admiral: 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–≤—Ä–∞ –¥–æ–ª–∂–Ω—ã –ø–ª–æ—Ç–Ω–æ —Å—Ç—ã–∫–æ–≤–∞—Ç—å—Å—è.
    –ü—Ä–æ–±–ª–µ–º–∞: —Å—Ä–µ–¥–Ω–∏–π –∫–æ–≤–µ—Ä –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É–≥–æ–ª, –Ω–µ —Å—Ç—ã–∫—É—è—Å—å —Å —Å–æ—Å–µ–¥—è–º–∏.
    –¶–µ–ª—å: –≤—Å–µ 3 –∫–æ–≤—Ä–∞ –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —É–≥–ª–æ–º –¥–ª—è –ø–ª–æ—Ç–Ω–æ–π —Å—Ç—ã–∫–æ–≤–∫–∏.
    """
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã - —Å–µ—Ä—ã–µ
    available_sheets = [{
        "name": "–°–µ—Ä—ã–π –ª–∏—Å—Ç",
        "width": 140,
        "height": 200,
        "color": "—Å–µ—Ä—ã–π",
        "count": 1,
        "used": 0
    }]

    # –°–æ–∑–¥–∞–µ–º 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–≤—Ä–∞ Admiral
    priority1_polygons = []
    dxf_file = Path('data/–õ–æ–¥–∫–∞ ADMIRAL 340/1.dxf')
    try:
        polygon_data = parse_dxf_complete(dxf_file.as_posix(), verbose=False)
        if polygon_data and polygon_data.get("combined_polygon"):
            base_polygon = polygon_data["combined_polygon"]
            for i in range(1, 4):
                priority1_polygons.append(
                    Carpet(base_polygon, f"{dxf_file.name}_–∫–æ–ø–∏—è_{i}", "—Å–µ—Ä—ã–π", f"group_{i}", 1)
                )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
        return []

    placed_layouts, unplaced = bin_packing_with_inventory(
        priority1_polygons,
        available_sheets,
        verbose=True,
    )

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(priority1_polygons) - len(unplaced)}/{len(priority1_polygons)}")
    print(f"üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")

    if placed_layouts:
        print(f"\nüìÑ –î–ï–¢–ê–õ–ò –ü–û –õ–ò–°–¢–ê–ú:")
        for i, layout in enumerate(placed_layouts, 1):
            carpet_count = len(layout.placed_polygons)
            usage = layout.usage_percent
            print(f"   –õ–∏—Å—Ç {i}: {carpet_count} –∫–æ–≤—Ä–∏–∫–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–ª—ã - –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –ø–ª–æ—Ç–Ω–æ–π —Å—Ç—ã–∫–æ–≤–∫–∏
            angles = [p.angle for p in layout.placed_polygons]
            print(f"   –£–≥–ª—ã: {angles}")

            # –í—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —É–≥–æ–ª
            if len(set(angles)) > 1:
                print(f"   ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: —Ä–∞–∑–Ω—ã–µ —É–≥–ª—ã –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–≤—Ä–æ–≤!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert len(unplaced) == 0, f"–í—Å–µ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω—ã, –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {len(unplaced)}"
    assert len(placed_layouts) == 1, f"–ù—É–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ 1 –ª–∏—Å—Ç–µ: {len(placed_layouts)}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–≤—Ä—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —É–≥–æ–ª –¥–ª—è –ø–ª–æ—Ç–Ω–æ–π —Å—Ç—ã–∫–æ–≤–∫–∏
    if placed_layouts:
        angles = [p.angle for p in placed_layouts[0].placed_polygons]
        unique_angles = set(angles)
        assert len(unique_angles) == 1, f"–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–≤—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —É–≥–æ–ª, –Ω–æ —É–≥–ª—ã: {angles}"

    print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: {len(priority1_polygons)} –∫–æ–≤—Ä–æ–≤ –Ω–∞ 1 –ª–∏—Å—Ç–µ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —É–≥–ª–æ–º")

    return {
        'sheets_used': len(placed_layouts),
        'carpets_placed': len(priority1_polygons) - len(unplaced),
        'carpets_total': len(priority1_polygons),
    }
