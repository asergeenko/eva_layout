#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É –∫—Ä–∞–µ–≤.
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
"""

import sys
import os

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Polygon as MplPolygon

from dxf_utils import parse_dxf_complete
from excel_loader import (
    load_excel_file,
    parse_orders_from_excel,
    find_dxf_files_for_article,
)

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import (
    bin_packing_with_inventory,
    Carpet,
)


def visualize_layout(layout, sheet_width, sheet_height, filename):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
    fig, ax = plt.subplots(figsize=(12, 16))

    # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
    sheet_rect = patches.Rectangle(
        (0, 0),
        sheet_width,
        sheet_height,
        linewidth=2,
        edgecolor="black",
        facecolor="lightcyan",
        alpha=0.3,
    )
    ax.add_patch(sheet_rect)

    # –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∫–æ–≤—Ä—ã
    for carpet in layout.placed_polygons:
        poly_coords = list(carpet.polygon.exterior.coords)
        color = {"—á—ë—Ä–Ω—ã–π": "gray", "—Å–µ—Ä—ã–π": "lightgray", "–±–µ–∂–µ–≤—ã–π": "wheat"}.get(
            carpet.color, "blue"
        )

        polygon = MplPolygon(
            poly_coords,
            closed=True,
            edgecolor="black",
            facecolor=color,
            alpha=0.6,
            linewidth=1,
        )
        ax.add_patch(polygon)

        # –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        bounds = carpet.polygon.bounds
        cx = (bounds[0] + bounds[2]) / 2
        cy = (bounds[1] + bounds[3]) / 2
        ax.text(
            cx,
            cy,
            carpet.filename.split("_")[0],
            ha="center",
            va="center",
            fontsize=6,
            weight="bold",
        )

    ax.set_xlim(-10, sheet_width + 10)
    ax.set_ylim(-10, sheet_height + 10)
    ax.set_aspect("equal")
    ax.set_title(
        f"–†–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ –ª–∏—Å—Ç–µ {sheet_width} x {sheet_height} –º–º\n"
        f"{len(layout.placed_polygons)} –∫–æ–≤—Ä–æ–≤, {layout.usage_percent:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
        fontsize=10,
    )
    ax.set_xlabel("–®–∏—Ä–∏–Ω–∞ (–º–º)", fontsize=8)
    ax.set_ylabel("–í—ã—Å–æ—Ç–∞ (–º–º)", fontsize=8)
    ax.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig(filename, dpi=150, bbox_inches="tight")
    plt.close()
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")


# –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ 140x200
available_sheets = [
    {
        "name": "–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç",
        "width": 140,
        "height": 200,
        "color": "—á—ë—Ä–Ω—ã–π",
        "count": 20,
        "used": 0,
    }
]

print("üìÑ –°–æ–∑–¥–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: 20 —á–µ—Ä–Ω—ã—Ö 140x200")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Excel
excel_data = load_excel_file(open("tests/sample_input_test.xlsx", "rb").read())
orders = parse_orders_from_excel(excel_data)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã - —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ
polygons = []
for order in orders:
    order_id = order["order_id"]
    article = order["article"]
    product_name = order["product"]
    color = order["color"]

    # –¢–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if color != "—á—ë—Ä–Ω—ã–π":
        continue

    # –ò—â–µ–º DXF —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    dxf_files = find_dxf_files_for_article(article, product_name)

    if dxf_files:
        for dxf_file in dxf_files:
            try:
                polygon_data = parse_dxf_complete(dxf_file, verbose=False)
                if polygon_data and polygon_data.get("combined_polygon"):
                    polygon = polygon_data["combined_polygon"]
                    filename = os.path.basename(dxf_file)
                    unique_filename = (
                        f"{product_name}_{os.path.splitext(filename)[0]}.dxf"
                    )
                    polygons.append(
                        Carpet(polygon, unique_filename, color, order_id, 1)
                    )
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {dxf_file}: {e}")
                continue

print(f"üìä –í—Å–µ–≥–æ —á–µ—Ä–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤: {len(polygons)}")

# –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
placed_layouts, unplaced = bin_packing_with_inventory(
    polygons,
    available_sheets,
    verbose=False,
)

print(f"üìÑ –†–∞–∑–º–µ—â–µ–Ω–æ –Ω–∞ {len(placed_layouts)} –ª–∏—Å—Ç–∞—Ö")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ª–∏—Å—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
os.makedirs("tmp_test/improved", exist_ok=True)
for i, layout in enumerate(placed_layouts[:3], 1):
    visualize_layout(layout, 140, 200, f"tmp_test/improved/{i}.png")

print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ tmp_test/improved/*.png")
print("–°—Ä–∞–≤–Ω–∏—Ç–µ —Å tmp_test/bad_middle/*.png")
