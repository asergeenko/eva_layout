#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ tests/sample_input_test.xlsx –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
"""

import sys
import os
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import (
    parse_dxf_complete,
    bin_packing_with_inventory,
    Carpet,
)
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def main():
    print("=== –¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    excel_path = "tests/sample_input_test.xlsx"
    if not os.path.exists(excel_path):
        print(f"‚ùå –§–∞–π–ª {excel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ß–∏—Ç–∞–µ–º Excel
    print(f"üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {excel_path}")
    df = pd.read_excel(excel_path, sheet_name='ZAKAZ')
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–º –∫–æ–ª–æ–Ω–∫–∏
    header_row = df.iloc[0]
    df.columns = [str(header_row[i]) if pd.notna(header_row[i]) else f'col_{i}' for i in range(len(header_row))]
    df = df[1:].reset_index(drop=True)  # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    
    print(f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(df)}")
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 15 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã)
    test_orders = df.head(15).copy()
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {len(test_orders)} –∑–∞–∫–∞–∑–∞–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    available_sheets = [
        {
            "name": "–ß–µ—Ä–Ω—ã–π –ª–∏—Å—Ç 140x200",
            "width": 140,
            "height": 200,
            "color": "—á—ë—Ä–Ω—ã–π", 
            "count": 5,
            "used": 0
        },
        {
            "name": "–°–µ—Ä—ã–π –ª–∏—Å—Ç 140x200",
            "width": 140,
            "height": 200,
            "color": "—Å–µ—Ä—ã–π",
            "count": 5,
            "used": 0
        }
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    polygons = []
    orders_info = []
    
    for idx, row in test_orders.iterrows():
        order_id = f"ZAKAZ_row_{idx + 2}"  # +2 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤ –ª–æ–≥–∞—Ö
        article = row['–ê—Ä—Ç–∏–∫—É–ª']
        product_name = row['–¢–û–í–ê–†']
        order_type = article.split('+')[0] if '+' in str(article) else "unknown"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (12=—á–µ—Ä–Ω—ã–π, 11=—Å–µ—Ä—ã–π)
        color = '—á—ë—Ä–Ω—ã–π'
        if '+12' in str(article):
            color = '—á—ë—Ä–Ω—ã–π'
        elif '+11' in str(article):
            color = '—Å–µ—Ä—ã–π'
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ DXF —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        try:
            dxf_files = []
            # –ò—â–µ–º –≤ –ø–∞–ø–∫–∞—Ö –ø–æ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞
            for root, dirs, files in os.walk("dxf_samples"):
                if product_name.upper() in root.upper():
                    for file in files:
                        if file.endswith('.dxf'):
                            dxf_files.append(os.path.join(root, file))
                            if len(dxf_files) >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
                                break
                    if dxf_files:
                        break
            
            if not dxf_files:
                # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ DXF
                polygon_count = min(5, len(article.split('+')))  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                for i in range(polygon_count):
                    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
                    from shapely.geometry import Polygon
                    poly = Polygon([(0, 0), (200, 0), (200, 150), (0, 150)])
                    filename = f"{product_name}_{i+1}.dxf"
                    polygons.append(Carpet(poly, filename, color, order_id))
                
                orders_info.append({
                    'order_id': order_id,
                    'files_count': polygon_count,
                    'color': color,
                    'synthetic': True
                })
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ DXF —Ñ–∞–π–ª—ã
                for dxf_file in dxf_files[:3]:  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                    try:
                        polygon_data = parse_dxf_complete(dxf_file)
                        if polygon_data and polygon_data[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–∏–≥–æ–Ω —Å–æ–∑–¥–∞–Ω
                            polygon = polygon_data[0]
                            filename = os.path.basename(dxf_file)
                            polygons.append(Carpet(polygon, filename, color, order_id))
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {dxf_file}: {e}")
                        continue
                
                orders_info.append({
                    'order_id': order_id,
                    'files_count': len([p for p in polygons if p[3] == order_id]),
                    'color': color,
                    'synthetic': False
                })
        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            continue
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ {len(orders_info)} –∑–∞–∫–∞–∑–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö
    for order_info in orders_info:
        synthetic_mark = " (—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π)" if order_info['synthetic'] else ""
        print(f"  {order_info['order_id']}: {order_info['files_count']} —Ñ–∞–π–ª–æ–≤, —Ü–≤–µ—Ç {order_info['color']}{synthetic_mark}")
    

    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\n=== –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò (MAX_SHEETS_PER_ORDER=5) ===")
    MAX_SHEETS_PER_ORDER = 5
    
    placed_layouts, unplaced = bin_packing_with_inventory(
        polygons,
        available_sheets,
        verbose=False,
        max_sheets_per_order=MAX_SHEETS_PER_ORDER,
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    print(f"–†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")
    
    print("\n–î–µ—Ç–∞–ª–∏ –ø–æ –ª–∏—Å—Ç–∞–º:")
    single_polygon_sheets = 0
    for i, layout in enumerate(placed_layouts, 1):
        poly_count = len(layout['placed_polygons'])
        usage = layout.get('usage_percent', 0)
        orders_on_sheet = layout.get('orders_on_sheet', set())
        print(f"  –õ–∏—Å—Ç {i}: {poly_count} –ø–æ–ª–∏–≥–æ–Ω–æ–≤, {usage:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–∞–∫–∞–∑—ã: {', '.join(sorted(orders_on_sheet))}")
        if poly_count <= 2:
            single_polygon_sheets += 1
    
    # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    total_polygons = len(polygons) - len(unplaced)
    efficiency_ok = single_polygon_sheets <= 2  # –ú–∞–∫—Å–∏–º—É–º 2 –ª–∏—Å—Ç–∞ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    
    if efficiency_ok:
        print("\n‚úÖ –ê–õ–ì–û–†–ò–¢–ú –†–ê–ë–û–¢–ê–ï–¢ –≠–§–§–ï–ö–¢–ò–í–ù–û")
        print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ {total_polygons} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ {len(placed_layouts)} –ª–∏—Å—Ç–∞—Ö")
        print(f"   –õ–∏—Å—Ç–æ–≤ —Å –º–∞–ª—ã–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º: {single_polygon_sheets} (–ø—Ä–∏–µ–º–ª–µ–º–æ)")
    else:
        print("\n‚ùå –ê–õ–ì–û–†–ò–¢–ú –ù–ï–≠–§–§–ï–ö–¢–ò–í–ï–ù")
        print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ {total_polygons} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –Ω–∞ {len(placed_layouts)} –ª–∏—Å—Ç–∞—Ö")
        print(f"   –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–∏—Å—Ç–æ–≤ —Å –º–∞–ª—ã–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º: {single_polygon_sheets}")

if __name__ == "__main__":
    main()