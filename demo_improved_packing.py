#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–≤—Ä–∏–∫–æ–≤.
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–æ–≤.
"""

import sys
import os
import logging
from shapely.geometry import Polygon
from layout_optimizer import Carpet, bin_packing
from improved_packing import improved_bin_packing

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_test_carpets():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–≤—Ä–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ñ–æ—Ä–º."""
    carpets = []
    
    # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ª–∏—Å—Ç–∞ 140x200)
    sizes = [
        (300, 200, "–°—Ä–µ–¥–Ω–∏–π –∫–æ–≤—Ä–∏–∫"),      # 30x20 —Å–º
        (400, 150, "–î–ª–∏–Ω–Ω—ã–π –∫–æ–≤—Ä–∏–∫"),      # 40x15 —Å–º  
        (200, 250, "–í—ã—Å–æ–∫–∏–π –∫–æ–≤—Ä–∏–∫"),      # 20x25 —Å–º
        (350, 180, "–ë–æ–ª—å—à–æ–π –∫–æ–≤—Ä–∏–∫"),      # 35x18 —Å–º
        (180, 180, "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ–≤—Ä–∏–∫"),   # 18x18 —Å–º
        (250, 120, "–ö–æ–≤—Ä–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"), # 25x12 —Å–º
        (320, 160, "–®–∏—Ä–æ–∫–∏–π –∫–æ–≤—Ä–∏–∫"),      # 32x16 —Å–º
        (150, 150, "–ú–∞–ª–µ–Ω—å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç"),   # 15x15 —Å–º
        (280, 140, "–£–∑–∫–∏–π –∫–æ–≤—Ä–∏–∫"),        # 28x14 —Å–º
        (200, 180, "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–≤—Ä–∏–∫"),   # 20x18 —Å–º
        (160, 200, "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–≤—Ä–∏–∫"), # 16x20 —Å–º
        (240, 130, "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –∫–æ–≤—Ä–∏–∫"), # 24x13 —Å–º
    ]
    
    # –°–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—ã (L-–æ–±—Ä–∞–∑–Ω—ã–µ, –≤—ã—Ä–µ–∑—ã) - —É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    complex_shapes = [
        # L-–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–≤—Ä–∏–∫ 
        ([(0, 0), (250, 0), (250, 120), (120, 120), (120, 200), (0, 200)], "L-–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–≤—Ä–∏–∫"),
        # –ö–æ–≤—Ä–∏–∫ —Å –Ω–µ–±–æ–ª—å—à–∏–º –≤—ã—Ä–µ–∑–æ–º
        ([(0, 0), (300, 0), (300, 180), (0, 180), (0, 0), (80, 60), (80, 120), (220, 120), (220, 60), (80, 60)], "–ö–æ–≤—Ä–∏–∫ —Å –≤—ã—Ä–µ–∑–æ–º"),
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏
    for i, (width, height, name) in enumerate(sizes):
        polygon = Polygon([(0, 0), (width, 0), (width, height), (0, height)])
        carpets.append(Carpet(polygon, f"{name}_{i+1}.dxf", "—á–µ—Ä–Ω—ã–π", f"order_{i+1}", 1))
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏
    for i, (coords, name) in enumerate(complex_shapes):
        polygon = Polygon(coords)
        carpets.append(Carpet(polygon, f"{name}_{i+1}.dxf", "—á–µ—Ä–Ω—ã–π", f"complex_{i+1}", 1))
    
    return carpets

def calculate_utilization(placed_polygons, sheet_size):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞."""
    if not placed_polygons:
        return 0.0
    
    total_area = sum(p[0].area for p in placed_polygons)
    sheet_area = (sheet_size[0] * 10) * (sheet_size[1] * 10)  # Convert to mm¬≤
    return (total_area / sheet_area) * 100

def demo_packing_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤."""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    carpets = create_test_carpets()
    sheet_size = (140, 200)  # 140x200 —Å–º
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(carpets)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–≤—Ä–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –ª–∏—Å—Ç–µ {sheet_size[0]}x{sheet_size[1]} —Å–º\n")
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    print("üîß –¢–ï–°–¢ 1: –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú")
    print("-" * 40)
    import time
    start_time = time.time()
    
    placed_standard, unplaced_standard = bin_packing(carpets, sheet_size, verbose=False)
    
    standard_time = time.time() - start_time
    standard_utilization = calculate_utilization(placed_standard, sheet_size)
    
    print(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed_standard)}/{len(carpets)} –∫–æ–≤—Ä–∏–∫–æ–≤")
    print(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {standard_utilization:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞")
    print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {standard_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚ùå –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced_standard)} –∫–æ–≤—Ä–∏–∫–æ–≤\n")
    
    # –¢–µ—Å—Ç 2: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    print("üöÄ –¢–ï–°–¢ 2: –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú")
    print("-" * 40)
    start_time = time.time()
    
    placed_improved, unplaced_improved = improved_bin_packing(carpets, sheet_size, verbose=False)
    
    improved_time = time.time() - start_time
    improved_utilization = calculate_utilization(placed_improved, sheet_size)
    
    print(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed_improved)}/{len(carpets)} –∫–æ–≤—Ä–∏–∫–æ–≤")
    print(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {improved_utilization:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞")
    print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {improved_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚ùå –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced_improved)} –∫–æ–≤—Ä–∏–∫–æ–≤\n")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    placement_improvement = len(placed_improved) - len(placed_standard)
    utilization_improvement = improved_utilization - standard_utilization
    time_ratio = improved_time / standard_time if standard_time > 0 else float('inf')
    
    if placement_improvement > 0:
        print(f"üéØ –†–∞–∑–º–µ—â–µ–Ω–∏–µ: +{placement_improvement} –∫–æ–≤—Ä–∏–∫–æ–≤ ({(placement_improvement/len(carpets)*100):.1f}% —É–ª—É—á—à–µ–Ω–∏–µ)")
    elif placement_improvement < 0:
        print(f"‚ö†Ô∏è  –†–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_improvement} –∫–æ–≤—Ä–∏–∫–æ–≤ ({abs(placement_improvement/len(carpets)*100):.1f}% —Ö—É–∂–µ)")
    else:
        print("üü¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ: –û–¥–∏–Ω–∞–∫–æ–≤–æ")
    
    if utilization_improvement > 1:
        print(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +{utilization_improvement:.1f}% –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞")
    elif utilization_improvement < -1:
        print(f"üìâ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {abs(utilization_improvement):.1f}% —Ö—É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞")
    else:
        print("üü¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ü—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ")
    
    if time_ratio > 1.5:
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: –í {time_ratio:.1f}x —Ä–∞–∑ –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
    elif time_ratio < 0.7:
        print(f"‚ö° –í—Ä–µ–º—è: –í {1/time_ratio:.1f}x —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ")
    else:
        print("üü¢ –í—Ä–µ–º—è: –°–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ")
    
    print("\n" + "=" * 50)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if placement_improvement > 0 or utilization_improvement > 2:
        if time_ratio < 3:
            print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            print("   –ø—Ä–∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        else:
            print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ª—É—á—à–µ, –Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ.")
            print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤.")
    else:
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω")
        print("   –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–æ–≤—Ä–∏–∫–æ–≤.")
    
    return {
        'standard': {
            'placed': len(placed_standard),
            'utilization': standard_utilization,
            'time': standard_time
        },
        'improved': {
            'placed': len(placed_improved), 
            'utilization': improved_utilization,
            'time': improved_time
        }
    }

if __name__ == "__main__":
    try:
        results = demo_packing_comparison()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    print(f"\nüèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")