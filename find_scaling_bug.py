#!/usr/bin/env python3
"""
–ò—â–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Ä—è–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–± - –ø–æ—à–∞–≥–æ–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é
"""

import sys
sys.path.insert(0, '.')

import ezdxf
from layout_optimizer import convert_entity_to_polygon_improved, parse_dxf_complete
import os

def find_scaling_bug():
    """–ü–æ—à–∞–≥–æ–≤–æ –Ω–∞—Ö–æ–¥–∏–º –≥–¥–µ —Ç–µ—Ä—è–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä"""
    print("üîç –ü–û–ò–°–ö –ú–ï–°–¢–ê –ü–û–¢–ï–†–ò –ú–ê–°–®–¢–ê–ë–ê")
    print("=" * 60)
    
    tank_file = "dxf_samples/TANK 300/1.dxf"
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –®–ê–ì 1: –ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ DXF
    print(f"\nüìã –®–ê–ì 1: –ò–°–•–û–î–ù–´–ï –†–ê–ó–ú–ï–†–´ –í DXF")
    try:
        doc = ezdxf.readfile(tank_file)
        modelspace = doc.modelspace()
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã
        all_x, all_y = [], []
        entities = list(modelspace)
        
        for entity in entities:
            try:
                bbox = entity.bbox()
                if bbox:
                    all_x.extend([bbox.extmin.x, bbox.extmax.x])
                    all_y.extend([bbox.extmin.y, bbox.extmax.y])
            except:
                pass
        
        if all_x and all_y:
            original_width = max(all_x) - min(all_x)
            original_height = max(all_y) - min(all_y)
            print(f"  –ò—Å—Ö–æ–¥–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã: {original_width:.2f}√ó{original_height:.2f} –µ–¥–∏–Ω–∏—Ü")
            print(f"  –î–∏–∞–ø–∞–∑–æ–Ω X: {min(all_x):.2f} - {max(all_x):.2f}")
            print(f"  –î–∏–∞–ø–∞–∑–æ–Ω Y: {min(all_y):.2f} - {max(all_y):.2f}")
            
            # –®–ê–ì 2: –ü–æ—Å–ª–µ convert_entity_to_polygon_improved –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            print(f"\nüîÑ –®–ê–ì 2: –ü–û–°–õ–ï –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –û–¢–î–ï–õ–¨–ù–´–• –û–ë–™–ï–ö–¢–û–í")
            
            converted_polygons = []
            for i, entity in enumerate(entities):
                try:
                    polygon = convert_entity_to_polygon_improved(entity)
                    if polygon and not polygon.is_empty:
                        bounds = polygon.bounds
                        width = bounds[2] - bounds[0]
                        height = bounds[3] - bounds[1]
                        converted_polygons.append(polygon)
                        print(f"    –û–±—ä–µ–∫—Ç {i+1} ({entity.dxftype()}): {width:.2f}√ó{height:.2f}")
                        print(f"      Bounds: {bounds}")
                        
                        if i == 0:  # –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ
                            print(f"      üéØ –ü–ï–†–í–´–ô –û–ë–™–ï–ö–¢ –î–ï–¢–ê–õ–¨–ù–û:")
                            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º bbox
                            orig_bbox = entity.bbox()
                            if orig_bbox:
                                orig_w = orig_bbox.extmax.x - orig_bbox.extmin.x
                                orig_h = orig_bbox.extmax.y - orig_bbox.extmin.y
                                print(f"        –ò—Å—Ö–æ–¥–Ω—ã–π bbox: {orig_w:.2f}√ó{orig_h:.2f}")
                                print(f"        –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {width:.2f}√ó{height:.2f}")
                                scale_factor = width / orig_w if orig_w > 0 else 1
                                print(f"        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: {scale_factor:.6f}")
                        
                        if i >= 5:  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                            break
                            
                except Exception as e:
                    print(f"    –û–±—ä–µ–∫—Ç {i+1}: –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - {e}")
            
            # –®–ê–ì 3: –ü–æ–ª–Ω—ã–π parse_dxf_complete
            print(f"\nüì¶ –®–ê–ì 3: –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì parse_dxf_complete")
            result = parse_dxf_complete(tank_file)
            if 'polygons' in result and result['polygons']:
                poly = result['polygons'][0]
                bounds = poly.bounds
                final_width = bounds[2] - bounds[0]
                final_height = bounds[3] - bounds[1]
                print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞: {final_width:.2f}√ó{final_height:.2f}")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º
                if converted_polygons:
                    conv_bounds = converted_polygons[0].bounds
                    conv_width = conv_bounds[2] - conv_bounds[0]
                    conv_height = conv_bounds[3] - conv_bounds[1]
                    
                    print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï:")
                    print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π DXF: {original_width:.2f}√ó{original_height:.2f}")
                    print(f"  –ü–æ—Å–ª–µ convert_entity_to_polygon_improved: {conv_width:.2f}√ó{conv_height:.2f}")
                    print(f"  –ü–æ—Å–ª–µ parse_dxf_complete: {final_width:.2f}√ó{final_height:.2f}")
                    
                    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    scale1 = conv_width / original_width if original_width > 0 else 1
                    scale2 = final_width / conv_width if conv_width > 0 else 1
                    scale_total = final_width / original_width if original_width > 0 else 1
                    
                    print(f"\nüìä –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø:")
                    print(f"  DXF ‚Üí convert_entity: √ó{scale1:.6f}")
                    print(f"  convert_entity ‚Üí parse_complete: √ó{scale2:.6f}")
                    print(f"  –û–±—â–∏–π: √ó{scale_total:.6f}")
                    
                    if scale1 < 0.1:
                        print(f"  ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –ü–û–¢–ï–†–Ø –ú–ê–°–®–¢–ê–ë–ê –≤ convert_entity_to_polygon_improved!")
                    elif scale2 < 0.1:
                        print(f"  ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –ü–û–¢–ï–†–Ø –ú–ê–°–®–¢–ê–ë–ê –≤ parse_dxf_complete!")
                    elif scale_total < 0.1:
                        print(f"  ‚ö†Ô∏è –û–ë–©–ê–Ø –ü–û–¢–ï–†–Ø –ú–ê–°–®–¢–ê–ë–ê —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    find_scaling_bug()