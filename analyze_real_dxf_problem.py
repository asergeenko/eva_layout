#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ DXF —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

import ezdxf
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon as MPLPolygon
import numpy as np
from io import BytesIO

def analyze_real_dxf_file():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π DXF —Ñ–∞–π–ª."""
    print("=== –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û DXF –§–ê–ô–õ–ê ===")
    
    dxf_path = "/home/sasha/proj/2025/eva_layout/200_140_1_black.dxf"
    
    try:
        # –ß–∏—Ç–∞–µ–º DXF —Ñ–∞–π–ª
        doc = ezdxf.readfile(dxf_path)
        msp = doc.modelspace()
        
        print(f"üìÅ –§–∞–π–ª: {dxf_path}")
        print(f"üìè DXF –≤–µ—Ä—Å–∏—è: {doc.dxfversion}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        all_entities = list(msp)
        print(f"üî¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DXF: {len(all_entities)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        entity_types = {}
        for entity in all_entities:
            entity_type = entity.dxftype()
            entity_types[entity_type] = entity_types.get(entity_type, 0) + 1
        
        print("üìã –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for etype, count in entity_types.items():
            print(f"  {etype}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º LWPOLYLINES (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–µ—Ç–∞–ª–µ–π)
        polylines = [e for e in all_entities if e.dxftype() == 'LWPOLYLINE']
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ {len(polylines)} polylines:")
        
        # –ò—â–µ–º sheet boundary –∏ –¥–µ—Ç–∞–ª–∏
        sheet_boundary = None
        part_polylines = []
        
        for i, polyline in enumerate(polylines):
            layer = getattr(polyline.dxf, 'layer', 'UNKNOWN')
            points = list(polyline.get_points())
            
            if not points:
                continue
                
            xs = [p[0] for p in points]
            ys = [p[1] for p in points]
            bounds = (min(xs), min(ys), max(xs), max(ys))
            width = bounds[2] - bounds[0]
            height = bounds[3] - bounds[1]
            
            print(f"  Polyline {i+1}: layer='{layer}'")
            print(f"    –¢–æ—á–µ–∫: {len(points)}")
            print(f"    Bounds: {bounds}")
            print(f"    –†–∞–∑–º–µ—Ä—ã: {width:.1f} x {height:.1f}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ sheet boundary –∏–ª–∏ –¥–µ—Ç–∞–ª—å
            if 'BOUNDARY' in layer.upper() or (width > 1500 and height > 1500):
                print(f"    üî≤ SHEET BOUNDARY")
                sheet_boundary = polyline
            else:
                print(f"    üß© –î–ï–¢–ê–õ–¨")
                part_polylines.append((polyline, layer, bounds))
        
        if sheet_boundary:
            sheet_points = list(sheet_boundary.get_points())
            sheet_xs = [p[0] for p in sheet_points]
            sheet_ys = [p[1] for p in sheet_points] 
            sheet_bounds = (min(sheet_xs), min(sheet_ys), max(sheet_xs), max(sheet_ys))
            sheet_width = sheet_bounds[2] - sheet_bounds[0]
            sheet_height = sheet_bounds[3] - sheet_bounds[1]
            
            print(f"\nüìê –õ–∏—Å—Ç: {sheet_width:.0f} x {sheet_height:.0f} –º–º")
            print(f"   Bounds: {sheet_bounds}")
        
        print(f"\nüß© –ù–∞–π–¥–µ–Ω–æ {len(part_polylines)} –¥–µ—Ç–∞–ª–µ–π:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–∞–ª–µ–π
        problems = []
        
        for i, (polyline, layer, bounds) in enumerate(part_polylines):
            x_min, y_min, x_max, y_max = bounds
            width = x_max - x_min
            height = y_max - y_min
            
            print(f"  –î–µ—Ç–∞–ª—å {i+1} ({layer}):")
            print(f"    –ü–æ–∑–∏—Ü–∏—è: ({x_min:.1f}, {y_min:.1f})")
            print(f"    –†–∞–∑–º–µ—Ä—ã: {width:.1f} x {height:.1f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            if x_min < -10 or y_min < -10:
                problems.append(f"–î–µ—Ç–∞–ª—å {i+1} –∏–º–µ–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x_min:.1f}, {y_min:.1f})")
            
            if sheet_boundary:
                if x_max > sheet_bounds[2] + 10 or y_max > sheet_bounds[3] + 10:
                    problems.append(f"–î–µ—Ç–∞–ª—å {i+1} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
            for j, (other_polyline, other_layer, other_bounds) in enumerate(part_polylines[i+1:], i+1):
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è bounding boxes
                if not (bounds[2] <= other_bounds[0] or bounds[0] >= other_bounds[2] or 
                       bounds[3] <= other_bounds[1] or bounds[1] >= other_bounds[3]):
                    problems.append(f"–î–µ—Ç–∞–ª–∏ {i+1} –∏ {j+1} –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ø–æ bounding box")
        
        print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}")
        for problem in problems:
            print(f"  üî¥ {problem}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é DXF
        create_dxf_visualization(part_polylines, sheet_boundary)
        
        return len(problems) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ DXF: {e}")
        return False

def create_dxf_visualization(part_polylines, sheet_boundary):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ DXF —Ñ–∞–π–ª–∞."""
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ DXF...")
    
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # –†–∏—Å—É–µ–º –ª–∏—Å—Ç (boundary)
    if sheet_boundary:
        sheet_points = list(sheet_boundary.get_points())
        sheet_coords = [(p[0], p[1]) for p in sheet_points]
        sheet_patch = MPLPolygon(sheet_coords, fill=False, edgecolor='black', linewidth=2, linestyle='--')
        ax.add_patch(sheet_patch)
    
    # –†–∏—Å—É–µ–º –¥–µ—Ç–∞–ª–∏
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray']
    
    for i, (polyline, layer, bounds) in enumerate(part_polylines):
        points = list(polyline.get_points())
        coords = [(p[0], p[1]) for p in points if len(p) >= 2]
        
        if coords:
            color = colors[i % len(colors)]
            patch = MPLPolygon(coords, alpha=0.7, facecolor=color, edgecolor='black', linewidth=1)
            ax.add_patch(patch)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
            center_x = sum(c[0] for c in coords) / len(coords)
            center_y = sum(c[1] for c in coords) / len(coords)
            ax.annotate(f"{i+1}\\n{layer[:10]}", (center_x, center_y), 
                       ha='center', va='center', fontsize=8, weight='bold')
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
    ax.set_aspect('equal')
    ax.grid(True, alpha=0.3)
    ax.set_title("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ DXF —Ñ–∞–π–ª–∞ (200_140_1_black.dxf)")
    ax.set_xlabel("X (–º–º)")
    ax.set_ylabel("Y (–º–º)")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ–º –º–∞—Å—à—Ç–∞–±
    all_coords = []
    if sheet_boundary:
        sheet_points = list(sheet_boundary.get_points())
        all_coords.extend([(p[0], p[1]) for p in sheet_points])
    
    for polyline, _, _ in part_polylines:
        points = list(polyline.get_points())
        all_coords.extend([(p[0], p[1]) for p in points if len(p) >= 2])
    
    if all_coords:
        xs = [c[0] for c in all_coords]
        ys = [c[1] for c in all_coords]
        margin = 50  # 50–º–º –∑–∞–ø–∞—Å
        ax.set_xlim(min(xs) - margin, max(xs) + margin)
        ax.set_ylim(min(ys) - margin, max(ys) + margin)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    output_path = "/home/sasha/proj/2025/eva_layout/dxf_actual_content.png"
    plt.savefig(output_path, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")

if __name__ == "__main__":
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ DXF —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
    print("=" * 60)
    
    success = analyze_real_dxf_file()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ DXF —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print("‚ùå –í DXF —Ñ–∞–π–ª–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!")
    
    print("\n–°—Ä–∞–≤–Ω–∏—Ç–µ:")
    print("  - visualization.png (–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
    print("  - dxf_actual_content.png (—Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ DXF)")
    print("  - autodesk.png (–∫–∞–∫ –≤–∏–¥–∏—Ç Autodesk Viewer)")