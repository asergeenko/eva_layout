#!/usr/bin/env python3

import ezdxf
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from shapely.geometry import Polygon
import os

def check_inter_file_overlaps():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ú–ï–ñ–î–£ —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    
    print("=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô –ú–ï–ñ–î–£ –§–ê–ô–õ–ê–ú–ò ===")
    
    dxf_file = "200_140_1_black.dxf"
    
    if not os.path.exists(dxf_file):
        print(f"‚ùå –§–∞–π–ª {dxf_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        doc = ezdxf.readfile(dxf_file)
        msp = doc.modelspace()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º
        files_data = {}
        
        for entity in msp:
            if entity.dxftype() == 'SPLINE':
                layer = getattr(entity.dxf, 'layer', '0')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª–æ—è
                # –§–æ—Ä–º–∞—Ç: "dxf_samples_TANK_300_1_layer 1" -> —Ñ–∞–π–ª "1"
                source_file = "unknown"
                if "dxf_samples_TANK_300_" in layer:
                    parts = layer.split("_")
                    for i, part in enumerate(parts):
                        if part == "300" and i + 1 < len(parts):
                            source_file = parts[i + 1]
                            break
                
                if source_file not in files_data:
                    files_data[source_file] = []
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º control points –∏ —Å–æ–∑–¥–∞–µ–º polygon
                if hasattr(entity, 'control_points') and entity.control_points:
                    points = []
                    for cp in entity.control_points:
                        if hasattr(cp, 'x') and hasattr(cp, 'y'):
                            points.append((cp.x, cp.y))
                        elif len(cp) >= 2:
                            points.append((float(cp[0]), float(cp[1])))
                    
                    if len(points) >= 3:
                        try:
                            polygon = Polygon(points)
                            if polygon.is_valid:
                                files_data[source_file].append({
                                    'polygon': polygon,
                                    'layer': layer,
                                    'bounds': polygon.bounds,
                                    'area': polygon.area
                                })
                        except Exception as e:
                            pass
        
        print(f"\nüìä –§–ê–ô–õ–´ –ù–ê –õ–ò–°–¢–ï:")
        total_elements = 0
        for file_name, elements in files_data.items():
            if elements:
                total_area = sum(elem['area'] for elem in elements)
                print(f"   –§–∞–π–ª {file_name}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {total_area:.0f} –º–º¬≤")
                total_elements += len(elements)
        print(f"   –í—Å–µ–≥–æ: {total_elements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ {len(files_data)} —Ñ–∞–π–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¢–û–õ–¨–ö–û –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô –ú–ï–ñ–î–£ –§–ê–ô–õ–ê–ú–ò:")
        
        inter_file_overlaps = []
        files_list = [f for f in files_data.keys() if f != "unknown" and files_data[f]]
        
        for i in range(len(files_list)):
            for j in range(i + 1, len(files_list)):
                file1 = files_list[i]
                file2 = files_list[j]
                
                elements1 = files_data[file1]
                elements2 = files_data[file2]
                
                file_pair_overlaps = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∞–π–ª–∞ 1 –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∞–π–ª–∞ 2
                for elem1 in elements1:
                    for elem2 in elements2:
                        if elem1['polygon'].intersects(elem2['polygon']):
                            intersection = elem1['polygon'].intersection(elem2['polygon'])
                            if hasattr(intersection, 'area') and intersection.area > 1.0:  # –º–∏–Ω–∏–º—É–º 1 –º–º¬≤
                                file_pair_overlaps.append({
                                    'elem1': elem1,
                                    'elem2': elem2,
                                    'overlap_area': intersection.area,
                                    'intersection': intersection
                                })
                
                if file_pair_overlaps:
                    total_overlap_area = sum(ovl['overlap_area'] for ovl in file_pair_overlaps)
                    print(f"   ‚ùå –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï: –§–∞–π–ª {file1} ‚Üî –§–∞–π–ª {file2}")
                    print(f"      –ù–∞–π–¥–µ–Ω–æ {len(file_pair_overlaps)} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π, –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {total_overlap_area:.1f} –º–º¬≤")
                    inter_file_overlaps.extend(file_pair_overlaps)
                else:
                    print(f"   ‚úÖ OK: –§–∞–π–ª {file1} ‚Üî –§–∞–π–ª {file2}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        create_inter_file_visualization(files_data, inter_file_overlaps)
        
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if inter_file_overlaps:
            total_overlap_area = sum(ovl['overlap_area'] for ovl in inter_file_overlaps)
            print(f"   ‚ùå –ù–ê–ô–î–ï–ù–û {len(inter_file_overlaps)} –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô –ú–ï–ñ–î–£ –§–ê–ô–õ–ê–ú–ò!")
            print(f"   üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: {total_overlap_area:.1f} –º–º¬≤")
            print(f"   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–µ–Ω–∏–µ buffer –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
            return False
        else:
            print(f"   ‚úÖ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô –ú–ï–ñ–î–£ –§–ê–ô–õ–ê–ú–ò –ù–ï –ù–ê–ô–î–ï–ù–û!")
            print(f"   üéâ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - —Ñ–∞–π–ª—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def create_inter_file_visualization(files_data, overlaps):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏"""
    
    fig, ax = plt.subplots(1, 1, figsize=(18, 14))
    ax.set_title("Inter-file overlap analysis (only between different source files)", 
                fontsize=16, fontweight='bold')
    
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray']
    color_idx = 0
    
    # –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    legend_elements = []
    for file_name, elements in files_data.items():
        if elements and file_name != "unknown":
            color = colors[color_idx % len(colors)]
            color_idx += 1
            
            # –ù–∞—Ö–æ–¥–∏–º bounding box –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞
            all_bounds = [elem['bounds'] for elem in elements]
            file_min_x = min(b[0] for b in all_bounds)
            file_min_y = min(b[1] for b in all_bounds)
            file_max_x = max(b[2] for b in all_bounds)
            file_max_y = max(b[3] for b in all_bounds)
            
            # –†–∏—Å—É–µ–º –æ–±—â—É—é —Ä–∞–º–∫—É —Ñ–∞–π–ª–∞
            file_width = file_max_x - file_min_x
            file_height = file_max_y - file_min_y
            
            file_rect = patches.Rectangle(
                (file_min_x, file_min_y),
                file_width, file_height,
                linewidth=3,
                edgecolor=color,
                facecolor=color,
                alpha=0.2,
                label=f'File {file_name}'
            )
            ax.add_patch(file_rect)
            
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Ñ–∞–π–ª–∞
            center_x = file_min_x + file_width/2
            center_y = file_min_y + file_height/2
            ax.text(center_x, center_y, f'FILE\n{file_name}', 
                   fontsize=14, fontweight='bold', 
                   ha='center', va='center', color=color,
                   bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8))
    
    # –í—ã–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∫—Ä–∞—Å–Ω—ã–º–∏ –∫—Ä–µ—Å—Ç–∞–º–∏
    for overlap in overlaps:
        intersection = overlap['intersection']
        if hasattr(intersection, 'bounds'):
            bounds = intersection.bounds
            center_x = (bounds[0] + bounds[2]) / 2
            center_y = (bounds[1] + bounds[3]) / 2
            
            # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            ax.plot(center_x, center_y, 'r+', markersize=20, markeredgewidth=4)
            ax.text(center_x, center_y + 50, f'{overlap["overlap_area"]:.0f}mm¬≤', 
                   fontsize=10, ha='center', va='bottom', color='red', fontweight='bold',
                   bbox=dict(boxstyle="round,pad=0.2", facecolor='yellow', alpha=0.8))
    
    # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞ (200x140 —Å–º = 2000x1400 –º–º)
    sheet_rect = patches.Rectangle((0, 0), 2000, 1400, 
                                 linewidth=4, edgecolor='black', 
                                 facecolor='none', linestyle='-')
    ax.add_patch(sheet_rect)
    
    ax.set_xlim(-200, 2200)
    ax.set_ylim(-200, 1600)
    ax.set_aspect('equal')
    ax.grid(True, alpha=0.3)
    ax.legend(loc='upper right')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if overlaps:
        ax.text(1000, -100, f"‚ùå FOUND {len(overlaps)} INTER-FILE OVERLAPS", 
               fontsize=16, fontweight='bold', ha='center', color='red')
    else:
        ax.text(1000, -100, f"‚úÖ NO INTER-FILE OVERLAPS", 
               fontsize=16, fontweight='bold', ha='center', color='green')
    
    plt.tight_layout()
    plt.savefig('autodesk.png', dpi=150, bbox_inches='tight')
    print(f"   üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: autodesk.png")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô –ú–ï–ñ–î–£ –†–ê–ó–ù–´–ú–ò –§–ê–ô–õ–ê–ú–ò")
    print("(–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ - –Ω–æ—Ä–º–∞–ª—å–Ω—ã)")
    
    success = check_inter_file_overlaps()
    
    if success:
        print(f"\nüéâ –£–°–ü–ï–•! –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô –ú–ï–ñ–î–£ –§–ê–ô–õ–ê–ú–ò –ù–ï–¢!")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ autodesk.png –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    else:
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ï–°–¢–¨ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø –ú–ï–ñ–î–£ –§–ê–ô–õ–ê–ú–ò")
        print(f"‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    return success

if __name__ == "__main__":
    main()