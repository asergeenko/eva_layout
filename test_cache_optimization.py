#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ layout_optimizer.py
"""
import time
from shapely.geometry import Polygon
from carpet import Carpet
from layout_optimizer import (
    get_cached_rotation,
    clear_optimization_caches,
    get_cache_stats,
    rotate_polygon
)

def create_test_carpet(coords, carpet_id=1):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–≤–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏."""
    polygon = Polygon(coords)
    return Carpet(
        polygon=polygon,
        filename=f"test_carpet_{carpet_id}.dxf",
        color="—Å–µ—Ä—ã–π",
        order_id="TEST_ORDER",
        carpet_id=carpet_id
    )

def test_carpet_id_uniqueness():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º carpet_id."""
    print("=== –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ carpet_id ===")

    clear_optimization_caches()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–≤—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ carpet_id, –Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
    carpet1 = create_test_carpet([(0, 0), (10, 0), (10, 10), (0, 10), (0, 0)], 1)
    carpet2 = create_test_carpet([(0, 0), (10, 0), (10, 10), (0, 10), (0, 0)], 2)
    carpet3 = create_test_carpet([(0, 0), (10, 0), (10, 10), (0, 10), (0, 0)], 3)

    # –ö–∞–∂–¥—ã–π –∫–æ–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    rot1 = get_cached_rotation(carpet1, 90)
    rot2 = get_cached_rotation(carpet2, 90)
    rot3 = get_cached_rotation(carpet3, 90)

    stats = get_cache_stats()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")

    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∫–æ–≤—Ä–∞ –≤ –∫—ç—à–µ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—ã–π carpet_id)
    assert stats['cached_carpets'] == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –∫–æ–≤—Ä–∞ –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∏–ª–∏ {stats['cached_carpets']}"
    assert stats['cached_rotations'] == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∏–ª–∏ {stats['cached_rotations']}"

    print("‚úÖ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ carpet_id –ø—Ä–æ–π–¥–µ–Ω")

def test_rotation_caching():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–æ–≤."""
    print("\n=== –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ ===")

    clear_optimization_caches()

    carpet = create_test_carpet([(0, 0), (10, 0), (10, 5), (0, 5), (0, 0)])

    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∫—ç—à
    start_time = time.time()
    rotated_90_1 = get_cached_rotation(carpet, 90)
    first_call_time = time.time() - start_time

    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
    start_time = time.time()
    rotated_90_2 = get_cached_rotation(carpet, 90)
    second_call_time = time.time() - start_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert rotated_90_1.equals(rotated_90_2), "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏"

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (—Ö–æ—Ç—è –Ω–∞ —Ç–∞–∫–∏—Ö –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–∞–º–µ—Ç–Ω–∞)
    print(f"–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {first_call_time:.6f}—Å")
    print(f"–í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–∫—ç—à): {second_call_time:.6f}—Å")

    stats = get_cache_stats()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")

    assert stats['cached_rotations'] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç"
    assert stats['cached_carpets'] == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∫–æ–≤–µ—Ä –≤ –∫—ç—à–µ"

    print("‚úÖ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")

def test_multiple_carpets_caching():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–≤—Ä–æ–≤."""
    print("\n=== –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–≤—Ä–æ–≤ ===")

    clear_optimization_caches()

    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–≤—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ carpet_id
    base_coords = [(0, 0), (15, 0), (15, 8), (0, 8), (0, 0)]
    carpets = [create_test_carpet(base_coords, i) for i in range(1, 6)]  # 5 –∫–æ–≤—Ä–æ–≤

    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–≤—Ä—ã –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
    start_time = time.time()
    rotations = [get_cached_rotation(carpet, 90) for carpet in carpets]
    total_time = time.time() - start_time

    # –í—Å–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–æ —Ñ–æ—Ä–º–µ (–Ω–æ —Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∫—ç—à–µ)
    assert all(rot.equals(rotations[0]) for rot in rotations), "–í—Å–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–æ —Ñ–æ—Ä–º–µ"

    stats = get_cache_stats()
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(carpets)} –∫–æ–≤—Ä–æ–≤ –∑–∞ {total_time:.6f}—Å")
    print(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤: {stats['cached_carpets']}")
    print(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤: {stats['cached_rotations']}")

    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 –∫–æ–≤—Ä–æ–≤ –≤ –∫—ç—à–µ (–∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–∏–º carpet_id)
    assert stats['cached_carpets'] == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 –∫–æ–≤—Ä–æ–≤ –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∏–ª–∏ {stats['cached_carpets']}"
    assert stats['cached_rotations'] == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∏–ª–∏ {stats['cached_rotations']}"

    print("‚úÖ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–≤—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")

def benchmark_with_without_cache():
    """–ë–µ–Ω—á–º–∞—Ä–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∫—ç—à–µ–º –∏ –±–µ–∑."""
    print("\n=== –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤
    base_coords = [(0, 0), (25, 0), (25, 15), (0, 15), (0, 0)]
    num_duplicates = 50
    carpets = [create_test_carpet(base_coords, i) for i in range(num_duplicates)]
    angles = [0, 90, 180, 270]

    # –¢–µ—Å—Ç –ë–ï–ó –∫—ç—à–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã rotate_polygon)
    clear_optimization_caches()
    start_time = time.time()
    for carpet in carpets:
        for angle in angles:
            if angle == 0:
                result = carpet.polygon
            else:
                result = rotate_polygon(carpet.polygon, angle)
    no_cache_time = time.time() - start_time

    # –¢–µ—Å—Ç –° –∫—ç—à–µ–º
    clear_optimization_caches()
    start_time = time.time()
    for carpet in carpets:
        for angle in angles:
            result = get_cached_rotation(carpet, angle)
    cache_time = time.time() - start_time

    speedup = no_cache_time / cache_time if cache_time > 0 else float('inf')

    print(f"–ë–µ–∑ –∫—ç—à–∞: {no_cache_time:.6f}—Å")
    print(f"–° –∫—ç—à–µ–º: {cache_time:.6f}—Å")
    print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")

    stats = get_cache_stats()
    print(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")

    print("‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")

    test_carpet_id_uniqueness()
    test_rotation_caching()
    test_multiple_carpets_caching()
    benchmark_with_without_cache()

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–æ–≤.")