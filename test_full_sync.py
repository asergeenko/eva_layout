#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ DXF –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import sys
sys.path.insert(0, '.')

import os
import tempfile
import ezdxf
from layout_optimizer import parse_dxf_complete, bin_packing, save_dxf_layout_complete

def test_full_sync():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üîç –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –ò DXF")
    print("=" * 70)
    
    tank_file = "dxf_samples/TANK 300/4.dxf"  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
    if not os.path.exists(tank_file):
        print(f"‚ùå –§–∞–π–ª {tank_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # 1. –ü–∞—Ä—Å–∏–Ω–≥
        print(f"\nüìã –®–ê–ì 1: –ü–ê–†–°–ò–ù–ì –§–ê–ô–õ–ê {os.path.basename(tank_file)}")
        result = parse_dxf_complete(tank_file, verbose=False)
        
        polygons_count = len(result.get('polygons', []))
        entities_count = len(result.get('original_entities', []))
        main_layer = result.get('bottom_layer_name', 'unknown')
        
        print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {polygons_count}")
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã—Ö SPLINE –æ–±—ä–µ–∫—Ç–æ–≤: {entities_count}")  
        print(f"  –ì–ª–∞–≤–Ω—ã–π —Å–ª–æ–π: {main_layer}")
        
        # 2. –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        print(f"\nüì¶ –®–ê–ì 2: –†–ê–ó–ú–ï–©–ï–ù–ò–ï")
        polygons_with_names = []
        for i, poly in enumerate(result['polygons']):
            polygons_with_names.append((poly, f"tank4_part_{i+1}.dxf", "—á–µ—Ä–Ω—ã–π", i))
        
        sheet_size = (140, 200)
        placed, unplaced = bin_packing(polygons_with_names, sheet_size, verbose=False)
        
        print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(placed)}")
        print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
        
        if not placed:
            print("‚ùå –ù–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤!")
            return
        
        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DXF  
        print(f"\nüíæ –®–ê–ì 3: –°–û–•–†–ê–ù–ï–ù–ò–ï DXF")
        
        # –°–æ–∑–¥–∞–µ–º original_dxf_data_map –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        original_dxf_data_map = {}
        for placed_item in placed:
            file_name = placed_item[4]  # –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ placed —ç–ª–µ–º–µ–Ω—Ç–∞
            original_dxf_data_map[file_name] = result
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with tempfile.NamedTemporaryFile(suffix='.dxf', delete=False) as tmp_file:
            output_path = tmp_file.name
        
        save_dxf_layout_complete(placed, sheet_size, output_path, original_dxf_data_map, verbose=False)
        print(f"  DXF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # 4. –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ DXF
        print(f"\nüìä –®–ê–ì 4: –ê–ù–ê–õ–ò–ó –°–û–•–†–ê–ù–ï–ù–ù–û–ì–û DXF")
        
        saved_doc = ezdxf.readfile(output_path)
        saved_msp = saved_doc.modelspace()
        saved_entities = list(saved_msp)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∏ —Å–ª–æ—è–º
        entity_types = {}
        layers = set()
        spline_count = 0
        
        for entity in saved_entities:
            entity_type = entity.dxftype()
            layer = getattr(entity.dxf, 'layer', '0')
            
            entity_types[entity_type] = entity_types.get(entity_type, 0) + 1
            layers.add(layer)
            
            if entity_type == 'SPLINE':
                spline_count += 1
        
        print(f"  –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ DXF: {len(saved_entities)}")
        print(f"  SPLINE –æ–±—ä–µ–∫—Ç–æ–≤: {spline_count}")
        print(f"  –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤: {entity_types}")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤: {len(layers)}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        print(f"\n‚úÖ –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø")
        
        expected_objects_per_placement = entities_count  # –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        expected_total_objects = expected_objects_per_placement * len(placed)
        
        print(f"  –†–∞–∑–º–µ—â–µ–Ω–∏–π: {len(placed)}")
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {entities_count}")
        print(f"  –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ DXF: {expected_total_objects}")
        print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤ DXF: {len(saved_entities)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        placed_polygons_count = len(placed)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {placed_polygons_count}")
        
        if len(saved_entities) >= expected_total_objects * 0.8:  # –∫–∞–∫ –º–∏–Ω–∏–º—É–º 80% –æ–±—ä–µ–∫—Ç–æ–≤
            print(f"  ‚úÖ –•–û–†–û–®–ï–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï DXF: {len(saved_entities)}/{expected_total_objects}")
        else:
            print(f"  ‚ö†Ô∏è –ù–ò–ó–ö–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï DXF: {len(saved_entities)}/{expected_total_objects}")
        
        print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"  ‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {placed_polygons_count} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ {polygons_count} –∏—Å—Ö–æ–¥–Ω—ã—Ö")  
        print(f"  ‚Ä¢ DXF —Ñ–∞–π–ª: {len(saved_entities)} –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ {expected_total_objects} –æ–∂–∏–¥–∞–µ–º—ã—Ö")
        print(f"  ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ –û–ö' if len(saved_entities) > 0 and placed_polygons_count > 0 else '‚ùå –û–®–ò–ë–ö–ê'}")
        
        # –û—á–∏—Å—Ç–∫–∞
        try:
            os.unlink(output_path)
        except:
            pass
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_full_sync()