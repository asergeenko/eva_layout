#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ bin_packing –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–π.
"""

from layout_optimizer import bin_packing, check_collision, rotate_polygon, translate_polygon
from shapely.geometry import Polygon
import matplotlib.pyplot as plt

def debug_bin_packing_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞ bin_packing"""
    print("=== –ü–û–®–ê–ì–û–í–ê–Ø –û–¢–õ–ê–î–ö–ê BIN_PACKING ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –∑–∞–≤–µ–¥–æ–º–æ —Ä–∞–∑–º–µ—â–∞–µ–º—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
    test_polygons = [
        (Polygon([(0, 0), (50, 0), (50, 30), (0, 30)]), "rect1.dxf", "—á–µ—Ä–Ω—ã–π", "order1"),  # 5x3 —Å–º
        (Polygon([(0, 0), (40, 0), (40, 25), (0, 25)]), "rect2.dxf", "—á–µ—Ä–Ω—ã–π", "order1"),  # 4x2.5 —Å–º
        (Polygon([(0, 0), (60, 0), (60, 35), (0, 35)]), "rect3.dxf", "—á–µ—Ä–Ω—ã–π", "order1"),  # 6x3.5 —Å–º
    ]
    
    sheet_size = (200, 100)  # 20x10 —Å–º - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –ª–∏—Å—Ç
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ {len(test_polygons)} –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤:")
    for i, (poly, name, color, order) in enumerate(test_polygons):
        bounds = poly.bounds
        print(f"  {i+1}. {name}: {(bounds[2]-bounds[0])/10:.1f}x{(bounds[3]-bounds[1])/10:.1f} —Å–º")
    
    print(f"–†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: {sheet_size[0]/10:.1f}x{sheet_size[1]/10:.1f} —Å–º")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º bin_packing —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    placed, unplaced = bin_packing(test_polygons, sheet_size, verbose=True)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç bin_packing:")
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)}")
    print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    if placed:
        print(f"\n–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤:")
        placed_polygons = []
        
        for i, placed_item in enumerate(placed):
            poly = placed_item[0]
            x_offset = placed_item[1] if len(placed_item) > 1 else "N/A"
            y_offset = placed_item[2] if len(placed_item) > 2 else "N/A"
            angle = placed_item[3] if len(placed_item) > 3 else "N/A"
            filename = placed_item[4] if len(placed_item) > 4 else "N/A"
            
            bounds = poly.bounds
            print(f"  –ü–æ–ª–∏–≥–æ–Ω {i+1} ({filename}):")
            print(f"    Bounds: {bounds}")
            print(f"    –†–∞–∑–º–µ—Ä: {(bounds[2]-bounds[0])/10:.1f}x{(bounds[3]-bounds[1])/10:.1f} —Å–º")
            print(f"    –°–º–µ—â–µ–Ω–∏—è: x={x_offset}, y={y_offset}")
            print(f"    –£–≥–æ–ª: {angle}¬∞")
            
            placed_polygons.append(poly)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
        print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏:")
        collision_found = False
        
        for i in range(len(placed_polygons)):
            for j in range(i+1, len(placed_polygons)):
                poly1 = placed_polygons[i]
                poly2 = placed_polygons[j]
                
                if check_collision(poly1, poly2):
                    collision_found = True
                    print(f"  ‚ùå –ö–û–õ–õ–ò–ó–ò–Ø –º–µ–∂–¥—É –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏ {i+1} –∏ {j+1}")
                    print(f"    –ü–æ–ª–∏–≥–æ–Ω {i+1}: bounds={poly1.bounds}")
                    print(f"    –ü–æ–ª–∏–≥–æ–Ω {j+1}: bounds={poly2.bounds}")
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    intersection = poly1.intersection(poly2)
                    if intersection.area > 0:
                        print(f"    –ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {intersection.area/100:.2f} —Å–º¬≤")
                else:
                    print(f"  ‚úÖ –ü–æ–ª–∏–≥–æ–Ω—ã {i+1} –∏ {j+1}: –∫–æ–ª–ª–∏–∑–∏–π –Ω–µ—Ç")
        
        if not collision_found:
            print(f"  üéâ –í—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π!")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        visualize_placement(placed_polygons, sheet_size, "debug_simple_test")
        
        return not collision_found
    else:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω –ø–æ–ª–∏–≥–æ–Ω –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω!")
        return False

def debug_collision_function():
    """–û—Ç–ª–∞–¥–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ check_collision"""
    print(f"\n=== –û–¢–õ–ê–î–ö–ê –§–£–ù–ö–¶–ò–ò CHECK_COLLISION ===")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª–∏–≥–æ–Ω—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
    poly1 = Polygon([(0, 0), (10, 0), (10, 10), (0, 10)])
    poly2 = Polygon([(20, 0), (30, 0), (30, 10), (20, 10)])
    
    collision1 = check_collision(poly1, poly2)
    print(f"–¢–µ—Å—Ç 1 - –ù–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è:")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 1: bounds={poly1.bounds}")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 2: bounds={poly2.bounds}")
    print(f"  –ö–æ–ª–ª–∏–∑–∏—è: {collision1} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: False)")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–∏–≥–æ–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
    poly3 = Polygon([(0, 0), (15, 0), (15, 10), (0, 10)])
    poly4 = Polygon([(10, 0), (25, 0), (25, 10), (10, 10)])
    
    collision2 = check_collision(poly3, poly4)
    print(f"\n–¢–µ—Å—Ç 2 - –ü–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è:")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 3: bounds={poly3.bounds}")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 4: bounds={poly4.bounds}")
    print(f"  –ö–æ–ª–ª–∏–∑–∏—è: {collision2} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: True)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
    intersection = poly3.intersection(poly4)
    print(f"  –ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {intersection.area}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–∏–≥–æ–Ω—ã –∫–∞—Å–∞—é—Ç—Å—è (–≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π)
    poly5 = Polygon([(0, 0), (10, 0), (10, 10), (0, 10)])
    poly6 = Polygon([(10, 0), (20, 0), (20, 10), (10, 10)])
    
    collision3 = check_collision(poly5, poly6)
    print(f"\n–¢–µ—Å—Ç 3 - –ö–∞—Å–∞—é—Ç—Å—è:")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 5: bounds={poly5.bounds}")
    print(f"  –ü–æ–ª–∏–≥–æ–Ω 6: bounds={poly6.bounds}")
    print(f"  –ö–æ–ª–ª–∏–∑–∏—è: {collision3} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: False)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    intersects = poly5.intersects(poly6)
    touches = poly5.touches(poly6)
    print(f"  Intersects: {intersects}, Touches: {touches}")
    
    return collision1 == False and collision2 == True and collision3 == False

def visualize_placement(polygons, sheet_size, title):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
    sheet_width_mm = sheet_size[0] * 10
    sheet_height_mm = sheet_size[1] * 10
    
    sheet_rect = plt.Rectangle((0, 0), sheet_width_mm, sheet_height_mm, 
                              fill=False, edgecolor='red', linewidth=3, linestyle='--')
    ax.add_patch(sheet_rect)
    
    # –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã
    colors = ['blue', 'green', 'orange', 'purple', 'brown']
    
    for i, polygon in enumerate(polygons):
        color = colors[i % len(colors)]
        x, y = polygon.exterior.xy
        
        ax.fill(x, y, alpha=0.6, color=color, edgecolor='black', linewidth=2, 
                label=f'–ü–æ–ª–∏–≥–æ–Ω {i+1}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ —Ü–µ–Ω—Ç—Ä
        centroid = polygon.centroid
        ax.annotate(f'{i+1}', (centroid.x, centroid.y), 
                   ha='center', va='center', fontsize=12, fontweight='bold', color='white')
    
    ax.set_xlim(-10, sheet_width_mm + 10)
    ax.set_ylim(-10, sheet_height_mm + 10)
    ax.set_aspect("equal")
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_title(f"–û—Ç–ª–∞–¥–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {title}")
    ax.set_xlabel("X (–º–º)")
    ax.set_ylabel("Y (–º–º)")
    
    plt.tight_layout()
    
    output_path = f"/tmp/{title}_debug.png"
    plt.savefig(output_path, dpi=150, bbox_inches='tight')
    plt.close()
    
    print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")

def debug_real_file_creation():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    print(f"\n=== –û–¢–õ–ê–î–ö–ê –°–û–ó–î–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê ===")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –Ω–∞–ª–æ–∂–µ–Ω–∏—è–º
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ç–µ, —á—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
    
    complex_polygons = [
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—ã –∫–æ–≤—Ä–æ–≤
        (Polygon([(0, 0), (100, 0), (100, 50), (80, 50), (80, 30), (0, 30)]), "complex1.dxf", "—á–µ—Ä–Ω—ã–π", "order1"),
        (Polygon([(0, 0), (60, 0), (60, 40), (40, 40), (40, 60), (0, 60)]), "complex2.dxf", "—á–µ—Ä–Ω—ã–π", "order1"),
        (Polygon([(0, 0), (90, 0), (90, 20), (70, 20), (70, 70), (0, 70)]), "complex3.dxf", "—á–µ—Ä–Ω—ã–π", "order1"),
    ]
    
    # –ú–µ–Ω—å—à–∏–π –ª–∏—Å—Ç –¥–ª—è –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏—è –∫ –±–æ–ª–µ–µ –ø–ª–æ—Ç–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ
    sheet_size = (150, 120)  # 15x12 —Å–º
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã –Ω–∞ –ª–∏—Å—Ç–µ {sheet_size[0]/10:.1f}x{sheet_size[1]/10:.1f} —Å–º")
    
    placed, unplaced = bin_packing(complex_polygons, sheet_size, verbose=True)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  –†–∞–∑–º–µ—â–µ–Ω–æ: {len(placed)}")
    print(f"  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}")
    
    if placed:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
        placed_polygons = [item[0] for item in placed]
        
        collision_found = False
        for i in range(len(placed_polygons)):
            for j in range(i+1, len(placed_polygons)):
                if check_collision(placed_polygons[i], placed_polygons[j]):
                    collision_found = True
                    print(f"‚ùå –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–ª–∏–∑–∏—è –º–µ–∂–¥—É –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏ {i+1} –∏ {j+1}")
                    break
            if collision_found:
                break
        
        if not collision_found:
            print("‚úÖ –ö–æ–ª–ª–∏–∑–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–∂–Ω–æ–º —Ç–µ—Å—Ç–µ")
        
        visualize_placement(placed_polygons, sheet_size, "debug_complex_test")
        
        return not collision_found
    
    return True  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π

if __name__ == "__main__":
    print("=" * 60)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ê BIN_PACKING")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test1_ok = debug_collision_function()
    test2_ok = debug_bin_packing_step_by_step()
    test3_ok = debug_real_file_creation()
    
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 60)
    
    if test1_ok:
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è check_collision —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_collision")
    
    if test2_ok:
        print("‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–ª–∏–∑–∏–∏ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
    
    if test3_ok:
        print("‚úÖ –°–ª–æ–∂–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–ª–∏–∑–∏–∏ –≤ —Å–ª–æ–∂–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
    
    if test1_ok and test2_ok and test3_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã.")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–ª—å–Ω—ã—Ö DXF –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏")
        print("–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")
    else:
        print("\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–∞–∑–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–∞–≥–æ–≤.")