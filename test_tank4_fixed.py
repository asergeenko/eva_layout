#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —Ñ–∞–π–ª–æ–º TANK 300/4.dxf
"""

import sys
sys.path.insert(0, '.')

import os
from layout_optimizer import parse_dxf_complete

def test_tank4_fixed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª 4.dxf"""
    print("üîç –¢–ï–°–¢ TANK 300/4.dxf –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 60)
    
    tank4_file = "dxf_samples/TANK 300/4.dxf"
    if not os.path.exists(tank4_file):
        print(f"‚ùå –§–∞–π–ª {tank4_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        result = parse_dxf_complete(tank4_file, verbose=False)
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"  –ü–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {len(result.get('polygons', []))}")
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤—Å–µ–≥–æ: {len(result.get('original_entities', []))}")
        print(f"  –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–π: {result.get('bottom_layer_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–µ —Å –ø–ª–æ—â–∞–¥—è–º–∏
        layer_info = {}
        for entity_data in result.get('original_entities', []):
            layer = entity_data['layer']
            if layer not in layer_info:
                layer_info[layer] = {'count': 0, 'entities': []}
            layer_info[layer]['count'] += 1
            layer_info[layer]['entities'].append(entity_data)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø–æ —Å–ª–æ—è–º
        from layout_optimizer import convert_entity_to_polygon_improved
        from shapely.ops import unary_union
        
        layer_polygons = {}
        for layer, info in layer_info.items():
            polygons = []
            for entity_data in info['entities']:
                poly = convert_entity_to_polygon_improved(entity_data['entity'])
                if poly and not poly.is_empty:
                    polygons.append(poly)
            
            if polygons:
                if len(polygons) == 1:
                    combined = polygons[0]
                else:
                    combined = unary_union(polygons)
                    if hasattr(combined, 'geoms'):
                        # MultiPolygon - –±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
                        combined = max(combined.geoms, key=lambda p: p.area)
                
                layer_polygons[layer] = combined
                layer_info[layer]['area'] = combined.area
                layer_info[layer]['polygon_count'] = len(polygons)
        
        print(f"\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –°–õ–û–Ø–ú:")
        for layer, info in layer_info.items():
            marker = "üëë" if layer == result.get('bottom_layer_name') else "  "
            area = info.get('area', 0)
            poly_count = info.get('polygon_count', 0)
            print(f"  {marker} {layer}: {info['count']} –æ–±—ä–µ–∫—Ç–æ–≤ ‚Üí {poly_count} –ø–æ–ª–∏–≥–æ–Ω–æ–≤, –ø–ª–æ—â–∞–¥—å: {area:.0f}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if result.get('polygons'):
            final_poly = result['polygons'][0] if len(result['polygons']) == 1 else result['polygons']
            if hasattr(final_poly, 'area'):
                final_area = final_poly.area
                bounds = final_poly.bounds
                width = bounds[2] - bounds[0]
                height = bounds[3] - bounds[1]
                print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –ü–û–õ–ò–ì–û–ù –î–õ–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò:")
                print(f"  –†–∞–∑–º–µ—Ä: {width:.1f}√ó{height:.1f}")
                print(f"  –ü–ª–æ—â–∞–¥—å: {final_area:.0f}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–º, —á—Ç–æ –±—ã–ª–æ –±—ã –ø—Ä–∏ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
        print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –í–´–ë–û–†–ê –°–õ–û–Ø:")
        
        # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ (–ø–µ—Ä–≤—ã–π –ø–æ –ø–æ—Ä—è–¥–∫—É)
        old_layer = min(layer_info.keys(), key=lambda l: min(i for i, e in enumerate(result.get('original_entities', [])) if e['layer'] == l))
        old_area = layer_info[old_layer].get('area', 0)
        
        # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å)
        new_layer = result.get('bottom_layer_name')
        new_area = layer_info[new_layer].get('area', 0)
        
        print(f"  –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±—Ä–∞–ª–∞ –±—ã: '{old_layer}' (–ø–ª–æ—â–∞–¥—å: {old_area:.0f})")
        print(f"  –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±—Ä–∞–ª–∞: '{new_layer}' (–ø–ª–æ—â–∞–¥—å: {new_area:.0f})")
        
        if new_area > old_area:
            improvement = new_area / old_area if old_area > 0 else float('inf')
            print(f"  ‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: –ø–ª–æ—â–∞–¥—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤ {improvement:.1f} —Ä–∞–∑!")
        else:
            print(f"  ‚ö†Ô∏è –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±—Ä–∞–ª–∞ —Å–ª–æ–π —Å –º–µ–Ω—å—à–µ–π –ø–ª–æ—â–∞–¥—å—é")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_tank4_fixed()