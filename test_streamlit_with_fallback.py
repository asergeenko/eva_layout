#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Excel –Ω–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏ –ø—Ä–∏ —Å–±–æ–µ DXF
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–º–∏—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Streamlit –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –¥–ª—è DXF
"""

import sys
import os
import pandas as pd
import logging
from shapely.geometry import Polygon

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from layout_optimizer import (
    bin_packing_with_inventory,
    parse_dxf_complete,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_real_excel_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ sample_input.xlsx –∫–∞–∫ –≤ Streamlit"""
    excel_path = "sample_input.xlsx"
    if not os.path.exists(excel_path):
        raise FileNotFoundError(f"–§–∞–π–ª {excel_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    df = pd.read_excel(excel_path, sheet_name='ZAKAZ')
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–º –∫–æ–ª–æ–Ω–∫–∏
    header_row = df.iloc[0]
    df.columns = [str(header_row.iloc[i]) if pd.notna(header_row.iloc[i]) else f'col_{i}' for i in range(len(header_row))]
    df = df[1:].reset_index(drop=True)
    
    return df

def process_real_excel_orders_with_fallback(df):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –∑–∞–∫–∞–∑—ã –∏–∑ Excel —Å fallback –∫ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª–∏–≥–æ–Ω–∞–º"""
    polygons = []
    
    for idx, row in df.iterrows():
        order_id = f"ZAKAZ_row_{idx + 2}"  # +2 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤ Streamlit
        article = row['–ê—Ä—Ç–∏–∫—É–ª']
        product_name = row['–¢–û–í–ê–†']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è
        if pd.isna(product_name):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (–∫–∞–∫ –≤ Streamlit)
        color = '—á—ë—Ä–Ω—ã–π'
        if '+12' in str(article):
            color = '—á—ë—Ä–Ω—ã–π'
        elif '+11' in str(article):
            color = '—Å–µ—Ä—ã–π'
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ DXF —Ñ–∞–π–ª—ã
        dxf_files = []
        dxf_samples_dir = "dxf_samples"
        
        if os.path.exists(dxf_samples_dir):
            for root, dirs, files in os.walk(dxf_samples_dir):
                if product_name.upper() in root.upper():
                    for file in files:
                        if file.endswith('.dxf'):
                            dxf_files.append(os.path.join(root, file))
                            if len(dxf_files) >= 5:  # –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤
                                break
                    if dxf_files:
                        break
        
        created_polygons = []
        
        if dxf_files:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ DXF —Ñ–∞–π–ª—ã —Å fallback
            for i, dxf_file in enumerate(dxf_files):
                try:
                    polygon_data = parse_dxf_complete(dxf_file)
                    if polygon_data and polygon_data[0] and polygon_data[0] != 0:
                        polygon = polygon_data[0]
                        filename = f"{product_name}_{i+1}.dxf"
                        created_polygons.append((polygon, filename, color, order_id))
                    else:
                        raise Exception("DXF –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π –ø–æ–ª–∏–≥–æ–Ω")
                        
                except Exception as e:
                    # Fallback –∫ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–ª–∏–≥–æ–Ω—É
                    size = 80 + i * 10  # –í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                    poly = Polygon([(0, 0), (size, 0), (size, size-20), (0, size-20)])
                    filename = f"{product_name}_{i+1}.dxf"
                    created_polygons.append((poly, filename, color, order_id))
                    
        else:
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–∏–≥–æ–Ω—ã –µ—Å–ª–∏ DXF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            poly_count = min(5, max(1, len(str(article).split('+'))))  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            for i in range(poly_count):
                # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
                size = 80 + i * 15  # –ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                poly = Polygon([(0, 0), (size, 0), (size, size-30), (0, size-30)])
                filename = f"{product_name}_{i+1}.dxf"
                created_polygons.append((poly, filename, color, order_id))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
        polygons.extend(created_polygons)
        
        # –û—Å–æ–±—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        if product_name == "SUZUKI XBEE":
            print(f"‚úì SUZUKI XBEE: —Å–æ–∑–¥–∞–Ω–æ {len(created_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è {order_id}")
        elif product_name == "VOLKSWAGEN TIGUAN 1":
            print(f"‚úì VOLKSWAGEN TIGUAN 1: —Å–æ–∑–¥–∞–Ω–æ {len(created_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è {order_id}")
    
    return polygons

def create_real_priority2_polygons():
    """–°–æ–∑–¥–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 —Å fallback"""
    priority2_polygons = []
    dxf_file = "dxf_samples/–î–ï–ö–ê KUGOO M4 PRO JILONG/1.dxf"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω
    base_polygon = None
    if os.path.exists(dxf_file):
        try:
            polygon_data = parse_dxf_complete(dxf_file)
            if polygon_data and polygon_data[0] and polygon_data[0] != 0:
                base_polygon = polygon_data[0]
                print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 –∏–∑ {dxf_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {dxf_file}: {e}")
    
    # Fallback –∫ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–ª–∏–≥–æ–Ω—É
    if base_polygon is None:
        base_polygon = Polygon([(0, 0), (60, 0), (60, 40), (0, 40)])
        print(f"‚úì –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª–∏–≥–æ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2")
    
    # 20 —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
    for i in range(20):
        filename = f"–î–ï–ö–ê_KUGOO_M4_PRO_JILONG_—á–µ—Ä–Ω—ã–π_{i+1}.dxf"
        priority2_polygons.append((base_polygon, filename, "—á—ë—Ä–Ω—ã–π", f"PRIORITY2_BLACK_{i+1}", 2))
    
    # 20 —Å–µ—Ä—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
    for i in range(20):
        filename = f"–î–ï–ö–ê_KUGOO_M4_PRO_JILONG_—Å–µ—Ä—ã–π_{i+1}.dxf"
        priority2_polygons.append((base_polygon, filename, "—Å–µ—Ä—ã–π", f"PRIORITY2_GRAY_{i+1}", 2))
    
    return priority2_polygons

def create_real_sheets():
    """–°–æ–∑–¥–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –ª–∏—Å—Ç—ã: 20 —á–µ—Ä–Ω—ã—Ö + 20 —Å–µ—Ä—ã—Ö 140*200"""
    sheets = []
    
    # 20 —á–µ—Ä–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
    for i in range(1, 21):
        sheets.append({
            "name": f"–õ–∏—Å—Ç 140x200 —á—ë—Ä–Ω—ã–π #{i}",
            "width": 140,
            "height": 200,
            "color": "—á—ë—Ä–Ω—ã–π",
            "count": 1,
            "used": 0
        })
    
    # 20 —Å–µ—Ä—ã—Ö –ª–∏—Å—Ç–æ–≤
    for i in range(1, 21):
        sheets.append({
            "name": f"–õ–∏—Å—Ç 140x200 —Å–µ—Ä—ã–π #{i}",
            "width": 140,
            "height": 200,
            "color": "—Å–µ—Ä—ã–π",
            "count": 1,
            "used": 0
        })
    
    return sheets

def main():
    print("=== –¢–ï–°–¢ STREAMLIT –° FALLBACK ==")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
    try:
        df = load_real_excel_data()
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ sample_input.xlsx")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        return False
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã Excel —Å fallback
    excel_polygons = process_real_excel_orders_with_fallback(df)
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(excel_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ Excel")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 —Å fallback
    priority2_polygons = create_real_priority2_polygons()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(priority2_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2")
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
    sheets = create_real_sheets()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(sheets)} –ª–∏—Å—Ç–æ–≤")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã
    all_polygons = excel_polygons + priority2_polygons
    total_polygons = len(all_polygons)
    print(f"üìä –í–°–ï–ì–û –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_polygons}")
    

    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —á—Ç–æ –≤ Streamlit
    print(f"\n=== –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===")
    MAX_SHEETS_PER_ORDER = 5
    
    placed_layouts, unplaced = bin_packing_with_inventory(
        all_polygons,
        sheets,
        verbose=True,  # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        max_sheets_per_order=MAX_SHEETS_PER_ORDER,
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    actual_placed_count = total_polygons - len(unplaced)
    print(f"–†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {actual_placed_count}/{total_polygons}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(placed_layouts)}")
    print(f"–ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(unplaced)}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print(f"\n=== –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –§–ê–ô–õ–û–í ===")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ SUZUKI XBEE_5.dxf
    suzuki_xbee_5_count = 0
    suzuki_files = []
    for layout in placed_layouts:
        for poly in layout['placed_polygons']:
            # Handle both 7-element (from bin_packing) and 4-element tuples
            if len(poly) >= 7:
                filename = str(poly[4])  # In 7-element tuple, filename is at index 4
            elif len(poly) >= 2:
                filename = str(poly[1])  # In 4-element tuple, filename is at index 1
            else:
                filename = "unknown"
            
            if "SUZUKI XBEE" in filename:
                suzuki_files.append(filename)
                if filename == "SUZUKI XBEE_5.dxf":
                    suzuki_xbee_5_count += 1
    
    print(f"1. SUZUKI XBEE –∞–Ω–∞–ª–∏–∑:")
    print(f"   ‚Ä¢ SUZUKI XBEE_5.dxf —Ä–∞–∑–º–µ—â–µ–Ω {suzuki_xbee_5_count} —Ä–∞–∑(–∞) (–¥–æ–ª–∂–µ–Ω: 1)")
    print(f"   ‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã SUZUKI XBEE: {suzuki_files}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º VOLKSWAGEN TIGUAN 1
    vw_files = []
    for layout in placed_layouts:
        for poly in layout['placed_polygons']:
            # Handle both 7-element (from bin_packing) and 4-element tuples
            if len(poly) >= 7:
                filename = str(poly[4])  # In 7-element tuple, filename is at index 4
            elif len(poly) >= 2:
                filename = str(poly[1])  # In 4-element tuple, filename is at index 1
            else:
                filename = "unknown"
                
            if "VOLKSWAGEN TIGUAN 1" in filename:
                vw_files.append(filename)
    
    print(f"2. VOLKSWAGEN TIGUAN 1 –∞–Ω–∞–ª–∏–∑:")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {vw_files}")
    missing_vw = [f"VOLKSWAGEN TIGUAN 1_{i}.dxf" for i in [3, 4] if f"VOLKSWAGEN TIGUAN 1_{i}.dxf" not in vw_files]
    if missing_vw:
        print(f"   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {missing_vw}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2
    priority2_black_placed = 0
    priority2_gray_placed = 0
    
    for layout in placed_layouts:
        for poly in layout['placed_polygons']:
            # Handle both 7-element and 4-element tuples for order_id
            order_id = ""
            if len(poly) >= 7:
                order_id = str(poly[6]) if poly[6] is not None else ""
            elif len(poly) >= 4:
                order_id = str(poly[3]) if poly[3] is not None else ""
            
            if order_id.startswith('PRIORITY2_BLACK'):
                priority2_black_placed += 1
            elif order_id.startswith('PRIORITY2_GRAY'):
                priority2_gray_placed += 1
    
    print(f"3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 –∞–Ω–∞–ª–∏–∑:")
    print(f"   ‚Ä¢ –ß–µ—Ä–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 —Ä–∞–∑–º–µ—â–µ–Ω–æ: {priority2_black_placed}/20")
    print(f"   ‚Ä¢ –°–µ—Ä—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 —Ä–∞–∑–º–µ—â–µ–Ω–æ: {priority2_gray_placed}/20")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ
    if unplaced:
        print(f"4. –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã ({len(unplaced)}):")
        excel_unplaced = []
        priority2_unplaced = []
        for poly in unplaced:
            # Handle both 7-element and 4-element tuples for unplaced analysis
            if len(poly) >= 7:
                filename = str(poly[4])
                order_id = str(poly[6]) if poly[6] is not None else ""
            elif len(poly) >= 4:
                filename = str(poly[1]) if len(poly) > 1 else "unknown"
                order_id = str(poly[3]) if poly[3] is not None else ""
            else:
                filename = str(poly[1]) if len(poly) > 1 else "unknown"
                order_id = ""
            
            if order_id.startswith('PRIORITY2'):
                priority2_unplaced.append(filename)
            else:
                excel_unplaced.append(filename)
        
        if excel_unplaced:
            print(f"   ‚Ä¢ Excel —Ñ–∞–π–ª—ã: {excel_unplaced[:5]}...")
        if priority2_unplaced:
            print(f"   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: {priority2_unplaced[:5]}...")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    problems = []
    if suzuki_xbee_5_count > 1:
        problems.append(f"SUZUKI XBEE_5.dxf –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è ({suzuki_xbee_5_count} —Ä–∞–∑)")
    
    if len(missing_vw) > 0:
        problems.append(f"–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã VOLKSWAGEN TIGUAN —Ñ–∞–π–ª—ã: {missing_vw}")
    
    if priority2_gray_placed < 16:  # –ú–µ–Ω–µ–µ 80% —Å–µ—Ä—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
        problems.append(f"–ú–∞–ª–æ —Å–µ—Ä—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2: {priority2_gray_placed}/20")
    
    if len(unplaced) > 10:
        problems.append(f"–ú–Ω–æ–≥–æ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {len(unplaced)}")
    
    if problems:
        print(f"\n‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for problem in problems:
            print(f"   ‚Ä¢ {problem}")
        return False
    else:
        print(f"\n‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù:")
        print(f"   ‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã")
        print(f"   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)