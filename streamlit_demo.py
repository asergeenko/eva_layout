import streamlit as st
import pandas as pd
import numpy as np
import os
import uuid
from datetime import datetime
from io import BytesIO

from layout_optimizer import parse_dxf, bin_packing, bin_packing_with_inventory, save_dxf_layout, plot_layout, plot_input_polygons, scale_polygons_to_fit

# Configuration
DEFAULT_SHEET_TYPES = [
    (140, 200), (142, 200), (144, 200), (146, 200), (148, 200),
    (140, 195), (142, 195), (144, 195), (146, 195), (148, 195),
    (100, 100), (150, 150), (200, 300)
]
OUTPUT_FOLDER = "output_layouts"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)


# Streamlit App
st.title("–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ä–∞—Å–∫—Ä–æ—è EVA –∫–æ–≤—Ä–∏–∫–æ–≤")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ DXF —Ñ–∞–π–ª—ã –∏ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–≤—Ä–∏–∫–æ–≤.")

# Sheet Inventory Section
st.header("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤")
st.write("–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ –ª–∏—Å—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")

# Initialize session state for sheets
if 'available_sheets' not in st.session_state:
    st.session_state.available_sheets = []

# Add new sheet type
st.subheader("–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –ª–∏—Å—Ç–∞")
col1, col2, col3 = st.columns([2, 2, 1])

with col1:
    sheet_type_option = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞ (—Å–º)", 
        ["–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π"] + [f"{w}x{h}" for w, h in DEFAULT_SHEET_TYPES],
        key="sheet_type_select"
    )
    
    if sheet_type_option == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
        sheet_width = st.number_input("–®–∏—Ä–∏–Ω–∞ (—Å–º)", min_value=50.0, max_value=300.0, value=140.0, key="custom_width")
        sheet_height = st.number_input("–í—ã—Å–æ—Ç–∞ (—Å–º)", min_value=50.0, max_value=300.0, value=200.0, key="custom_height")
        selected_size = (sheet_width, sheet_height)
    else:
        selected_size = tuple(map(float, sheet_type_option.split("x")))
        
with col2:
    sheet_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤", min_value=1, max_value=100, value=5, key="sheet_count")
    sheet_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ª–∏—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", 
                              value=f"–õ–∏—Å—Ç {selected_size[0]}x{selected_size[1]}", 
                              key="sheet_name")

with col3:
    st.write("")
    st.write("")
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å", key="add_sheet"):
        new_sheet = {
            "name": sheet_name,
            "width": selected_size[0],
            "height": selected_size[1], 
            "count": sheet_count,
            "used": 0
        }
        st.session_state.available_sheets.append(new_sheet)
        st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–ø –ª–∏—Å—Ç–∞: {new_sheet['name']} ({new_sheet['count']} —à—Ç.)")
        st.rerun()

# Display current sheet inventory
if st.session_state.available_sheets:
    st.subheader("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã")
    
    # Create DataFrame for display
    sheets_data = []
    total_sheets = 0
    for i, sheet in enumerate(st.session_state.available_sheets):
        sheets_data.append({
            "‚Ññ": i + 1,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": sheet['name'],
            "–†–∞–∑–º–µ—Ä (—Å–º)": f"{sheet['width']}x{sheet['height']}",
            "–î–æ—Å—Ç—É–ø–Ω–æ": f"{sheet['count'] - sheet['used']}/{sheet['count']}",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ": sheet['used']
        })
        total_sheets += sheet['count']
    
    sheets_df = pd.DataFrame(sheets_data)
    st.dataframe(sheets_df, use_container_width=True)
    
    col1, col2 = st.columns([3, 1])
    with col1:
        st.metric("–í—Å–µ–≥–æ –ª–∏—Å—Ç–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏", total_sheets)
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", key="clear_sheets"):
            st.session_state.available_sheets = []
            st.rerun()
else:
    st.info("–î–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø—ã –ª–∏—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏.")

# DXF Files Section
st.header("üìÑ –§–∞–π–ª—ã –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è")
dxf_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ DXF —Ñ–∞–π–ª—ã", type=["dxf"], accept_multiple_files=True)

if st.button("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–∫—Ä–æ–π"):
    if not st.session_state.available_sheets:
        st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –ª–∏—Å—Ç–∞ –≤ –Ω–∞–ª–∏—á–∏–∏.")
    elif not dxf_files:
        st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω DXF —Ñ–∞–π–ª.")
    else:
        # Parse DXF files
        st.header("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ DXF —Ñ–∞–π–ª–æ–≤")
        polygons = []
        
        # Parse files quietly first
        for file in dxf_files:
            file.seek(0)
            file_bytes = BytesIO(file.read())
            file_polygon = parse_dxf(file_bytes, verbose=False)
            if file_polygon:
                polygons.append((file_polygon, file.name))
        
        # Show detailed parsing info in expander
        with st.expander("üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–æ–≤", expanded=False):
            st.write("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:")
            for file in dxf_files:
                st.write(f"**–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file.name}**")
                file.seek(0)
                file_bytes = BytesIO(file.read())
                parse_dxf(file_bytes, verbose=True)
        
        if not polygons:
            st.error("–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö DXF —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤!")
            st.stop()
        
        # Show input visualization
        st.header("üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        input_plots = plot_input_polygons(polygons)
        if input_plots:
            # Show color legend
            with st.expander("üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Ñ–∞–π–ª–æ–≤", expanded=False):
                legend_cols = st.columns(min(5, len(polygons)))
                for i, (_, file_name) in enumerate(polygons):
                    with legend_cols[i % len(legend_cols)]:
                        from layout_optimizer import get_color_for_file
                        color = get_color_for_file(file_name)
                        # Convert RGB to hex for HTML
                        color_hex = f"#{int(color[0]*255):02x}{int(color[1]*255):02x}{int(color[2]*255):02x}"
                        st.markdown(f'<div style="background-color: {color_hex}; padding: 10px; border-radius: 5px; text-align: center; margin: 2px;"><b>{file_name}</b></div>', 
                                  unsafe_allow_html=True)
            
            cols = st.columns(min(3, len(input_plots)))
            for i, (file_name, plot_buf) in enumerate(input_plots.items()):
                with cols[i % len(cols)]:
                    st.image(plot_buf, caption=f"{file_name}", use_container_width=True)
        
        # Show polygon statistics with real dimensions
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        # Store original dimensions for comparison later
        original_dimensions = {}
        
        # Create a summary table with proper unit conversion
        summary_data = []
        total_area_cm2 = 0
        for poly, filename in polygons:
            bounds = poly.bounds
            width_mm = bounds[2] - bounds[0]
            height_mm = bounds[3] - bounds[1]
            area_mm2 = poly.area
            
            # Convert from mm to cm
            width_cm = width_mm / 10.0
            height_cm = height_mm / 10.0
            area_cm2 = area_mm2 / 100.0
            
            # Store original dimensions
            original_dimensions[filename] = {
                "width_cm": width_cm,
                "height_cm": height_cm,
                "area_cm2": area_cm2
            }
            
            total_area_cm2 += area_cm2
            summary_data.append({
                "–§–∞–π–ª": filename,
                "–®–∏—Ä–∏–Ω–∞ (—Å–º)": f"{width_cm:.1f}",
                "–í—ã—Å–æ—Ç–∞ (—Å–º)": f"{height_cm:.1f}",
                "–ü–ª–æ—â–∞–¥—å (—Å–º¬≤)": f"{area_cm2:.2f}"
            })
        
        summary_df = pd.DataFrame(summary_data)
        st.dataframe(summary_df, use_container_width=True)
        
        # Calculate theoretical minimum using largest available sheet
        largest_sheet_area = max(sheet['width'] * sheet['height'] for sheet in st.session_state.available_sheets)
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤", len(polygons))
        with col2:
            st.metric("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å", f"{total_area_cm2:.2f} —Å–º¬≤")
        with col3:
            st.metric("–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º –ª–∏—Å—Ç–æ–≤", max(1, int(np.ceil(total_area_cm2 / largest_sheet_area))))
        
        # Auto-scale polygons if needed (use largest available sheet for scaling reference)
        st.header("üìê –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
        
        # Find largest sheet for scaling reference
        max_sheet_area = 0
        reference_sheet_size = (140, 200)  # default fallback
        for sheet in st.session_state.available_sheets:
            area = sheet['width'] * sheet['height']
            if area > max_sheet_area:
                max_sheet_area = area
                reference_sheet_size = (sheet['width'], sheet['height'])
        
        # Scale quietly first
        scaled_polygons = scale_polygons_to_fit(polygons, reference_sheet_size, verbose=False)
        
        # Show scaling details in expander
        with st.expander("üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏", expanded=False):
            st.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ª–∏—Å—Ç ({reference_sheet_size[0]}x{reference_sheet_size[1]} —Å–º) –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
            scale_polygons_to_fit(polygons, reference_sheet_size, verbose=True)
        
        polygons = scaled_polygons
        
        st.header("üîÑ –ü—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

        # Debug processing with detailed info
        with st.expander("üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", expanded=False):
            debug_layouts, debug_unplaced = bin_packing_with_inventory(polygons, st.session_state.available_sheets, verbose=True)
        
        # Actual processing (quiet)
        placed_layouts, unplaced_polygons = bin_packing_with_inventory(polygons, st.session_state.available_sheets, verbose=False)
        
        # Convert to old format for compatibility with existing display code
        all_layouts = []
        report_data = []
        
        for i, layout in enumerate(placed_layouts):
            # Save and visualize layout
            output_file = os.path.join(OUTPUT_FOLDER, f"layout_{layout['sheet_type'].replace(' ', '_')}_{layout['sheet_number']}_{uuid.uuid4()}.dxf")
            save_dxf_layout(layout['placed_polygons'], layout['sheet_size'], output_file)
            layout_plot = plot_layout(layout['placed_polygons'], layout['sheet_size'])

            # Store layout info in old format for compatibility
            all_layouts.append({
                "Sheet": layout['sheet_number'],
                "Sheet Type": layout['sheet_type'],
                "Sheet Size": f"{layout['sheet_size'][0]}x{layout['sheet_size'][1]} —Å–º",
                "Output File": output_file,
                "Plot": layout_plot,
                "Shapes Placed": len(layout['placed_polygons']),
                "Material Usage (%)": f"{layout['usage_percent']:.2f}",
                "Placed Polygons": layout['placed_polygons']
            })
            report_data.extend([(p[4], layout['sheet_number'], output_file) for p in layout['placed_polygons']])
        
        # Update sheet inventory in session state
        for layout in placed_layouts:
            for original_sheet in st.session_state.available_sheets:
                if layout['sheet_type'] == original_sheet['name']:
                    original_sheet['used'] += 1
                    break

        # Display Results
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        if all_layouts:
            st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(all_layouts)}")
            
            # Summary statistics
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Å–µ–≥–æ –ª–∏—Å—Ç–æ–≤", len(all_layouts))
            with col2:
                total_placed = sum(layout["Shapes Placed"] for layout in all_layouts)
                st.metric("–†–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤", f"{total_placed}/{len(polygons)}")
            with col3:
                avg_usage = sum(float(layout["Material Usage (%)"].replace('%', '')) for layout in all_layouts) / len(all_layouts)
                st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", f"{avg_usage:.1f}%")
            with col4:
                if unplaced_polygons:
                    st.metric("–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ", len(unplaced_polygons), delta=f"-{len(unplaced_polygons)}", delta_color="inverse")
                else:
                    st.metric("–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ", 0, delta="–í—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ ‚úÖ")
            
            # Show updated inventory
            st.subheader("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ª–∏—Å—Ç–æ–≤")
            updated_sheets_data = []
            for sheet in st.session_state.available_sheets:
                updated_sheets_data.append({
                    "–¢–∏–ø –ª–∏—Å—Ç–∞": sheet['name'],
                    "–†–∞–∑–º–µ—Ä (—Å–º)": f"{sheet['width']}x{sheet['height']}",
                    "–ë—ã–ª–æ": sheet['count'],
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ": sheet['used'],
                    "–û—Å—Ç–∞–ª–æ—Å—å": sheet['count'] - sheet['used']
                })
            updated_df = pd.DataFrame(updated_sheets_data)
            st.dataframe(updated_df, use_container_width=True)
            
            # Detailed results table with sizes
            st.subheader("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            # Create enhanced report with sizes
            enhanced_report_data = []
            for layout in all_layouts:
                for polygon, _, _, angle, file_name in layout["Placed Polygons"]:
                    bounds = polygon.bounds
                    width_cm = (bounds[2] - bounds[0]) / 10
                    height_cm = (bounds[3] - bounds[1]) / 10
                    area_cm2 = polygon.area / 100
                    
                    # Compare with original dimensions
                    original = original_dimensions.get(file_name, {})
                    original_width = original.get("width_cm", 0)
                    original_height = original.get("height_cm", 0)
                    original_area = original.get("area_cm2", 0)
                    
                    scale_factor = (width_cm / original_width) if original_width > 0 else 1.0
                    
                    size_comparison = f"{width_cm:.1f}√ó{height_cm:.1f}"
                    if abs(scale_factor - 1.0) > 0.01:  # If scaled
                        size_comparison += f" (–±—ã–ª–æ {original_width:.1f}√ó{original_height:.1f})"
                    
                    enhanced_report_data.append({
                        "DXF —Ñ–∞–π–ª": file_name,
                        "–ù–æ–º–µ—Ä –ª–∏—Å—Ç–∞": layout["Sheet"],
                        "–†–∞–∑–º–µ—Ä (—Å–º)": size_comparison,
                        "–ü–ª–æ—â–∞–¥—å (—Å–º¬≤)": f"{area_cm2:.2f}",
                        "–ü–æ–≤–æ—Ä–æ—Ç (¬∞)": f"{angle:.0f}",
                        "–ú–∞—Å—à—Ç–∞–±": f"{scale_factor:.3f}" if abs(scale_factor - 1.0) > 0.01 else "1.000",
                        "–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª": layout["Output File"]
                    })
            
            if enhanced_report_data:
                enhanced_df = pd.DataFrame(enhanced_report_data)
                st.dataframe(enhanced_df, use_container_width=True)
                # Also create simple report_df for export
                report_df = pd.DataFrame(report_data, columns=["DXF —Ñ–∞–π–ª", "–ù–æ–º–µ—Ä –ª–∏—Å—Ç–∞", "–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"])
            else:
                report_df = pd.DataFrame(report_data, columns=["DXF —Ñ–∞–π–ª", "–ù–æ–º–µ—Ä –ª–∏—Å—Ç–∞", "–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"])
                st.dataframe(report_df, use_container_width=True)

            # Sheet visualizations
            st.subheader("üìê –°—Ö–µ–º—ã —Ä–∞—Å–∫—Ä–æ—è –ª–∏—Å—Ç–æ–≤")
            for layout in all_layouts:
                st.write(f"**–õ–∏—Å—Ç ‚Ññ{layout['Sheet']}: {layout['Sheet Type']} ({layout['Sheet Size']}) - {layout['Shapes Placed']} –æ–±—ä–µ–∫—Ç–æ–≤ - {layout['Material Usage (%)']}% —Ä–∞—Å—Ö–æ–¥**")
                col1, col2 = st.columns([2, 1])
                with col1:
                    st.image(layout["Plot"], caption=f"–†–∞—Å–∫—Ä–æ–π –ª–∏—Å—Ç–∞ ‚Ññ{layout['Sheet']} ({layout['Sheet Type']})", use_container_width=True)
                with col2:
                    st.write(f"**–¢–∏–ø –ª–∏—Å—Ç–∞:** {layout['Sheet Type']}")
                    st.write(f"**–†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞:** {layout['Sheet Size']}")
                    st.write(f"**–†–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:** {layout['Shapes Placed']}")
                    st.write(f"**–†–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:** {layout['Material Usage (%)']}%")
                    with open(layout["Output File"], "rb") as f:
                        st.download_button(
                            label=f"üì• –°–∫–∞—á–∞—Ç—å DXF",
                            data=f,
                            file_name=os.path.basename(layout["Output File"]),
                            mime="application/dxf",
                            key=f"download_{layout['Sheet']}"
                        )
                st.divider()  # Add visual separator between sheets
        else:
            st.error("‚ùå –ù–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ.")
        
        # Show unplaced polygons if any
        if unplaced_polygons:
            st.warning(f"‚ö†Ô∏è {len(unplaced_polygons)} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å.")
            st.subheader("üö´ –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã")
            unplaced_df = pd.DataFrame([(name, f"{poly.area/100:.2f}") for poly, name in unplaced_polygons], 
                                     columns=["–§–∞–π–ª", "–ü–ª–æ—â–∞–¥—å (—Å–º¬≤)"])
            st.dataframe(unplaced_df, use_container_width=True)

        # Save report
        if all_layouts:
            report_file = os.path.join(OUTPUT_FOLDER, f"layout_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx")
            
            # Use enhanced report if available, otherwise simple report
            if enhanced_report_data:
                enhanced_df.to_excel(report_file, index=False)
            elif 'report_df' in locals():
                report_df.to_excel(report_file, index=False)
            else:
                # Fallback: create simple report from report_data
                fallback_df = pd.DataFrame(report_data, columns=["DXF —Ñ–∞–π–ª", "–ù–æ–º–µ—Ä –ª–∏—Å—Ç–∞", "–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"])
                fallback_df.to_excel(report_file, index=False)
            
            with open(report_file, "rb") as f:
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                    data=f,
                    file_name=os.path.basename(report_file),
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

# Footer
#st.write("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø–∞–∫–æ–≤–∫–∏. –î–ª—è –ª—É—á—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ BL-NFP.")