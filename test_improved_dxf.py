#!/usr/bin/env python3
"""Simple test for improved DXF handling."""

import os
from layout_optimizer import parse_dxf_complete, save_dxf_layout_complete

def test_improved_dxf():
    """Test the improved DXF handling."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π DXF –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("=" * 50)
    
    # Find a sample DXF file
    sample_file = None
    dxf_samples_path = "dxf_samples"
    
    if os.path.exists(dxf_samples_path):
        for root, dirs, files in os.walk(dxf_samples_path):
            for file in files:
                if file.lower().endswith('.dxf'):
                    sample_file = os.path.join(root, file)
                    break
            if sample_file:
                break
    
    if not sample_file:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–∑–µ—Ü DXF —Ñ–∞–π–ª–∞")
        return False
    
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∞–π–ª–æ–º: {os.path.basename(sample_file)}")
    
    # Test improved parsing
    with open(sample_file, 'rb') as f:
        parsed_data = parse_dxf_complete(f, verbose=True)
    
    if parsed_data and parsed_data['combined_polygon']:
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
        print(f"   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(parsed_data['original_entities'])}")
        print(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω–æ–≤: {len(parsed_data['polygons'])}")
        print(f"   ‚Ä¢ –ü–ª–æ—â–∞–¥—å: {parsed_data['combined_polygon'].area:.2f} –º–º¬≤")
        
        # Test improved output
        test_output = "test_output_improved.dxf"
        original_dxf_data_map = {os.path.basename(sample_file): parsed_data}
        placed_elements = [(parsed_data['combined_polygon'], 50, 50, 0, os.path.basename(sample_file), "—Å–µ—Ä—ã–π")]
        sheet_size = (200, 200)  # 200x200 cm
        
        try:
            save_dxf_layout_complete(placed_elements, sheet_size, test_output, original_dxf_data_map)
            
            if os.path.exists(test_output):
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {test_output}")
                
                # Analyze improved output
                with open(test_output, 'rb') as f:
                    improved_result = parse_dxf_complete(f, verbose=False)
                
                print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
                print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π ‚Üí –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥:")
                print(f"   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(parsed_data['original_entities'])} ‚Üí {len(improved_result['original_entities']) if improved_result else 0}")
                
                # Clean up
                os.remove(test_output)
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    else:
        print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
        return False

if __name__ == "__main__":
    success = test_improved_dxf()
    print(f"\n{'üéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!' if success else '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!'}")